<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2015-08-16T15:25:28-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Since Server API v1 all keys]]></title>
    <link href="http://jjasghar.github.io/blog/2015/08/16/since-server-api-v1-all-keys/"/>
    <updated>2015-08-16T15:10:37-05:00</updated>
    <id>http://jjasghar.github.io/blog/2015/08/16/since-server-api-v1-all-keys</id>
    <content type="html"><![CDATA[<p>I was playing around with <a href="https://downloads.chef.io/chef-server/">Chef Server 12</a> and attempted to do a <code>knife bootsrap</code> a machine. My bootstrap failed due to a timeout with a <code>remote_file</code> download. I attempted to run a second <code>knife bootstrap</code> against the same machine, and I saw the <code>first-boot.json</code> start doing it&rsquo;s thing.</p>

<p>About 30 seconds late I saw this error:</p>

<p>```</p>

<h2>Server Response:</h2>

<p>Since Server API v1, all keys must be updated via the keys endpoint.
```</p>

<p>Needless to say I got frustrated extremely quickly. I wasn&rsquo;t doing anything due to keys, and now I need to update? :sad_panda: I re-ran the <code>knife bootstrap</code> again, and it bombed out with that same error. Double :sad_panda:</p>

<p>I did some searching around, asked a few people around Chef, and ended up at <a href="https://www.chef.io/blog/2015/07/14/chef-server-12-1-1-released/">this blog post</a>.</p>

<p>I did what was suggested in the comments <code>knife client delete &lt;machine&gt;</code> and to be safe <code>knife node delete &lt;machine&gt;</code> and re-ran <code>knife bootstrap</code>. It continued on and bootstrapped the box. I haven&rsquo;t seen the error since.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B]]></title>
    <link href="http://jjasghar.github.io/blog/2015/07/20/ssl-connect-returned-equals-1-errno-equals-0-state-equals-sslv3-read-server-certificate-b/"/>
    <updated>2015-07-20T16:18:16-05:00</updated>
    <id>http://jjasghar.github.io/blog/2015/07/20/ssl-connect-returned-equals-1-errno-equals-0-state-equals-sslv3-read-server-certificate-b</id>
    <content type="html"><![CDATA[<h2>tl;dr:</h2>

<p>You&rsquo;re getting self signed cert errors using Berkshelf or <code>knife.rb</code>, add this to your <code>knife.rb</code> and run this command:</p>

<p><code>ruby
ssl_verify_mode :verify_none
</code></p>

<p><code>
echo '{"ssl":{"verify": false }}' &gt; ~/.berkshelf/config.json
</code></p>

<h2>Explanation</h2>

<p>If you have a self signed cert on your chef-server, there&rsquo;s a change you&rsquo;ve seen this before using berkshelf:</p>

<p><code>
E, [2015-07-20T16:15:33.369649 #34774] ERROR -- : Ridley::Errors::ClientError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed
E, [2015-07-20T16:15:33.369737 #34774] ERROR -- : /opt/chefdk/embedded/lib/ruby/gems/2.1.0/gems/celluloid-0.16.0/lib/celluloid/responses.rb:29:in `value'
</code></p>

<p>This is berkshelf telling you you&rsquo;re not running a signed cert, and it bombs out.</p>

<p>Looking at <a href="https://github.com/berkshelf/berkshelf/issues/1266">this</a> they give the answer, which is:</p>

<p><code>
chef exec berks upload --no-ssl-verify
</code></p>

<p>Now it&rsquo;s possible it&rsquo;s <code>knife</code> sending back something like that error. Checkout <a href="https://twitter.com/jtimberman">Joshua Timberman</a>&rsquo;s post <a href="http://jtimberman.housepub.org/blog/2014/12/11/chef-12-fix-untrusted-self-sign-certs/">here</a>
to help out with specific <code>knife</code> issues.</p>

<p>Update:</p>

<p>Thanks to <a href="https://twitter.com/ryancragun">Ryan Cragun</a> my co-worker and general badass, pointing out a way to get around this too.</p>

<p><code>
echo '{"ssl":{"verify": false }}' &gt; ~/.berkshelf/config.json
</code></p>

<p>Now you can drop that <code>--no-ssl-verify</code>.</p>

<p>Another Update:</p>

<p>So it seems you might see this with <code>knife cookbook upload</code> or any <code>knife</code> command for that matter:</p>

<p><code>
ubuntu@aoeu:~/chef-repo$ knife status
ERROR: SSL Validation failure connecting to host: 172.16.20.62 - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed
ERROR: Could not establish a secure connection to the server.
Use `knife ssl check` to troubleshoot your SSL configuration.
If your Chef Server uses a self-signed certificate, you can use
`knife ssl fetch` to make knife trust the server's certificates.
Original Exception: OpenSSL::SSL::SSLError: SSL_connect r
</code></p>

<p>And if you run <code>knife ssl check</code> you&rsquo;d see:</p>

<p>```
ubuntu@aoeu:~/chef-repo$ knife ssl check
Connecting to host 172.16.20.62:443
ERROR: The SSL certificate of 172.16.20.62 could not be verified
Certificate issuer data: /C=US/ST=WA/L=Seattle/O=YouCorp/OU=Operations/CN=chefie.novalocal/emailAddress=<a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#111;&#58;&#x79;&#111;&#x75;&#64;&#101;&#x78;&#x61;&#109;&#112;&#108;&#101;&#x2e;&#x63;&#x6f;&#109;">&#x79;&#x6f;&#117;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#109;</a>
Configuration Info:
OpenSSL Configuration:
* Version: OpenSSL 1.0.1m 19 Mar 2015
* Certificate file: /opt/chef/embedded/ssl/cert.pem
* Certificate directory: /opt/chef/embedded/ssl/certs
Chef SSL Configuration:
* ssl_ca_path: nil
* ssl_ca_file: nil
* trusted_certs_dir: &ldquo;/home/ubuntu/chef-repo/.chef/trusted_certs&rdquo;
TO FIX THIS ERROR:
If the server you are connecting to uses a self-signed certificate, you must
configure chef to trust that server&rsquo;s certificate.</p>

<p>By default, the certificate is stored in the following location on the host
where your chef-server runs:</p>

<p>  /var/opt/opscode/nginx/ca/SERVER_HOSTNAME.crt</p>

<p>Copy that file to your trusted_certs_dir (currently: /home/ubuntu/chef-repo/.chef/trusted_certs)
using SSH/SCP or some other secure method, then re-run this command to confirm
that the server&rsquo;s certificate is now trusted.
```</p>

<p>So you do what the command says:</p>

<p><code>``
ubuntu@aoeu:~/chef-repo$ knife ssl fetch
WARNING: Certificates from 172.16.20.62 will be fetched and placed in your trusted_cert
directory (/home/ubuntu/chef-repo/.chef/trusted_certs).
Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.
Adding certificate for chefie.novalocal in /home/ubuntu/chef-repo/.chef/trusted_certs/chefie_novalocal.crt
ubuntu@aoeu:~/chef-repo$ knife status
ERROR: SSL Validation failure connecting to host: 172.16.20.62 - hostname "172.16.20.62" does not match the server certificate
ERROR: Could not establish a secure connection to the server.
Use</code>knife ssl check<code>to troubleshoot your SSL configuration.
If your Chef Server uses a self-signed certificate, you can use
</code>knife ssl fetch` to make knife trust the server&rsquo;s certificates.</p>

<p>Original Exception: OpenSSL::SSL::SSLError: hostname &ldquo;172.16.20.62&rdquo; does not match the server certificate
```</p>

<p>That look fimilar, and it feels like you&rsquo;re in a loop&hellip;.</p>

<p>Turns out you can bypass this check completley by adding this to your <code>knife.rb</code>.</p>

<p><code>ruby
ssl_verify_mode :verify_none
</code></p>

<p>Then you&rsquo;ll be right as rain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Omnibus so you dont get hit by the bus]]></title>
    <link href="http://jjasghar.github.io/blog/2014/08/19/omnibus-so-you-dont-get-hit-by-the-bus/"/>
    <updated>2014-08-19T13:34:45-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/08/19/omnibus-so-you-dont-get-hit-by-the-bus</id>
    <content type="html"><![CDATA[<p>I recently took a new job at <a href="http://getchef.com">Chef</a> Inc. Needless to say I&rsquo;m challenged and excited. I took a position as the
<a href="http://openstack.org">openstack</a> guy, which, again needless to say is a mountain of work. Part of my first responsibilities was to
start building an integration framework for the <a href="https://github.com/stackforge/">stackforge</a> cookbooks. Part of this was to automate
the building and destroying of compute nodes with different hardware configurations, so we needed a ipxe/tftp setup to network
boot machines. We decided on a project from CSC called <a href="https://github.com/csc/Hanlon">hanlon</a> which does a great deal of this work.</p>

<p>You&rsquo;re probably asking by now, so where&rsquo;s omnibus come into play with this? Well hanlon moves extremely fast and we needed a way to
package it up. There are specific dependencies and other specific things that having a package with &ldquo;blessed&rdquo; versions of the other
underlying apps would help support. If I recall correctly, <a href="http://sensuapp.org">sensu</a> came to this same decision because even as small
as patch numbers for ruby can cause havoc attempting to support someone.</p>

<p>So on with the show/tutorial:</p>

<h2>Omnibus</h2>

<p>The first thing you need to know is that <a href="https://github.com/opscode/omnibus">Omnibus</a> is actually in two pieces. First the framework,
at this repo: <a href="https://github.com/opscode/omnibus">omnibus</a> and the <a href="https://github.com/opscode/omnibus-software">omnibus-software</a>
which is the the building blocks for whatever you&rsquo;re trying to package.</p>

<p>The first thing that got me learning omnibus was the two files that sat inside of <code>project/</code> and <code>software/</code>. You&rsquo;ll notice that they
probably are both named your package and probably wonder why it&rsquo;s named the same thing. The best description is this; <code>project/blah.rb</code> is the
overarching definition of the package where as <code>software/blah.rb</code> is the build instructions. You shouldn&rsquo;t repeat the data is both places,
because it can cause issues supporting the pkg in the long run. Keep that in mind.
You might notice a <code>dependency</code> line <code>project/blah.rb</code>, I suggest commenting it out and putting all the dependencies in <code>software/blah.rb</code>
is so it&rsquo;s all in one place.</p>

<p>So let&rsquo;s take a step back. How do you create a new project? Here&rsquo;s a snippet to do it:</p>

<p><code>bash
$ gem install omnibus
$ omnibus new $MY_PROJECT_NAME # this will create a directory with omnibus-$MY_PROJECT_NAME
$ cd omnibus-$MY_PROJECT_NAME
$ bundle install
</code>
Something pretty straight forward. I want to stress though the portion of <code>$MY_PROJECT_NAME</code>, that caught me a couple times. Yes, a couple times.</p>

<p>So lets say you are on a Ubuntu box and you&rsquo;re trying to build the pkg for Ubuntu. You can short circuit this by just doing the following,
you won&rsquo;t see too much go by, but it&rsquo;ll tell you when it&rsquo;s done.</p>

<p><code>bash
$ cd omnibus-$MY_PROJECT_NAME
$ bundle exec omnibus build $MY_PROJECT_NAME
</code></p>

<p>Now if you want to see more things go by,</p>

<p><code>bash
$ cd $MY_PROJECT_NAME
$ bundle install
$ bundle exec omnibus build $MY_PROJECT_NAME --log-level=debug
</code></p>

<p>I personally like it, I like to see my computer work ;).</p>

<p>Now lets say you&rsquo;re still on that Ubuntu box but your coworker is using Centos, this is where <a href="http://kitchen.ci">test-kitchen</a> can take part making your
life so much easier.
You should do something like the following:</p>

<p><code>bash
$ bundle exec kitchen list
$ bundle exec kitchen converge &lt;os you want to converge to build the pkg&gt;
</code></p>

<p>This will set up the box via test-kitchen, you&rsquo;ll want to <code>kitchen login</code> the box but then you can do the above commands to build the pkg.</p>

<p>Something I noticed as I was attempting to leverage test-kitchen as my build box, (I&rsquo;m on a Mac trying to make Ubuntu pkgs) the following made my life
much easier.</p>

<p>I added the following to my <code>~/.ssh/config</code>.
```bash
host localhost</p>

<pre><code> User vagrant
 IdentityFile ~/.ssh/vagrant
</code></pre>

<p><code>``
Where the</code>~/.ssh/vagrant` is from <a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant">here</a></p>

<p>Then you can do something like, then ship it off to some place else. NOTE: check the port number ;)
<code>bash
$ mkdir ~/tmp &amp;&amp; cd ~/tmp
$ scp -P 2201 vagrant@localhost://home/vagrant/$MY_PACKAGE_NAME/pkg/* ./
</code></p>

<p>And say you spin up another vagrant box to test. NOTE: check that port number ;)
<code>bash
$ scp -P 2202 $MY_PACKAGE_NAME_0.1.0+20140819210922-1_amd64.deb vagrant@localhost://home/vagrant/
</code></p>

<p>I ran into an error during my adventures with Omnibus, and figured I should capture it here:</p>

<p>If you see an error like the following:
```ruby</p>

<pre><code>          [NullFetcher: libgcc] I | Fetching `libgcc' (nothing to fetch)
          [NetFetcher: cacerts] I | Downloading from `http://curl.haxx.se/ca/cacert.pem'
          [NetFetcher: cacerts] I | Verifying checksum
</code></pre>

<p>Verification for cacerts failed due to a checksum mismatch:</p>

<pre><code>expected: fd48275847fa10a8007008379ee902f1
actual:   c9f4f7f4d6a5ef6633e893577a09865e
</code></pre>

<p>This added security check is used to prevent MITM attacks when downloading the
remote file. If you have updated the version or URL for the download, you will
also need to update the checksum value. You can find the checksum value on the
software publisher&rsquo;s website.
<code>``
A quick fix would be to blow away your</code>Gemfile.lock<code>and run another</code>bundle install`.</p>

<p>So here&rsquo;s some notes on Omnibus, I&rsquo;ll probably add more as time progresses, but this is at least a start!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Windows Servers with Chef]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef/"/>
    <updated>2014-06-11T16:42:36-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef</id>
    <content type="html"><![CDATA[<p>I was asked to do a review of <a href="http://www.packtpub.com/managing-windows-servers-with-chef/book">Managing Windows Servers with Chef</a>. I&rsquo;ve read
through the complete book, and these are my thoughts. I&rsquo;ll be copying the following out to a couple places, but these are my thoughts on this
book from <a href="http://www.packtpub.com">packtpub</a>.</p>

<h2>Overview</h2>

<p>First off this book is an amazing &ldquo;whistle stop tour&rdquo; of the chef ecosystem. Yes it focuses mainly on the windows world, but it hits some great
overarching chef terminology to a unseasoned reader. It does assume you might have a small amount chef knowledge, in certain spots, but if you have none it&rsquo;s ok. It
drops you into the chef world, walks you through some basic patterns and then starts the specific windows focus. It has a great hands on example
leveraging both via knife bootstrap and cloud providers for windows, and even shows how to leverage winrm if you have no exposure to it. This is a great book, I strongly suggest
getting your hands on it.</p>

<h2>View as a *nix admin with chef knowlege</h2>

<p>As a *nix admin by profession, this was a great overview, allowed me to leverage my chef knowledge already and started thinking of what I can do for my
company to leverage the repeatable windows chef infurstruture. It opened my eyes to some very basic but lacking windows support.  If you look at the following snippet:</p>

<p>```ruby
if platform_family? &lsquo;debian&rsquo;
  package &lsquo;apache2&rsquo;
elsif platform_family? &lsquo;windows&rsquo;
  windows_package node[&lsquo;apache&rsquo;][&lsquo;windows&rsquo;][&lsquo;service_name&rsquo;] do</p>

<pre><code>source node['apache']['windows']['msi_url']
installer_type :msi
# The last fourz options keep the service from failing
# before the httpd.conf file is created
options %W[
  /quiet
  INSTALLDIR="#{node['apache']['install_dir']}"
  ALLUSERS=1
  SERVERADMIN=#{node['apache']['serveradmin']}
  SERVERDOMAIN=#{node['fqdn']}
  SERVERNAME=#{node['fqdn']}
].join(' ')
</code></pre>

<p>  end
end
```</p>

<p>As you can see chef has a way to pull down <code>apache2</code> and extract, install, and run it. Before reading this book, I knew of some of the resources that chef provided, but
having legitimate examples in front of me made the difference. <em>I can&rsquo;t think of any more praise other than I really do think this has some of the best overarching view of
chef for windows, walks you through a great example and then makes you want to dig into the LWRPs that it references.</em></p>

<p><a href="https://twitter.com/soysamurai">John Ewart</a> without realizing has created a 100 page book that you can give to a Director or above and they&rsquo;ll get why you want to use chef and
in this case chef for windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to the chef error that has haunted me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me/"/>
    <updated>2014-03-19T16:45:03-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me</id>
    <content type="html"><![CDATA[<p>So it seems that with release of chef-client <code>11.10</code> the 403 error have&hellip;morphed. Now they look  something like:</p>

<p>```</p>

<h2>Chef::Exceptions::ContentLengthMismatch</h2>

<p>Response body length 164 does not match HTTP Content-Length header 206.
```</p>

<p>I moved chef servers and didn&rsquo;t change my <code>s3_url_ttl</code> and ran into this issue. So the annoying 403&rsquo;s are now something about <code>HTTP Content-Length</code>.</p>

<p>If you&rsquo;ve forgotten the fix is:
```bash
[~] % sudo vim /etc/chef-server/chef-server.rb</p>

<h1>add this line: erchef[‘s3_url_ttl’] = 900 where 900 is something larger&hellip;maybe 1800?</h1>

<p>[~] % sudo chef-server-ctl reconfigure
```</p>
]]></content>
  </entry>
  
</feed>
