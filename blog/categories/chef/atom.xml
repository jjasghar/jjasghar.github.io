<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2014-09-25T16:37:05-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Omnibus so you dont get hit by the bus]]></title>
    <link href="http://jjasghar.github.io/blog/2014/08/19/omnibus-so-you-dont-get-hit-by-the-bus/"/>
    <updated>2014-08-19T13:34:45-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/08/19/omnibus-so-you-dont-get-hit-by-the-bus</id>
    <content type="html"><![CDATA[<p>I recently took a new job at <a href="http://getchef.com">Chef</a> Inc. Needless to say I&rsquo;m challenged and excited. I took a position as the
<a href="http://openstack.org">openstack</a> guy, which, again needless to say is a mountain of work. Part of my first responsibilities was to
start building an integration framework for the <a href="https://github.com/stackforge/">stackforge</a> cookbooks. Part of this was to automate
the building and destroying of compute nodes with different hardware configurations, so we needed a ipxe/tftp setup to network
boot machines. We decided on a project from CSC called <a href="https://github.com/csc/Hanlon">hanlon</a> which does a great deal of this work.</p>

<p>You&rsquo;re probably asking by now, so where&rsquo;s omnibus come into play with this? Well hanlon moves extremely fast and we needed a way to
package it up. There are specific dependencies and other specific things that having a package with &ldquo;blessed&rdquo; versions of the other
underlying apps would help support. If I recall correctly, <a href="http://sensuapp.org">sensu</a> came to this same decision because even as small
as patch numbers for ruby can cause havoc attempting to support someone.</p>

<p>So on with the show/tutorial:</p>

<h2>Omnibus</h2>

<p>The first thing you need to know is that <a href="https://github.com/opscode/omnibus">Omnibus</a> is actually in two pieces. First the framework,
at this repo: <a href="https://github.com/opscode/omnibus">omnibus</a> and the <a href="https://github.com/opscode/omnibus-software">omnibus-software</a>
which is the the building blocks for whatever you&rsquo;re trying to package.</p>

<p>The first thing that got me learning omnibus was the two files that sat inside of <code>project/</code> and <code>software/</code>. You&rsquo;ll notice that they
probably are both named your package and probably wonder why it&rsquo;s named the same thing. The best description is this; <code>project/blah.rb</code> is the
overarching definition of the package where as <code>software/blah.rb</code> is the build instructions. You shouldn&rsquo;t repeat the data is both places,
because it can cause issues supporting the pkg in the long run. Keep that in mind.
You might notice a <code>dependency</code> line <code>project/blah.rb</code>, I suggest commenting it out and putting all the dependencies in <code>software/blah.rb</code>
is so it&rsquo;s all in one place.</p>

<p>So let&rsquo;s take a step back. How do you create a new project? Here&rsquo;s a snippet to do it:</p>

<p><code>bash
$ gem install omnibus
$ omnibus new $MY_PROJECT_NAME # this will create a directory with omnibus-$MY_PROJECT_NAME
$ cd omnibus-$MY_PROJECT_NAME
$ bundle install
</code>
Something pretty straight forward. I want to stress though the portion of <code>$MY_PROJECT_NAME</code>, that caught me a couple times. Yes, a couple times.</p>

<p>So lets say you are on a Ubuntu box and you&rsquo;re trying to build the pkg for Ubuntu. You can short circuit this by just doing the following,
you won&rsquo;t see too much go by, but it&rsquo;ll tell you when it&rsquo;s done.</p>

<p><code>bash
$ cd omnibus-$MY_PROJECT_NAME
$ bundle exec omnibus build $MY_PROJECT_NAME
</code></p>

<p>Now if you want to see more things go by,</p>

<p><code>bash
$ cd $MY_PROJECT_NAME
$ bundle install
$ bundle exec omnibus build $MY_PROJECT_NAME --log-level=debug
</code></p>

<p>I personally like it, I like to see my computer work ;).</p>

<p>Now lets say you&rsquo;re still on that Ubuntu box but your coworker is using Centos, this is where <a href="http://kitchen.ci">test-kitchen</a> can take part making your
life so much easier.
You should do something like the following:</p>

<p><code>bash
$ bundle exec kitchen list
$ bundle exec kitchen converge &lt;os you want to converge to build the pkg&gt;
</code></p>

<p>This will set up the box via test-kitchen, you&rsquo;ll want to <code>kitchen login</code> the box but then you can do the above commands to build the pkg.</p>

<p>Something I noticed as I was attempting to leverage test-kitchen as my build box, (I&rsquo;m on a Mac trying to make Ubuntu pkgs) the following made my life
much easier.</p>

<p>I added the following to my <code>~/.ssh/config</code>.
```bash
host localhost</p>

<pre><code> User vagrant
 IdentityFile ~/.ssh/vagrant
</code></pre>

<p><code>``
Where the</code>~/.ssh/vagrant` is from <a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant">here</a></p>

<p>Then you can do something like, then ship it off to some place else. NOTE: check the port number ;)
<code>bash
$ mkdir ~/tmp &amp;&amp; cd ~/tmp
$ scp -P 2201 vagrant@localhost://home/vagrant/$MY_PACKAGE_NAME/pkg/* ./
</code></p>

<p>And say you spin up another vagrant box to test. NOTE: check that port number ;)
<code>bash
$ scp -P 2202 $MY_PACKAGE_NAME_0.1.0+20140819210922-1_amd64.deb vagrant@localhost://home/vagrant/
</code></p>

<p>I ran into an error during my adventures with Omnibus, and figured I should capture it here:</p>

<p>If you see an error like the following:
```ruby</p>

<pre><code>          [NullFetcher: libgcc] I | Fetching `libgcc' (nothing to fetch)
          [NetFetcher: cacerts] I | Downloading from `http://curl.haxx.se/ca/cacert.pem'
          [NetFetcher: cacerts] I | Verifying checksum
</code></pre>

<p>Verification for cacerts failed due to a checksum mismatch:</p>

<pre><code>expected: fd48275847fa10a8007008379ee902f1
actual:   c9f4f7f4d6a5ef6633e893577a09865e
</code></pre>

<p>This added security check is used to prevent MITM attacks when downloading the
remote file. If you have updated the version or URL for the download, you will
also need to update the checksum value. You can find the checksum value on the
software publisher&rsquo;s website.
<code>``
A quick fix would be to blow away your</code>Gemfile.lock<code>and run another</code>bundle install`.</p>

<p>So here&rsquo;s some notes on Omnibus, I&rsquo;ll probably add more as time progresses, but this is at least a start!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Windows Servers with Chef]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef/"/>
    <updated>2014-06-11T16:42:36-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef</id>
    <content type="html"><![CDATA[<p>I was asked to do a review of <a href="http://www.packtpub.com/managing-windows-servers-with-chef/book">Managing Windows Servers with Chef</a>. I&rsquo;ve read
through the complete book, and these are my thoughts. I&rsquo;ll be copying the following out to a couple places, but these are my thoughts on this
book from <a href="http://www.packtpub.com">packtpub</a>.</p>

<h2>Overview</h2>

<p>First off this book is an amazing &ldquo;whistle stop tour&rdquo; of the chef ecosystem. Yes it focuses mainly on the windows world, but it hits some great
overarching chef terminology to a unseasoned reader. It does assume you might have a small amount chef knowledge, in certain spots, but if you have none it&rsquo;s ok. It
drops you into the chef world, walks you through some basic patterns and then starts the specific windows focus. It has a great hands on example
leveraging both via knife bootstrap and cloud providers for windows, and even shows how to leverage winrm if you have no exposure to it. This is a great book, I strongly suggest
getting your hands on it.</p>

<h2>View as a *nix admin with chef knowlege</h2>

<p>As a *nix admin by profession, this was a great overview, allowed me to leverage my chef knowledge already and started thinking of what I can do for my
company to leverage the repeatable windows chef infurstruture. It opened my eyes to some very basic but lacking windows support.  If you look at the following snippet:</p>

<p>```ruby
if platform_family? &lsquo;debian&rsquo;
  package &lsquo;apache2&rsquo;
elsif platform_family? &lsquo;windows&rsquo;
  windows_package node[&lsquo;apache&rsquo;][&lsquo;windows&rsquo;][&lsquo;service_name&rsquo;] do</p>

<pre><code>source node['apache']['windows']['msi_url']
installer_type :msi
# The last fourz options keep the service from failing
# before the httpd.conf file is created
options %W[
  /quiet
  INSTALLDIR="#{node['apache']['install_dir']}"
  ALLUSERS=1
  SERVERADMIN=#{node['apache']['serveradmin']}
  SERVERDOMAIN=#{node['fqdn']}
  SERVERNAME=#{node['fqdn']}
].join(' ')
</code></pre>

<p>  end
end
```</p>

<p>As you can see chef has a way to pull down <code>apache2</code> and extract, install, and run it. Before reading this book, I knew of some of the resources that chef provided, but
having legitimate examples in front of me made the difference. <em>I can&rsquo;t think of any more praise other than I really do think this has some of the best overarching view of
chef for windows, walks you through a great example and then makes you want to dig into the LWRPs that it references.</em></p>

<p><a href="https://twitter.com/soysamurai">John Ewart</a> without realizing has created a 100 page book that you can give to a Director or above and they&rsquo;ll get why you want to use chef and
in this case chef for windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to the chef error that has haunted me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me/"/>
    <updated>2014-03-19T16:45:03-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me</id>
    <content type="html"><![CDATA[<p>So it seems that with release of chef-client <code>11.10</code> the 403 error have&hellip;morphed. Now they look  something like:</p>

<p>```</p>

<h2>Chef::Exceptions::ContentLengthMismatch</h2>

<p>Response body length 164 does not match HTTP Content-Length header 206.
```</p>

<p>I moved chef servers and didn&rsquo;t change my <code>s3_url_ttl</code> and ran into this issue. So the annoying 403&rsquo;s are now something about <code>HTTP Content-Length</code>.</p>

<p>If you&rsquo;ve forgotten the fix is:
```bash
[~] % sudo vim /etc/chef-server/chef-server.rb</p>

<h1>add this line: erchef[‘s3_url_ttl’] = 900 where 900 is something larger&hellip;maybe 1800?</h1>

<p>[~] % sudo chef-server-ctl reconfigure
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help! I lost my vaildation.pem]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/18/help-i-lost-my-vaildation-dot-pem/"/>
    <updated>2014-03-18T16:39:04-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/18/help-i-lost-my-vaildation-dot-pem</id>
    <content type="html"><![CDATA[<p>So I recently moved chef servers. I had a handful of hiccups on the way. The main one was my <code>validation.pem</code> and my <code>chef-webui.pem</code>&hellip;went missing. I had to regenerate my vaildation.pem without my chef-webui. These commands are on open source
chef 11 server.</p>

<p>(OK, fine I broke them, but this post is how to recreate either with <code>knife</code> on your workstation incase <strong>cough</strong>like me<strong>cough</strong> you have lost your chef-webui.)</p>

<p>It turns out there is a great simple command to re-create your validation.pem.</p>

<p>Note: This can also work as <code>validator.pem</code> also, but my code checks for <code>validation.pem</code></p>

<p>```bash
[~] % knife client reregister chef-validator</p>

<h1>or if you want to name it and save it&hellip;.</h1>

<p>[~] % knife client reregister chef-validator -f validaton.pem
```</p>

<p>The first one will spit out the new <code>.pem</code> you&rsquo;ll need to copy it to a file otherwise you&rsquo;ll just have to do run the command again. This/these commands are the equivalent of the <code>https://&lt;chefserver&gt;/clients/chef-validator/edit</code> and clicking that
&ldquo;Regenerate Private Key (Existing one will no longer work!).&rdquo;</p>

<p>Pretty straight forward eh?</p>

<p>On the other hand, if you&rsquo;ve broken you chef-webui, and you see something like&hellip;.</p>

<p><code>
2014-03-18_21:31:54.98838 Chef::Exceptions::PrivateKeyMissing: I cannot read /etc/chef-server/chef-webui.pem, which you told me to use to sign requests!
2014-03-18_21:31:54.98840 {:request_params=&gt;
2014-03-18_21:31:54.98840   {"utf8"=&gt;"✓",
2014-03-18_21:31:54.98841    "authenticity_token"=&gt;"uSheCVhYuGJPBAyDBHb4AIyEfkB2EqXwLD6Uolk//ig=",
2014-03-18_21:31:54.98841    "name"=&gt;"admin",
2014-03-18_21:31:54.98841    "commit"=&gt;"login",
2014-03-18_21:31:54.98842    "password"=&gt;"p@ssw0rd1",
2014-03-18_21:31:54.98842    "action"=&gt;"login_exec",
2014-03-18_21:31:54.98842    "controller"=&gt;"users"}}
</code></p>

<p>In your <code>/var/log/chef-server/chef-server-webui/current</code> then the fix is pretty straight forward:</p>

<p><code>bash
[~] % knife client reregister chef-webui
[~] % #scp it up to your chef box
chef# chown root.root /etc/chef-server/chef-webui.pem
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef-book lighting talk]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/28/chef-book-lighting-talk/"/>
    <updated>2014-02-28T10:52:08-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/28/chef-book-lighting-talk</id>
    <content type="html"><![CDATA[<p>On February 25th 2014 I did a lighting talk on my <a href="https://github.com/jjasghar/chef-book">chef-book</a> at <a href="http://austinonrails.org/">Austin on Rails</a>.  It was about
five minutes long, and got a video of it <a href="https://www.youtube.com/watch?v=LW9njlylhiQ">here</a>. It&rsquo;s pretty straight forward, and I hope you enjoy it.</p>

<p>PS, I apologize for the quality.</p>
]]></content>
  </entry>
  
</feed>
