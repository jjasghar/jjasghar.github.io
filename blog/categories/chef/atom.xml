<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2013-12-23T17:00:47-06:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[running knife-openstack on a private rackspace instance]]></title>
    <link href="http://jjasghar.github.io/blog/2013/12/23/running-knife-openstack-on-a-private-rackspace-instance/"/>
    <updated>2013-12-23T10:36:00-06:00</updated>
    <id>http://jjasghar.github.io/blog/2013/12/23/running-knife-openstack-on-a-private-rackspace-instance</id>
    <content type="html"><![CDATA[<p>So congrats you got your new &ldquo;<a href="http://www.rackspace.com/cloud/private/">Private Cloud</a>&rdquo; from Rackspace. You are probably ecstatic to start building your new machines.
I know I was; but alas with all new toys sometimes you hit a couple stags. Here are a couple things I ran into on my first few days.</p>

<h3>First issue</h3>

<p>So I&rsquo;m a chef shop, as you might now by now (assuming you&rsquo;ve read any of my other posts). I&rsquo;ve used <a href="https://github.com/opscode/knife-rackspace">knife-rackspace</a> tons of times; and hell I even have a <a href="https://github.com/opscode/knife-rackspace/commits?author=jjasghar">commit bit</a>. So logically I thought I could leverage this same gem with different backend api points. Nope, I was hard core wrong.
You end up having to install <a href="https://github.com/opscode/knife-openstack">knife-openstack</a>. That in itself isn&rsquo;t bad at all&hellip;
<code>bash
[~] % gem install knife-openstack
</code>
Now you need to update your <code>knife.rb</code>
<code>bash
[~] % vim ~/.chef/knife.rb
</code>
In your handoff ticket, you probably got something that looks like this:
<code>bash
export OS_USERNAME=Im_awesome_admin
export OS_PASSWORD=$omeCr@zyA$$passwD
export OS_TENANT_NAME=MyCompanyName
export OS_AUTH_URL=http://10.219.0.254:5000/v2.0/
export OS_AUTH_STRATEGY=keystone:
</code>
Go ahead and copy them out to what they need to be, something like&hellip;
```ruby
knife[:openstack_username] = &ldquo;Your OpenStack Dashboard username&rdquo;
knife[:openstack_password] = &ldquo;Your OpenStack Dashboard password&rdquo;</p>

<h3>Note: If you are not proxying HTTPS to the OpenStack auth port, the scheme should be HTTP</h3>

<p>knife[:openstack_auth_url] = &ldquo;<a href="http://cloud.mycompany.com:5000/v2.0/tokens">http://cloud.mycompany.com:5000/v2.0/tokens</a>&rdquo;
knife[:openstack_tenant] = &ldquo;Your OpenStack tenant name&rdquo;
knife[:openstack_ssh_key_id] = &ldquo;my sshkey id&rdquo;
<code>
Great! So run that great command `knife openstack flavor list` to see if everything works....
</code>bash
[~] % knife openstack server list
ERROR: knife encountered an unexpected error
This may be a bug in the &lsquo;openstack server list&rsquo; knife command or plugin
Please collect the output of this command with the <code>-VV</code> option before filing a bug report.
Exception: NoMethodError: undefined method `[]&lsquo; for nil:NilClass
```
Crap..</p>

<p>Ok, lets try out with <code>-VV</code></p>

<p><code>``ruby
DEBUG: openstack_username Im_awsome_admin
DEBUG: openstack_auth_url http://10.219.0.254:5000/v2.0/
DEBUG: openstack_tenant MyCompanyName
DEBUG: openstack_insecure
/Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/knife-openstack-0.8.1/lib/chef/knife/openstack_flavor_list.rb:51:in</code>rescue in run': undefined method `[]&lsquo; for nil:NilClass (NoMethodError)</p>

<pre><code>from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/knife-openstack-0.8.1/lib/chef/knife/openstack_flavor_list.rb:41:in `run'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/lib/chef/knife.rb:485:in `run_with_pretty_exceptions'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/lib/chef/knife.rb:174:in `run'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/lib/chef/application/knife.rb:133:in `run'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/bin/knife:25:in `&lt;top (required)&gt;'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/knife:23:in `load'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/knife:23:in `&lt;main&gt;'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/ruby_executable_hooks:15:in `eval'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/ruby_executable_hooks:15:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>Well that&rsquo;s not a lot of help eh? Turns out, if you look at the ticket that Rackspace gives you and what the <code>[:openstack_auth_url]</code> requires you&rsquo;ll see that there&rsquo;s a <code>/tokens</code> at the end. Do'h!</p>

<h3>Second issue</h3>

<p>Ok, so you got the ability to talk to your backend? Yay! But alas, you run your create&hellip;
```bash
[~] % knife openstack server create -S jj-mba-key -I 349168d3-5381-4324-8636-398d012f852b -f 1 -N testbox
Instance Name: testbox
Instance ID: 5e0ec79c-e06a-4fdb-9887-2b30ae1e5f80</p>

<p>Waiting for server&hellip;&hellip;&hellip;
Flavor: 1
Image: 349168d3-5381-4324-8636-398d012f852b
SSH Keypair: jj-mba-key
ERROR: No IP address available for bootstrapping.
```
What the hell does that mean? Well I&rsquo;m not going to explain it all but it seems that by default Rackspace names the &ldquo;public&rdquo; and &ldquo;private&rdquo; networks as &ldquo;Fixed&rdquo; and &ldquo;Floating.&rdquo;
This is triggered a fog issue, where it&rsquo;s looking at the label for a network either &ldquo;public&rdquo; or &ldquo;private&rdquo; and blows up. There is a ticket in for this <a href="https://tickets.opscode.com/browse/KNIFE-231">here</a> but it looks like it&rsquo;s stalled from late summer, early fall. Lammmeeee.</p>

<p>So you are probably saying &ldquo;Why don&rsquo;t you just rename them?&rdquo; Good for you, great idea&hellip;but no, Openstack doesn&rsquo;t support that. So at this time, it looks like you&rsquo;ll have to delete them and rebuild them with the &ldquo;public&rdquo; and &ldquo;private&rdquo; names. Hopefully you&rsquo;ve noticed this at just the begining of building out your machines, otherwise you&rsquo;ll have to nuke and pave everything you&rsquo;ve done to get the new networks in.</p>

<p>Ah!, almost forgot. Before you go I should mention a quick note, notice the lowercase p in both public and private. Yes, it&rsquo;s THAT picky&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People keep asking me how to start with chef]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/18/people-keep-asking-me-how-to-start-with-chef/"/>
    <updated>2013-10-18T10:19:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/18/people-keep-asking-me-how-to-start-with-chef</id>
    <content type="html"><![CDATA[<p>So as the title says, people keep asking me &ldquo;How to start with chef?&rdquo; This an outline of what, if I could go back in time, I would do from the beginning. I completely acknowledge that chef can be extremely confusing to start with. If you really want to learn it you&rsquo;ll have to stick with it, and do it. Good god, nothing is better than running it on a vagrant box and seeing what you expect happen happen.</p>

<h2>chef-solo is your best friend (step 1)</h2>

<p>A lot of people can start here, and end here believe it or not.  chef-solo is unbelievably powerful and can full-fill 90% of all requirements for basic usage. I spent some time looking around for a good tutorial (doing all of them that I could find), and <a href="http://www.opinionatedprogrammer.com/2011/06/chef-solo-tutorial-managing-a-single-server-with-chef/">this</a> on was the best &ldquo;I have no idea what the fuck I&rsquo;m doing.&rdquo; situation.  Modern chef installs are a tad bit different than this guy, so the &ldquo;install.sh&rdquo; changes I suggest are this:
```bash</p>

<h1>!/bin/bash</h1>

<h1>This run as root on the machine</h1>

<p>chef_binary=/opt/chef/embedded/lib/ruby/gems/1.9.1/gems/chef-11.6.0/bin/chef-solo</p>

<h1>are we not bootstrapped?</h1>

<p>if ! test -f &ldquo;$chef_binary&rdquo;; then
  export DEBIAN_FRONTEND=noniteractive
  apt-get update &amp;&amp;
  apt-get dist-upgrade -y &amp;&amp;
  apt-get install ruby1.9.1 ruby1.9.1-dev make curl -y &amp;&amp;
  curl -L <a href="https://www.opscode.com/chef/install.sh">https://www.opscode.com/chef/install.sh</a> | sudo bash
fi &amp;&amp;</p>

<p>chef-solo -c solo.rb -j solo.json
<code>``
As you can see I use the omnibus installer, not the gem, and choose the ruby version you want ;), and yes if you use those lame-ass rpm-based distros,</code>apt-get` won&rsquo;t work for you.</p>

<h2>There&rsquo;s something clever here (step 2)</h2>

<p>So awesome, you walked through the suggested tutorial, you can now run your <code>install.sh</code> and get your changes in. Grats! If you think about it, hit up the <a href="http://docs.opscode.com">Opscode Docs</a> and you&rsquo;ll discover that there&rsquo;s a resource to provision every which way. As I said at the beginning this might be all you need, if it is then use it; no real need to go any farther.</p>

<p>Ah, you&rsquo;re still here. So you DO want to farther, awesome. In step two I suggested going to the docs, that&rsquo;s cool, but sometimes you need more verbose help, that&rsquo;s my second point, it&rsquo;s time to start asking questions. Your first stop is <a href="http://webchat.freenode.net/?channels=chef">#chef</a>; it&rsquo;s manned basically 24x7, and <em>normally</em> extremely helpful. Don&rsquo;t be a douche, if you have to paste something use <a href="http://gist.github.com">gist</a> or something.  After that the main Opscode <a href="http://lists.opscode.com/sympa">mailing list</a> is great. It&rsquo;s slower, but you get much more in depth questions and conversations. Finally the third sub step is speak up, ask questions the only way to learn this is to be like &ldquo;I don&rsquo;t understand it, help!&rdquo;</p>

<h2>The only book worth a damn as of 2013/10/18 (step 3)</h2>

<p>Step three of the journey is probably the one that most people jump to initially, and this is usually where the confusion starts.  There&rsquo;s a handful of books out there on chef, this <a href="http://www.packtpub.com/chef-starter/book">one</a> is the only one worth any money.  With a strong understanding of how to provision a simple box, and where to ask questions this book will be extremely straight forward and build upon those building blocks. I&rsquo;m constantly looking for another chef bible, but most nuggets of how-to things are spread all over the internet in blog form.</p>

<h2>The fun starts here (step 4)</h2>

<p>Step four you need a chef server, you need to be able to provision multiple boxes, you understand/can find out what a role or environment is, and you need different <code>run_lists</code>.Good for you.  From here you should look at the open source <a href="http://www.opscode.com/chef/install/">chef server</a> and spin it up on another box. I should say you can use the <a href="https://getchef.opscode.com/signup">hosted chef</a>, you get up to 5 nodes with it for free, which is cool, but if you want to see everything work from the ground up, open source chef server is the way to go. (NOTE: if you are doing it in AWS/<code>$cloudprovider</code> you&rsquo;ll need at least a 4 gig box, and that&rsquo;s pushing it. You&rsquo;ve been warned.) Now spin up another box, a machine that can talk to the server that you want to provision. Start playing with <code>knife</code> add a knife plug-in for you <code>$cloudprovider</code> see if you can spin up another box using the <a href="http://docs.opscode.com/knife_bootstrap.html">knife bootstrap</a>.  Start using <a href="http://community.opscode.com/cookbooks/minitest-handler">minitest-handler-cookbook</a>, <a href="https://github.com/opscode/test-kitchen">test-kitchen</a>, and even <a href="https://github.com/acrmp/chefspec">chef-spec</a> if your feeling sassy. If you&rsquo;ve made it this far, you&rsquo;ve probably been exposed to a myriad of other tools, run with them. Trust me if someone built if for chef the chance of being helpful is extremely high.</p>

<h2>D'oh why did I do it this way? (step 5)</h2>

<p>Step five is pretty straight forward. GOTO 10. With everything you now have on your tool belt, you&rsquo;ll want to go back to your original chef-solo recipes and refactor everything. You&rsquo;ll want to add your minitests for integration testing to confirm everything is what you expect and much much more, that I&rsquo;m at a loss of listing out here. The only way to get good with chef is to do it, hack at it and wait for that converge to work. You&rsquo;ll probably love test-kitchen probably by this point.</p>

<p>This has been my cycle of working with chef, it&rsquo;s hard, confusing and honestly sometimes extremely annoying; though on the other hand the community is great, it&rsquo;s constantly changing, and adding great tools to make your life easier. When you finally get that recipe that builds that box exactly how you want it, theres nothing better to know it&rsquo;s always there and you never have to think about it again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix https://chef defaulting running chef client on open source chef server]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server/"/>
    <updated>2013-10-05T16:59:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server</id>
    <content type="html"><![CDATA[<p>I went to #chef on freenode and maek helped me out.  Here’s a run down of how to fix it. Alas the gists are gone; sorry. :(</p>

<p>If you play with open source chef you might run into this.</p>

<p><code>
18:42 j^2 so i’m having trouble with chef-client
18:42 j^2 why does it default to https://chef/blahblah?
18:43 j^2 example:
18:43 j^2 https://gist.github.com/jjasghar/5873e421a7f8365194e3
18:44 j^2 any advice?
18:44 j^2 i guess i could add it to /etc/hosts, but i’d like it to use the chef_server_url is that the point of it?
18:45 maek j^2:  I just got hit with this also
18:45 maek i think becuase chef 11 is now fronted with nginx
18:45 maek its doing a rewrite
18:45 maek for the name configured in nginx
18:45 maek in this case its hostname
18:45 maek but i assume that box cant resolve chef
18:46 j^2 lame
18:46 maek j^2:  I had to end up adding a hosts entry
18:46 maek while I wait for dns
18:46 maek I think you could do
18:46 j^2 yeah that seems like the only option but it’s stuff dumb :(
18:47 maek you could reconfigure chef
18:47 maek to use its ip
18:47 maek instead of its hostname
18:47 j^2 tried the ip in chef_server_url didnt work either; wait you mean nginx?
18:48 @ssd7 maek: Re your question above. I believe you should be able to edit bookshelf[‘vip’] in your config and the run a reconfigure
18:48 maek i dont see it htought
18:48 j^2 oh!
18:48 maek default[‘chef_server’][‘bookshelf’][‘vip’] = node[‘fqdn’]
18:48 j^2 nice looking
18:48 maek yeah
18:48 maek there it is
</code></p>

<p>Or you can do this also, I believe this is how I fixed it myself.:</p>

<p><code>
18:48 maek so you can do
18:49 maek in /etc/chef-server/chef-server.rb
18:49 maek bookshelf[‘vip’] = ‘192.168.1.1’
18:50 j^2 yeah i dont thave that file. :(
18:50 maek and run chef-server-ctl reconfigure
18:50 j^2 ah cool
18:50 maek its for overrides
18:50 maek just make it
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from one chef to multiple chefs]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/04/moving-from-one-chef-to-multiple-chefs/"/>
    <updated>2013-10-04T14:00:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/04/moving-from-one-chef-to-multiple-chefs</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a organic growth of a Ops team using chef goes through.  You start out with a <code>chef_repo</code> then you post it to github/some DVCS.  From there you tell people to clone it down and put PRs against it. From there you attempt to be a gate keeper, looking at the commits in the log, realizing that there is no match ups. From there you say to yourself &ldquo;Hey, ok, these guys are pretty smart, as long as I spot check, they should be able to merge things in and I can trust them right?&rdquo; NO you are lying to yourself you just don&rsquo;t realize it yet.</p>

<p>Wait for that one day that you think you have the newest cookbook and you bump the version, add your changes and you upload, and push&hellip;and nothing happens. Oh I&rsquo;m 2x behind where I thought great, bump and push. Oh&hellip;it seems there was a critical fix in that one that I didnt get for that exact cookbook I uploaded&hellip;crap. (And other situations like this can pop up.)</p>

<p>So, I pinged <a href="https://twitter.com/nathenharvey">Nathen Harvey</a> at Opscode asking for some guidance, he suggested <a href="https://github.com/jonlives/knife-spork">knife-spork</a>.  So far with my initial tests it looks like it is the correct answer,  so I&rsquo;m also writing this as a HOWTO for my company so this is just a run down of how to use it. (A cheatsheet to the README.md if you will.)</p>

<h2>Installation</h2>

<p>Obviously the first thing you need to do is install it. Luckily it&rsquo;s a gem so you can just do the following. If you read the docs there are a bunch of places that you <code>.yml</code> gets read from, but I chose this because I like having all my chef stuff in <code>.chef</code> so I don&rsquo;t have to think about pulling anything other than <code>.chef</code> if I want to move boxes.</p>

<p><code>bash
gem install knife-spork
touch ~/.chef/spork-config.yml
</code></p>

<p>After installing the gem and touching the file, you can run <code>knife spork info</code>, it should say everything is disabled.  If so, then you are read to create the config file.</p>

<p>The example <a href="https://raw.github.com/jonlives/knife-spork/master/README.md">config</a> is on the main site, but I copied the demo one here too.</p>

<p>```yaml
default_environments:
  &ndash; development
  &ndash; production
environment_groups:
  qa_group:</p>

<pre><code>- quality_assurance
- staging
</code></pre>

<p>  test_group:</p>

<pre><code>- user_testing
- acceptance_testing
</code></pre>

<p>version_change_threshold: 2
environment_path: &ldquo;/home/me/environments&rdquo;
plugins:
  campfire:</p>

<pre><code>account: myaccount
token: a1b2c3d4...
</code></pre>

<p>  hipchat:</p>

<pre><code>api_token: ABC123
rooms:
  - General
  - Web Operations
notify: true
color: yellow
</code></pre>

<p>  jabber:</p>

<pre><code>username: YOURUSER
password: YOURPASSWORD
nickname: Chef Bot
server_name: your.jabberserver.com
server_port: 5222
rooms:
  - engineering@your.conference.com/spork
  - systems@your.conference.com/spork
</code></pre>

<p>  git:</p>

<pre><code>enabled: true
</code></pre>

<p>  irccat:</p>

<pre><code>server: irccat.mydomain.com
port: 12345
gist: "/usr/bin/gist"
channel: ["chef-annoucements"]
</code></pre>

<p>  graphite:</p>

<pre><code>server: graphite.mydomain.com
port: 2003
</code></pre>

<p>  eventinator:</p>

<pre><code>url: http://eventinator.mydomain.com/events/oneshot
</code></pre>

<p>```</p>

<p>All in all this seems pretty self <a href="https://github.com/jonlives/knife-spork#default-environments">explanatory</a> but the most important things to change are <code>environment_path</code> and disabling the plugins (by removing them) here.  For my company I only used the git plugin and&hellip;well that was it. :)</p>

<p>By the way there are only a few plugins, <a href="https://github.com/jonlives/knife-spork/tree/master/plugins">here</a> is a link to the different .md files on each.</p>

<p>Ok, so you have everything set up, what do you do now?</p>

<h2>Usage</h2>

<p>The first step is to run <code>knife spork check COOKBOOK --all</code> where COOKBOOK is one of your commonly updated/tweaked cookbooks.  Spork checks against what you have locally compared to what&rsquo;s in the server, like this:</p>

<p><code>
knife spork check COOKBOOK --all
</code></p>

<p>Here&rsquo;s an example:
```bash
Checking versions for cookbook nagios&hellip;</p>

<p>Local Version:
  5.1.5</p>

<p>Remote Versions: (* indicates frozen)
  5.1.5
  5.1.4
  5.1.3
  5.1.2</p>

<p>ERROR: The version 5.1.5 exists on the server and is not frozen. Uploading will overwrite!
```</p>

<p>As you can see with the error, it&rsquo;s pretty self explaintory.</p>

<p>The second step is to bump the version:
<code>bash
knife spork bump nagios patch
Git: Pulling latest changes from /Users/jasghar/repo/chef_repo/environments
Pulling latest changes from git submodules (if any)
Git: Pulling latest changes from /Users/jasghar/repo/chef_repo/cookbooks/nagios
Pulling latest changes from git submodules (if any)
Successfully bumped nagios to v5.1.6!
</code></p>

<p>Now as you can see I have the git plugin working, and it without thinking about it, updates the metadata.rb so you don&rsquo;t have to. (I HATE that part of chef, I always forget.) Now you can go off make your changes.</p>

<p>From here you&rsquo;re happy, you&rsquo;ve commited your new <code>chef_repo</code> back to the DVCS that you use.  This is where the magic happens: <code>knife spork upload COOKBOOK</code>.  This thing is great, it (to quote the <code>README.md</code>) <em>This function works mostly the same as normal knife cookbook upload COOKBOOK except that this automatically freezes cookbooks when you upload them.</em> Which is the bread and butter of spork.  The freezing is crazy important, by freezing the upload you take &ldquo;ownership&rdquo; of that version of the cookbook.  Your changes are yours, and no-one can mess with them.  So in turn you don&rsquo;t step on your coworkers toes and he doesen&rsquo;t step on yours.</p>

<p>Ok, so this was the cheatsheet, we have implymented this at my company now, so hopefully this goes great. If not&hellip;well that&rsquo;s a different conversation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures with chef-solo]]></title>
    <link href="http://jjasghar.github.io/blog/2013/08/02/adventures-with-chef-solo/"/>
    <updated>2013-08-02T14:36:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/08/02/adventures-with-chef-solo</id>
    <content type="html"><![CDATA[<p>I started my chef career with inheriting a chef infrastructure with an opensource chef server.  I read all of the blog posts, and the tutorials, tried to wrap my head around what a cookbook, recipe, or data bag was.  I know now, this was the <em>wrong</em> way to learn chef.  chef with chef-client/server adds a level of complexity that just is unfounded.  I decided to spend a copy hours to master chef-solo, and damn I wish I had started there.</p>

<h2>My hands on learning project</h2>

<p>I had a requirement of setting up a unicorn nginx instance on a VPS.  I thought hell, there&rsquo;s gotta be a way to do this with chef. (I normally use passenger+apache, so I had to learn nginx and unicorn too, but that&rsquo;s a different post&hellip;well kinda) So I looked around for a nice <a href="http://www.opinionatedprogrammer.com/2011/06/chef-solo-tutorial-managing-a-single-server-with-chef/">tutorial</a> and came across that guy.  I started reading it, realized holy crap, this is awesome.  I stole the <code>solo.json</code> and the <code>solo.rb</code> and <code>install.sh</code> because I was lazy.<br/>
I changed the <code>install.sh</code> around a little bit:
```bash</p>

<h1>!/bin/bash</h1>

<h1>This run as root on the machine</h1>

<p>chef_binary=/opt/chef/embedded/lib/ruby/gems/1.9.1/gems/chef-11.6.0/bin/chef-solo</p>

<h1>are we not bootstrapped?</h1>

<p>if ! test -f &ldquo;$chef_binary&rdquo;; then
  export DEBIAN_FRONTEND=noniteractive
  apt-get update &amp;&amp;
  apt-get dist-upgrade -y &amp;&amp;
  apt-get install ruby1.9.1 ruby1.9.1-dev make curl -y &amp;&amp;
  curl -L <a href="https://www.opscode.com/chef/install.sh">https://www.opscode.com/chef/install.sh</a> | sudo bash
fi &amp;&amp;</p>

<p>chef-solo -c solo.rb -j solo.json
<code>``
As you can tell, its ubuntu focused, but basically if I want to provision a box after making a change to one of the cookbooks I just had to run</code>./install.sh`.  Interestingly, I had heard bad things about the 1.9.1 ruby binaries for ubuntu, but so far, it is a ton better than doing that compile from src. ;)</p>

<p>So, basically with those three files, running that curl in the script, and creating a <code>cookbooks/</code> directory, I had my framework to make this project happen.</p>

<p>Now I made a mistake here.  I started off with a simple &ldquo;generic&rdquo; cookbook, with a simple <code>default.rb</code> file that called a <code>packages.rb</code> file to add some pkgs I love and run on a daily basis.</p>

<p>```ruby
%w{build-essential git-core libgdbm-dev libreadline-dev libssl-dev libyaml-dev s3cmd tmux tk-dev vim wget zlib1g-dev zsh}.each do |pkg|
  package pkg do</p>

<pre><code>action [:install]
</code></pre>

<p>  end
end
```</p>

<p>Now to an passive onlooker there seems nothing wrong with this, and 3 weeks ago JJ would agree with you.  JJ now says, &ldquo;Stop that, start with the webserver and the deps for that instead of the convince of something easy like package management.&rdquo;  LEARN <a href="http://berkshelf.com/">berkshelf</a> and don&rsquo;t make excuses. (at this writing, 8/2/13, I still actually haven&rsquo;t learned it, the best analogy is this, dling cookbooks is like building from source, and berkshelf is like using apt-get) Anyway I digress.</p>

<p>Back to the original story.</p>

<p>I made the <code>cookbooks/</code> directory, and when to github to pull down the newest <a href="https://github.com/opscode-cookbooks/nginx">nginx</a> cookbook.  <code>git clone https://github.com/opscode-cookbooks/nginx.git</code> in the directory and then because  I hate submodules, I ran <code>rm -rf .git/</code>. I <code>cd ~/chef-solo</code> then ran <code>install.sh</code>. Crossed my fingers and no, didn&rsquo;t work. Turns out I needed a bunch of dependences (hence the berkself statement). I resolved them all, and then ran the beautiful <code>./install.sh</code>. BOOM, it worked.  I took a moment, realized what I had just done.  I created a git repo off this work, created a branch &ldquo;nginx&rdquo; and committed my changes. Now whenever I need to spin up an nginx box, all I have to do is clone my chef-solo repo and checkout nginx and run <code>install.sh</code>.</p>

<p>Dang, that&rsquo;s awesome. To get that to work with chef-server&hellip;is a ton of work.  You have to download each cookbook, upload each to the chef-server, change the role or add the recipe, then run chef-client.  This would be great if I had to do it over and over, but being I was just setting up a dev box, chef-server overhead just isn&rsquo;t worth it.</p>

<p>Now all in all, this has only been one adventure with chef-solo, but going through this academic exercise I realized the potential of this unbelievable powerful application.  From this project, and my &ldquo;generic&rdquo; cookbook, I&rsquo;ve ran with it, so now I have a boostrap cookbook with my packages, some of my dotfiles, and other tidbits.  It&rsquo;s nice, and I strongly suggest checking it out.</p>
]]></content>
  </entry>
  
</feed>
