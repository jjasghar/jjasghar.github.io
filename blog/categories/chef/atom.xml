<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2014-08-26T11:17:00-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Managing Windows Servers with Chef]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef/"/>
    <updated>2014-06-11T16:42:36-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef</id>
    <content type="html"><![CDATA[<p>I was asked to do a review of <a href="http://www.packtpub.com/managing-windows-servers-with-chef/book">Managing Windows Servers with Chef</a>. I&rsquo;ve read
through the complete book, and these are my thoughts. I&rsquo;ll be copying the following out to a couple places, but these are my thoughts on this
book from <a href="http://www.packtpub.com">packtpub</a>.</p>

<h2>Overview</h2>

<p>First off this book is an amazing &ldquo;whistle stop tour&rdquo; of the chef ecosystem. Yes it focuses mainly on the windows world, but it hits some great
overarching chef terminology to a unseasoned reader. It does assume you might have a small amount chef knowledge, in certain spots, but if you have none it&rsquo;s ok. It
drops you into the chef world, walks you through some basic patterns and then starts the specific windows focus. It has a great hands on example
leveraging both via knife bootstrap and cloud providers for windows, and even shows how to leverage winrm if you have no exposure to it. This is a great book, I strongly suggest
getting your hands on it.</p>

<h2>View as a *nix admin with chef knowlege</h2>

<p>As a *nix admin by profession, this was a great overview, allowed me to leverage my chef knowledge already and started thinking of what I can do for my
company to leverage the repeatable windows chef infurstruture. It opened my eyes to some very basic but lacking windows support.  If you look at the following snippet:</p>

<p>```ruby
if platform_family? &lsquo;debian&rsquo;
  package &lsquo;apache2&rsquo;
elsif platform_family? &lsquo;windows&rsquo;
  windows_package node[&lsquo;apache&rsquo;][&lsquo;windows&rsquo;][&lsquo;service_name&rsquo;] do</p>

<pre><code>source node['apache']['windows']['msi_url']
installer_type :msi
# The last fourz options keep the service from failing
# before the httpd.conf file is created
options %W[
  /quiet
  INSTALLDIR="#{node['apache']['install_dir']}"
  ALLUSERS=1
  SERVERADMIN=#{node['apache']['serveradmin']}
  SERVERDOMAIN=#{node['fqdn']}
  SERVERNAME=#{node['fqdn']}
].join(' ')
</code></pre>

<p>  end
end
```</p>

<p>As you can see chef has a way to pull down <code>apache2</code> and extract, install, and run it. Before reading this book, I knew of some of the resources that chef provided, but
having legitimate examples in front of me made the difference. <em>I can&rsquo;t think of any more praise other than I really do think this has some of the best overarching view of
chef for windows, walks you through a great example and then makes you want to dig into the LWRPs that it references.</em></p>

<p><a href="https://twitter.com/soysamurai">John Ewart</a> without realizing has created a 100 page book that you can give to a Director or above and they&rsquo;ll get why you want to use chef and
in this case chef for windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to the chef error that has haunted me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me/"/>
    <updated>2014-03-19T16:45:03-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me</id>
    <content type="html"><![CDATA[<p>So it seems that with release of chef-client <code>11.10</code> the 403 error have&hellip;morphed. Now they look  something like:</p>

<p>```</p>

<h2>Chef::Exceptions::ContentLengthMismatch</h2>

<p>Response body length 164 does not match HTTP Content-Length header 206.
```</p>

<p>I moved chef servers and didn&rsquo;t change my <code>s3_url_ttl</code> and ran into this issue. So the annoying 403&rsquo;s are now something about <code>HTTP Content-Length</code>.</p>

<p>If you&rsquo;ve forgotten the fix is:
```bash
[~] % sudo vim /etc/chef-server/chef-server.rb</p>

<h1>add this line: erchef[‘s3_url_ttl’] = 900 where 900 is something larger&hellip;maybe 1800?</h1>

<p>[~] % sudo chef-server-ctl reconfigure
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help! I lost my vaildation.pem]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/18/help-i-lost-my-vaildation-dot-pem/"/>
    <updated>2014-03-18T16:39:04-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/18/help-i-lost-my-vaildation-dot-pem</id>
    <content type="html"><![CDATA[<p>So I recently moved chef servers. I had a handful of hiccups on the way. The main one was my <code>validation.pem</code> and my <code>chef-webui.pem</code>&hellip;went missing. I had to regenerate my vaildation.pem without my chef-webui. These commands are on open source
chef 11 server.</p>

<p>(OK, fine I broke them, but this post is how to recreate either with <code>knife</code> on your workstation incase <strong>cough</strong>like me<strong>cough</strong> you have lost your chef-webui.)</p>

<p>It turns out there is a great simple command to re-create your validation.pem.</p>

<p>Note: This can also work as <code>validator.pem</code> also, but my code checks for <code>validation.pem</code></p>

<p>```bash
[~] % knife client reregister chef-validator</p>

<h1>or if you want to name it and save it&hellip;.</h1>

<p>[~] % knife client reregister chef-validator -f validaton.pem
```</p>

<p>The first one will spit out the new <code>.pem</code> you&rsquo;ll need to copy it to a file otherwise you&rsquo;ll just have to do run the command again. This/these commands are the equivalent of the <code>https://&lt;chefserver&gt;/clients/chef-validator/edit</code> and clicking that
&ldquo;Regenerate Private Key (Existing one will no longer work!).&rdquo;</p>

<p>Pretty straight forward eh?</p>

<p>On the other hand, if you&rsquo;ve broken you chef-webui, and you see something like&hellip;.</p>

<p><code>
2014-03-18_21:31:54.98838 Chef::Exceptions::PrivateKeyMissing: I cannot read /etc/chef-server/chef-webui.pem, which you told me to use to sign requests!
2014-03-18_21:31:54.98840 {:request_params=&gt;
2014-03-18_21:31:54.98840   {"utf8"=&gt;"✓",
2014-03-18_21:31:54.98841    "authenticity_token"=&gt;"uSheCVhYuGJPBAyDBHb4AIyEfkB2EqXwLD6Uolk//ig=",
2014-03-18_21:31:54.98841    "name"=&gt;"admin",
2014-03-18_21:31:54.98841    "commit"=&gt;"login",
2014-03-18_21:31:54.98842    "password"=&gt;"p@ssw0rd1",
2014-03-18_21:31:54.98842    "action"=&gt;"login_exec",
2014-03-18_21:31:54.98842    "controller"=&gt;"users"}}
</code></p>

<p>In your <code>/var/log/chef-server/chef-server-webui/current</code> then the fix is pretty straight forward:</p>

<p><code>bash
[~] % knife client reregister chef-webui
[~] % #scp it up to your chef box
chef# chown root.root /etc/chef-server/chef-webui.pem
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef-book lighting talk]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/28/chef-book-lighting-talk/"/>
    <updated>2014-02-28T10:52:08-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/28/chef-book-lighting-talk</id>
    <content type="html"><![CDATA[<p>On February 25th 2014 I did a lighting talk on my <a href="https://github.com/jjasghar/chef-book">chef-book</a> at <a href="http://austinonrails.org/">Austin on Rails</a>.  It was about
five minutes long, and got a video of it <a href="https://www.youtube.com/watch?v=LW9njlylhiQ">here</a>. It&rsquo;s pretty straight forward, and I hope you enjoy it.</p>

<p>PS, I apologize for the quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.kitchen.local.yml and when you want to use it]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/17/dot-kitchen-dot-local-dot-yml-and-when-you-want-to-use-it/"/>
    <updated>2014-02-17T15:32:20-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/17/dot-kitchen-dot-local-dot-yml-and-when-you-want-to-use-it</id>
    <content type="html"><![CDATA[<p>I recently bought the vagrant <a href="http://www.vagrantup.com/vmware">vmware fusion</a> plugin to start testing out <a href="https://gist.github.com/fnichol/8609348">test-kitchen for mac</a>. Good ol' <a href="https://twitter.com/fnichol">Fletcher</a>
made it ridiculously easy to do and I thank him for that.  Interestingly enough though in the process of figuring it out I ran into a problem.  I have a few other <code>.kitchen.yml</code> files in different
cookbooks, and I wanted to start leveraging what I just paid for.</p>

<p>So take this <code>.kitchen.yml</code> for instance:</p>

<h2>```</h2>

<p>driver:
  name: vagrant</p>

<p>provisioner:
  name: chef_solo</p>

<p>platforms:
  &ndash; name: ubuntu-12.04</p>

<p>suites:
  &ndash; name: default</p>

<pre><code>run_list:
  - recipe[hubot-solo::default]
attributes:
</code></pre>

<p>```</p>

<p>Yep, it runs off the default of virtualbox.  If you create a <code>.kitchen.local.yml</code> file in that directory, something like this:</p>

<h2>```</h2>

<p>driver:
  name: vagrant
  provider: vmware_fusion</p>

<p>provisioner:
  name: chef_solo</p>

<p>platforms:
  &ndash; name: ubuntu-12.04</p>

<p>suites:
  &ndash; name: default</p>

<pre><code>run_list:
  - recipe[hubot-solo::default]
attributes:
</code></pre>

<p>```</p>

<p>It&rsquo;ll run it with vmare as the hypervisor or provider, in kitchen lingo.</p>

<p>That&rsquo;s all fine and dandy, but what about an over arching config? I thought you could create something like <code>~/.kitchen.local.yml</code> that didn&rsquo;t seem to work.</p>

<p>I pinged <a href="https://webchat.freenode.net/?channels=%23kitchenci">#kitchenci</a> and <strong>teukka</strong> gave me
the answer: set/export <code>VAGRANT_DEFAULT_PROVIDER=vmware_fusion</code> env var (in your shell&rsquo;s rc file), and boom, it worked.</p>

<p>So, long story short: if you want to have a specific change that overrides the default <code>.kitchen.yml</code> make a <code>.kitchen.local.yml</code> in the directory,
but if you want to override every hypervisor use <code>export VAGRANT_DEFAULT_PROVIDER=vmware_fusion</code> in your bashrc/zshrc.</p>

<p>I hope this helps someone making the conversion from virtualbox to vmware.</p>
]]></content>
  </entry>
  
</feed>
