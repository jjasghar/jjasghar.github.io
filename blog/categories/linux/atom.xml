<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2013-12-24T15:52:16-06:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[running knife-openstack on a private rackspace instance]]></title>
    <link href="http://jjasghar.github.io/blog/2013/12/23/running-knife-openstack-on-a-private-rackspace-instance/"/>
    <updated>2013-12-23T10:36:00-06:00</updated>
    <id>http://jjasghar.github.io/blog/2013/12/23/running-knife-openstack-on-a-private-rackspace-instance</id>
    <content type="html"><![CDATA[<p>So congrats you got your new &ldquo;<a href="http://www.rackspace.com/cloud/private/">Private Cloud</a>&rdquo; from Rackspace. You are probably ecstatic to start building your new machines.
I know I was; but alas with all new toys sometimes you hit a couple stags. Here are a couple things I ran into on my first few days.</p>

<h3>First issue</h3>

<p>So I&rsquo;m a chef shop, as you might know by now (assuming you&rsquo;ve read any of my other posts). I&rsquo;ve used <a href="https://github.com/opscode/knife-rackspace">knife-rackspace</a> tons of times; and hell I even have a <a href="https://github.com/opscode/knife-rackspace/commits?author=jjasghar">commit bit</a>. So logically I thought I could leverage this same gem with different backend api points. Nope, I was hard core wrong.
You end up having to install <a href="https://github.com/opscode/knife-openstack">knife-openstack</a>. That in itself isn&rsquo;t bad at all&hellip;
<code>bash
[~] % gem install knife-openstack
</code>
Now you need to update your <code>knife.rb</code>
<code>bash
[~] % vim ~/.chef/knife.rb
</code>
In your handoff ticket, you probably got something that looks like this:
<code>bash
export OS_USERNAME=Im_awesome_admin
export OS_PASSWORD=$omeCr@zyA$$passwD
export OS_TENANT_NAME=MyCompanyName
export OS_AUTH_URL=http://10.219.0.254:5000/v2.0/
export OS_AUTH_STRATEGY=keystone:
</code>
Go ahead and copy them out to what they need to be, something like&hellip;
```ruby
knife[:openstack_username] = &ldquo;Your OpenStack Dashboard username&rdquo;
knife[:openstack_password] = &ldquo;Your OpenStack Dashboard password&rdquo;</p>

<h3>Note: If you are not proxying HTTPS to the OpenStack auth port, the scheme should be HTTP</h3>

<p>knife[:openstack_auth_url] = &ldquo;<a href="http://cloud.mycompany.com:5000/v2.0/tokens">http://cloud.mycompany.com:5000/v2.0/tokens</a>&rdquo;
knife[:openstack_tenant] = &ldquo;Your OpenStack tenant name&rdquo;
knife[:openstack_ssh_key_id] = &ldquo;my sshkey id&rdquo;
<code>
Great! So run that great command `knife openstack flavor list` to see if everything works....
</code>bash
[~] % knife openstack server list
ERROR: knife encountered an unexpected error
This may be a bug in the &lsquo;openstack server list&rsquo; knife command or plugin
Please collect the output of this command with the <code>-VV</code> option before filing a bug report.
Exception: NoMethodError: undefined method `[]&lsquo; for nil:NilClass
```
Crap..</p>

<p>Ok, lets try out with <code>-VV</code></p>

<p><code>``ruby
DEBUG: openstack_username Im_awsome_admin
DEBUG: openstack_auth_url http://10.219.0.254:5000/v2.0/
DEBUG: openstack_tenant MyCompanyName
DEBUG: openstack_insecure
/Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/knife-openstack-0.8.1/lib/chef/knife/openstack_flavor_list.rb:51:in</code>rescue in run': undefined method `[]&lsquo; for nil:NilClass (NoMethodError)</p>

<pre><code>from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/knife-openstack-0.8.1/lib/chef/knife/openstack_flavor_list.rb:41:in `run'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/lib/chef/knife.rb:485:in `run_with_pretty_exceptions'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/lib/chef/knife.rb:174:in `run'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/lib/chef/application/knife.rb:133:in `run'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/chef-11.8.0/bin/knife:25:in `&lt;top (required)&gt;'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/knife:23:in `load'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/knife:23:in `&lt;main&gt;'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/ruby_executable_hooks:15:in `eval'
from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/bin/ruby_executable_hooks:15:in `&lt;main&gt;'
</code></pre>

<p>```</p>

<p>Well that&rsquo;s not a lot of help eh? Turns out, if you look at the ticket that Rackspace gives you and what the <code>[:openstack_auth_url]</code> requires you&rsquo;ll see that there&rsquo;s a <code>/tokens</code> at the end. Do'h!</p>

<h3>Second issue</h3>

<p>Ok, so you got the ability to talk to your backend? Yay! But alas, you run your create&hellip;
```bash
[~] % knife openstack server create -S jj-mba-key -I 349168d3-5381-4324-8636-398d012f852b -f 1 -N testbox
Instance Name: testbox
Instance ID: 5e0ec79c-e06a-4fdb-9887-2b30ae1e5f80</p>

<p>Waiting for server&hellip;&hellip;&hellip;
Flavor: 1
Image: 349168d3-5381-4324-8636-398d012f852b
SSH Keypair: jj-mba-key
ERROR: No IP address available for bootstrapping.
```
What the hell does that mean? Well I&rsquo;m not going to explain it all but it seems that by default Rackspace names the &ldquo;public&rdquo; and &ldquo;private&rdquo; networks as &ldquo;Fixed&rdquo; and &ldquo;Floating.&rdquo;
This is triggered a fog issue, where it&rsquo;s looking at the label for a network either &ldquo;public&rdquo; or &ldquo;private&rdquo; and blows up. There is a ticket in for this <a href="https://tickets.opscode.com/browse/KNIFE-231">here</a> but it looks like it&rsquo;s stalled from late summer, early fall. Lammmeeee.</p>

<p>So you are probably saying &ldquo;Why don&rsquo;t you just rename them?&rdquo; Good for you, great idea&hellip;but no, Openstack doesn&rsquo;t support that. So at this time, it looks like you&rsquo;ll have to delete them and rebuild them with the &ldquo;public&rdquo; and &ldquo;private&rdquo; names. Hopefully you&rsquo;ve noticed this at just the begining of building out your machines, otherwise you&rsquo;ll have to nuke and pave everything you&rsquo;ve done to get the new networks in.</p>

<p>Ah!, almost forgot. Before you go I should mention a quick note, notice the lowercase p in both public and private. Yes, it&rsquo;s THAT picky&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot+Herkou+Campfire and how I spent much more time than I thought I should]]></title>
    <link href="http://jjasghar.github.io/blog/2013/11/27/hubot-plus-herkou-and-how-i-spent-much-more-time-than-i-thought-i-should/"/>
    <updated>2013-11-27T11:41:00-06:00</updated>
    <id>http://jjasghar.github.io/blog/2013/11/27/hubot-plus-herkou-and-how-i-spent-much-more-time-than-i-thought-i-should</id>
    <content type="html"><![CDATA[<p>So I recently watched <a href="http://www.youtube.com/watch?v=NST3u-GjjFw">ChatOps</a> and got sold on <a href="http://hubot.github.com/">Hubot</a>.  We had him at my company for a while, but
with a migration we lost him; so I took it upon myself to learn how to use him again.  All in all getting him running inside my company was pretty straight forward, hell even getting
node to work on my local box for local development (<a href="https://gist.github.com/isaacs/579814">this gist</a> sums it up nicely) wasn&rsquo;t hard at all.  I found myself wanting my own hubot for <a href="https://github.com/github/hubot-scripts/blob/master/src/scripts/meme_captain.coffee">memes</a> generation, or just to play around with.</p>

<p>So I decided hell, lets try out the <a href="https://github.com/github/hubot/blob/master/docs/deploying/heroku.md">heroku</a> install. It was pretty straight forward, I got my repo running, got it deployed; but I ran into an error:
<code>
ERROR Campfire request error: Error: getaddrinfo ENOTFOUND
</code>
This is what the doc says&hellip;.
<code>
% heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount
% heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken
</code>
I put my <code>HUBOT_CAMPEFIRE_ACCOUNT</code> name as my hubot&rsquo;s account name with the token which seems logical&hellip;wth man?
<code>
HUBOT_CAMPFIRE_ACCOUNT=hubotsemail@myaccountname.com
</code>
I did some searching, googling, (it seems a few people had this <a href="https://www.google.com/search?q=ERROR+Campfire+request+error%3A+Error%3A+getaddrinfo+ENOTFOUND&amp;oq=ERROR+Campfire+request+error%3A+Error%3A+getaddrinfo+ENOTFOUND&amp;aqs=chrome..69i57j69i59.2689j0j9&amp;sourceid=chrome&amp;espv=210&amp;es_sm=91&amp;ie=UTF-8">issue</a>, but no fixes were posted), more reading, and it something clicked with me, maybe it&rsquo;s the actual consumer account that it connects to, not the hubot account? So I tried this:
<code>
HUBOT_CAMPFIRE_ACCOUNT=myaccountname.campfirenow.com
</code>
Damn, nope.
<code>
ERROR Campfire request error: Error: getaddrinfo ENOTFOUND
</code>
I figured I&rsquo;d try with <code>https://</code>&hellip;..
<code>
HUBOT_CAMPFIRE_ACCOUNT=https://myaccountname.campfirenow.com
</code>
Damnit.
<code>
ERROR Campfire request error: Error: getaddrinfo ENOTFOUND
</code>
Finally I started searching around actual hubot <a href="https://github.com/github/hubot/issues/329">issues</a> and came across that guy. The <code>HUBOT_CAMPFIRE_ACCOUNT</code> just needed to be the subdomain. Do'h!
<code>
HUBOT_CAMPFIRE_ACCOUNT=myaccountname
</code>
Boom, it worked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking CPU WAIT via nagios]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/16/checking-cpu-wait-via-nagios/"/>
    <updated>2013-10-16T11:11:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/16/checking-cpu-wait-via-nagios</id>
    <content type="html"><![CDATA[<p>So our machines swap&hellip;.swap alot. There are the  typical nagios system checks, you can have the <code>check_swap</code> call, but at my company the &lt; 20 % hits so often we needed to figure out a way to get warned about crippling proformance. We discovered that when a machine has CPU WAIT spikes, the proformance for the machine tanks, so I tried to find a check for specificly monitor the CPU WAIT.  I should mention also that most/all of the boxes we run are VMs, and waiting on IO for swap makes a sad sysadmin.</p>

<p>I took a stab at creating a check myself and the following is a simple nagios check that you can run via NRPE.  The <code>PERCENTAGE</code> line is changeable, I&rsquo;d make sure your alarm reflects your error cases. We choose 10 % because that&rsquo;s when we started seeing real prefomance issues, but as all sysadmins know any CPU WAIT is bad in general.</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>stateid=
CPUWAIT=<code>top -b -n 1| grep 'wa,' | awk -F ',' {'print $5'} | cut -d . -f 1 | tr -d ' '</code>
PERCENTAGE=10</p>

<p>if [ ${CPUWAIT} -le ${PERCENTAGE} ]
 then
   echo Your CPU WAIT is under ${PERCENTAGE}%
   stateid=0
elif [ ${CPUWAIT} -ge ${PERCENTAGE} ]
 then
   echo Your CPU WAIT is at ${CPUWAIT}%, your machine aint happy
   stateid=2
 fi
exit $stateid
```</p>

<p>You are probably wondering &ldquo;There are alot of great systems checks on <a href="http://exchange.nagios.org/">Nagios Exchange</a>,&rdquo; but the site is so hard to use and useally much more than I need, like in this case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix https://chef defaulting running chef client on open source chef server]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server/"/>
    <updated>2013-10-05T16:59:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server</id>
    <content type="html"><![CDATA[<p>I went to #chef on freenode and maek helped me out.  Here’s a run down of how to fix it. Alas the gists are gone; sorry. :(</p>

<p>If you play with open source chef you might run into this.</p>

<p><code>
18:42 j^2 so i’m having trouble with chef-client
18:42 j^2 why does it default to https://chef/blahblah?
18:43 j^2 example:
18:43 j^2 https://gist.github.com/jjasghar/5873e421a7f8365194e3
18:44 j^2 any advice?
18:44 j^2 i guess i could add it to /etc/hosts, but i’d like it to use the chef_server_url is that the point of it?
18:45 maek j^2:  I just got hit with this also
18:45 maek i think becuase chef 11 is now fronted with nginx
18:45 maek its doing a rewrite
18:45 maek for the name configured in nginx
18:45 maek in this case its hostname
18:45 maek but i assume that box cant resolve chef
18:46 j^2 lame
18:46 maek j^2:  I had to end up adding a hosts entry
18:46 maek while I wait for dns
18:46 maek I think you could do
18:46 j^2 yeah that seems like the only option but it’s stuff dumb :(
18:47 maek you could reconfigure chef
18:47 maek to use its ip
18:47 maek instead of its hostname
18:47 j^2 tried the ip in chef_server_url didnt work either; wait you mean nginx?
18:48 @ssd7 maek: Re your question above. I believe you should be able to edit bookshelf[‘vip’] in your config and the run a reconfigure
18:48 maek i dont see it htought
18:48 j^2 oh!
18:48 maek default[‘chef_server’][‘bookshelf’][‘vip’] = node[‘fqdn’]
18:48 j^2 nice looking
18:48 maek yeah
18:48 maek there it is
</code></p>

<p>Or you can do this also, I believe this is how I fixed it myself.:</p>

<p><code>
18:48 maek so you can do
18:49 maek in /etc/chef-server/chef-server.rb
18:49 maek bookshelf[‘vip’] = ‘192.168.1.1’
18:50 j^2 yeah i dont thave that file. :(
18:50 maek and run chef-server-ctl reconfigure
18:50 j^2 ah cool
18:50 maek its for overrides
18:50 maek just make it
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to delete the cache in nagios]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-delete-the-cache-in-nagios/"/>
    <updated>2013-10-05T16:06:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-delete-the-cache-in-nagios</id>
    <content type="html"><![CDATA[<p>If you use the <a href="https://github.com/opscode-cookbooks/nagios">nagios cookbook</a>, and you have multiple disposable machines checking in and out of your chef-server, you might notice that running chef-client to pull new machines into nagios doesn&rsquo;t always work.  For a time my company had anything ranging from 4 to 8 machines spinning up and down, so I had to basically run chef-client on a 30 min interval to make sure I got them all. I discovered that my new machines weren&rsquo;t showing up, so I had to figure out how to &ldquo;clear the cache&rdquo; if you will.</p>

<p>Now this this is specific to  the nagios setup I have, but the <code>objects.cache</code> is what controls this.</p>

<p><code>bash
root@boe:/tmp# rm /var/cache/nagios3/objects.cache
root@boe:/tmp# service nagios restart
Running configuration check…done.
Stopping nagios: .done.
Starting nagios: done.
root@boe:/tmp# cd /var/cache/nagios3
root@boe:/var/cache/nagios3# ls
objects.cache  status.dat
</code></p>
]]></content>
  </entry>
  
</feed>
