<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2014-03-18T17:08:52-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[boxen is neat but man chef-solo was so much easier]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/25/boxen-is-neat-but-man-chef-solo-was-so-much-easier/"/>
    <updated>2014-01-25T00:24:28-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/25/boxen-is-neat-but-man-chef-solo-was-so-much-easier</id>
    <content type="html"><![CDATA[<p>So over the 2013 holiday break I played around with <a href="http://boxen.github.com/">boxen</a>, I even wrote a couple beginner posts on it. If you want go check them out, I&rsquo;ll wait&hellip;..</p>

<p>So, yeah, you can tell I was pretty impressed with it right?</p>

<p>Well from a guy that uses <a href="http://getchef.com">chef</a> day in and day out, using it in a real life scenario it was a nightmare.</p>

<p>First off, I can understand some of the choices they made; like putting everything in <code>/opt/boxen</code>. Alas the disadvantage is that well EVERYTHING is in <code>/opt/boxen</code>. My company leverages <a href="http://brew.sh/">homebrew</a> for all our base development software, and it seems that boxen installs the binary at <code>/opt/boxen/homebrew</code>. This in turn confuses the hell out of the seasoned admin AND the new person developer trying just do a simple <code>brew install &lt;someapp&gt;</code>. No joke, I spent 2-3 hours trying to figure out why boxen said homebrew was installed but I couldn&rsquo;t simplify just use <code>brew</code>. I ended up symlinking like crazy not realizing that I hand to <code>source /opt/boxen/script/env.sh</code>.  Turns out it seems I completely missed that small note in the docs/wrapper script, saying you need to source it. <em>sigh</em></p>

<p>Along with that nasty turn, one of the selling points was my ability to <code>git clone</code> down my companies code from Github. Yeah that didn&rsquo;t work at all. I forgot how hard it was to make a damn directory with puppet, then to use the <a href="https://github.com/boxen/puppet-repository">puppet-repository</a> and have it fall on it&rsquo;s face only frustrated me even farther. Strike two boxen, strike two.</p>

<p>The final strike came pretty simply but I didn&rsquo;t realize how much of a pain it was. The <a href="https://github.com/boxen/puppet-mysql">puppet-mysql</a> runs it&rsquo;s socket file in both a completely different location and runs a completely nonstandard port to connect to it. Now to a sysadmin like myself, this seems negligible, neigh, not even negligible,  but put this in front of a Developer that has to change his <code>database.yml</code> and all hell breaks loose.   And to top that off, because the database.yml is part of the code base, if said Dev decides to push it back upstream it opens up a can of worms asking why we have to have something like the following for everyone:
```ruby
&lt;%
  socket = [</p>

<pre><code>ENV["BOXEN_MYSQL_SOCKET"],
"/var/run/mysql5/mysqld.sock",
"/tmp/mysql.sock"
</code></pre>

<p>  ].detect { |f| f &amp;&amp; File.exist?(f) }</p>

<p>  port = ENV[&ldquo;BOXEN_MYSQL_PORT&rdquo;] || &ldquo;3306&rdquo;
%></p>

<p>development: &amp;development
  adapter: mysql
  database: yourapp_development
  username: root
&lt;% if socket %>
  host: localhost
  socket: &lt;%= socket %>
&lt;% else %>
  host: 127.0.0.1
  port: &lt;%= port %>
&lt;% end %></p>

<h1>Warning: The database defined as &ldquo;test&rdquo; will be erased and</h1>

<h1>re-generated from your development database when you run &ldquo;rake&rdquo;.</h1>

<h1>Do not set this db to the same as development or production.</h1>

<p>test:
  &lt;&lt;: *development
  database: yourapp_test
```</p>

<p>Yeah that ain&rsquo;t worth it AT ALL.  Now that I&rsquo;ve got my bitching out of the way, on to the happiness that is chef.</p>

<p>I took what I learned from boxen, and took the plunge into chef-solo to fix this issue. I recalled attempting to use chef-solo on OSX when I first started and it was also complete disaster. I&rsquo;m betting I really had no idea what I was doing so that&rsquo;s probably a major factor in it. But now I feel have mastered it on &ldquo;the linuxes&rdquo;, and hell even wrote a sensu cookbook for windows, so I told myself to take the plunge.  Man, I&rsquo;m really glad I did; TL;DR: easy pezzy.</p>

<p>I started around noon after deciding that boxen was dead, and by 3pm I had a working framework with a <a href="http://bit.ly/jj_mac">wrapper script</a>, <a href="https://github.com/opscode-cookbooks/homebrew">homebrew</a>, and <a href="http://jjasghar.github.io/blog/2013/08/02/adventures-with-chef-solo/">chef-solo</a>, why oh why didn&rsquo;t I do this originally.</p>

<p>(I pinged Fletcher Nichol about getting test-kitchen working with OSX, he sent me a gist on how to get it working, as of writing this I haven&rsquo;t attempted it yet, but hellz yes I&rsquo;m gonna kitchen this bitch up very very soon.)</p>

<p>I had some trouble with <a href="http://rvm.io">rvm</a>, automating the install was a bit tricky, but breaking it up into different <code>execute</code> and <code>bash</code> blocks allowed for solidarity. After that hooking up the <a href="https://github.com/opscode-cookbooks/dmg">dmg</a> cookbook and boom, I have my <a href="https://github.com/jjasghar/provision_mac">mac provisioning</a> system.</p>

<p>Take a look, I&rsquo;m honestly curious on what people think. Oh, take out the <code>repo.rb</code> though, it&rsquo;s specific to my company.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A chef error that has haunted me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/20/a-chef-error-that-has-haunted-me/"/>
    <updated>2014-01-20T15:42:33-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/20/a-chef-error-that-has-haunted-me</id>
    <content type="html"><![CDATA[<p>Ok, you may have seen this before:
<code>ruby
23.987.33.854   * cookbook_file[/etc/init.d/apache2] action create
23.987.33.854 ================================================================================
23.987.33.854 Error executing action `create` on resource 'cookbook_file[/etc/init.d/apache2]'
23.987.33.854 ================================================================================
23.987.33.854
23.987.33.854
23.987.33.854 Net::HTTPServerException
23.987.33.854 ------------------------
23.987.33.854 403 "Forbidden"
23.987.33.854
23.987.33.854
</code></p>

<p>NOTE: Yes, that is a fake ip, and yes that server Exception isn&rsquo;t tied just to apache2.</p>

<p>If you have, you know my pain.  Turns out there is a <a href="https://tickets.opscode.com/browse/CHEF-4253">ticket</a> on this and also a couple <a href="http://sanketdangi.com/post/50897416859/chef-errors-and-their-solutions">blog posts</a> also.</p>

<p>The gist of this:</p>

<blockquote><p>This error is encountered when we have large chef recipes whose deployment time on clients is large than 15 minutes. In order to avoid this error, please increase “s3_url_ttl" value from 900 seconds to required time interval</p></blockquote>

<p>So the fix is:
```bash
[~] % sudo vim /etc/chef-server/chef-server.rb</p>

<h1>add this line: erchef[‘s3_url_ttl’] = 900 where 900 is something larger&hellip;maybe 1800?</h1>

<p>[~] % sudo chef-server-ctl reconfigure
```</p>

<p>Boom, you should be good now. No more damn 403s.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Because googling failed me for yes or no bash scripting]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/18/because-googling-failed-me-for-yes-or-no-bash-scripting/"/>
    <updated>2014-01-18T14:01:51-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/18/because-googling-failed-me-for-yes-or-no-bash-scripting</id>
    <content type="html"><![CDATA[<p>So I was lazy, like all good sysadmins&hellip;I wanted to put in an option to say &ldquo;yes or no&rdquo; in a bash script.</p>

<p>I started with a simple <code>if..then..elif..else</code> statement, then I started googling around and found multiple ways to do it.</p>

<p>I ran the script a couple times, it worked like a charm, but without thinking about it I put <code>y</code> instead of the suggested <code>yes</code> and it <code>exit 1</code>ed me.  Do'h!</p>

<p>I continued googling around and then remembered the <code>case</code> statement.</p>

<p>I created this:
```bash</p>

<h1>!/bin/bash</h1>

<p>read -p &ldquo;yes or no: &rdquo; RESPONSE</p>

<p>case &ldquo;$RESPONSE&rdquo; in
  yes|y|Yes|Y)</p>

<pre><code>echo "blah is yes"
;;
</code></pre>

<p>  no|n|No|N)</p>

<pre><code>echo "blah is no"
;;
</code></pre>

<p>  *)</p>

<pre><code>echo "You need to say yes or no, start over!"
exit 1
;;
</code></pre>

<p>esac
```
Now you are probably wondering why I even bothered posting this. Honestly, I spent way too much time on this and I figured I&rsquo;ll find myself looking for this again 6+ months down the line.</p>

<p>Hopefully this post will save you some time in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Customizing Boxen]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/01/customizing-boxen/"/>
    <updated>2014-01-01T13:27:20-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/01/customizing-boxen</id>
    <content type="html"><![CDATA[<p>My goal is to get these few apps on my vm, but first lets get a default build working:</p>

<ul>
<li>iterm2</li>
<li>dropbox</li>
<li>mysql</li>
<li>1password</li>
<li>virtualbox</li>
<li>vagrant</li>
<li>chrome</li>
</ul>


<p>With my <a href="https://github.com/jjasghar/our-boxen">fork</a>&hellip;now it&rsquo;s time to start messing around with it. Go ahead and click <a href="https://github.com/jjasghar/our-boxen/tree/master/modules/people">here</a> this is for personal manifests. This is something I&rsquo;ll cover in the second half of this post. As I was walking through this, it seems that &ldquo;projects&rdquo; are just a shared collection of manifests also. So if you learn how to make a personal manifest, a project on isn&rsquo;t much more!</p>

<p>Where we want to start is at the default <a href="https://github.com/jjasghar/our-boxen/blob/master/manifests/site.pp">site.pp</a> this is what will be installed on all your boxes by well, default.</p>

<p>Ok, first thing first, get a base image running again, open up terminal, and checkout boxen from your fork, (this is my fork and the commands I use from a base install):
<code>
[~] % git --version # click "Install" for the developer tools
[~] % sudo mkdir -p /opt/boxen
[~] % sudo chown ${USER}:staff /opt/boxen
[~] % git clone https://github.com/jjasghar/our-boxen.git /opt/boxen/repo
[~] % cd /opt/boxen/repo
[/opt/boxen/repo] % git checkout -b removing_nodejs_old_ruby
[/opt/boxen/repo] % cd manifests
[/opt/boxen/repo/manifests] % vim site.pp
</code>
I don&rsquo;t care for nodejs or the older versions of ruby for this example, so I&rsquo;m going to remove lines 66-69 and 72,73 of that site.pp file. If you noticed I created a branch for this too, so I&rsquo;ll push this up to my repo so I can track my work.</p>

<p>Ok, lets give boxen a shot!
<code>
[/opt/boxen/repo/manifests] % cd ..
[/opt/boxen/repo/] % script/boxen --no-fde
[/opt/boxen/repo/] % source /opt/boxen/env.sh
[/opt/boxen/repo/] % boxen
</code>
You&rsquo;ll notice a warning about auto-update, that&rsquo;s fine, you are developing manifests right?</p>

<p>Go ahead and run these commands on the command line, if our changes worked as expected it should say:
<code>bash
jjasghar-Mac:repo jjasghar$ node
-bash: node: command not found
jjasghar-Mac:repo jjasghar$ ruby --version
ruby 2.0.0p247 (2013-06-27 revision 41674) [universal.x86_64-darwin13]
</code>
Hell yes! We got what we expected! Ok, go ahead and commit your changes so you can track your work, and push the branch up if you want to be completely safe.</p>

<h2>Per user manifests</h2>

<p>Ok, go ahead and go to that <code>modules/people</code> and read that <a href="https://github.com/jjasghar/our-boxen/tree/master/modules/people">README.md</a> so you get some background.</p>

<p>Now:
<code>bash
[/opt/boxen/repo/] % cd modules/people/manifests
[/opt/boxen/repo/modules/people/manifests] % git checkout master
[/opt/boxen/repo/modules/people/manifests] % git checkout -b jjasghar_manifest
[/opt/boxen/repo/modules/people/manifests] % vim jjasghar.pp # this needs to be your github account name
</code>
Here&rsquo;s a template from <a href="https://github.com/awaxa/our-boxen/blob/master/modules/people/manifests/awaxa.pp">Greg</a>, if you want to see what he&rsquo;s done.
<code>ruby awaxa.pp
class people::awaxa {
  include people::awaxa::applications
  include people::awaxa::dotfiles
  include people::awaxa::gitconfig
  include people::awaxa::preferences
  include people::awaxa::puppetlabs
}
</code>
As you can see he references other files located in that same directory, though in a sub directory as <code>awaxa/</code>. Lets use that <code>include people::awaxa::applications</code> initially.
```ruby applications.pp
class people::awaxa::applications {
  include caffeine
  include chrome
  #include dropbox
  #include gpgtools
  include onepassword
  include java
  include rdio
  include tunnelblick::beta
  include vagrant
  include virtualbox
  include vlc
  include vmware_fusion</p>

<p>  package { [</p>

<pre><code>'htop-osx',
'tmux'
]:
</code></pre>

<p>  }</p>

<p>  package { &lsquo;GoogleVoiceAndVideoSetup&rsquo;:</p>

<pre><code>source =&gt; 'http://dl.google.com/googletalk/googletalkplugin/GoogleVoiceAndVideoSetup.dmg',
provider =&gt; pkgdmg,
</code></pre>

<p>  }
}
<code>
Ok here's the one I created:
</code>ruby jjasghar.pp
class people::jjasghar {
  include people::jjasghar::applications
}
<code>
Nice! Ok, now we need to create:
</code>bash
[/opt/boxen/repo/modules/people/manifests] % mkdir jjasghar
[/opt/boxen/repo/modules/people/manifests] % vim jjasghar/applications.pp
```</p>

<p>This is where we add our apps!
<code>ruby applications.pp
class people::jjasghar::applications {
  include iterm2::stable
  include dropbox
  include mysql
  include onepassword
  include virtualbox
  include vagrant
  include chrome
}
</code></p>

<p>Ok, now you need to add these to the <code>Puppetfile</code> located at the root of the boxen repo
```ruby
[&mdash; snip &mdash;]</p>

<h1>Optional/custom modules. There are tons available at</h1>

<h1><a href="https://github.com/boxen.">https://github.com/boxen.</a></h1>

<p>github &ldquo;iterm2&rdquo;, &ldquo;1.0.0&rdquo;, :repo => &ldquo;boxen/puppet-iterm2&rdquo;
github &ldquo;chrome&rdquo;
github &ldquo;dropbox&rdquo;
github &ldquo;mysql&rdquo;
github &ldquo;onepassword&rdquo;
github &ldquo;virtualbox&rdquo;
github &ldquo;vagrant&rdquo;
```</p>

<p>After you update the <code>Puppetfile</code> go ahead and run <code>boxen</code> again:
<code>bash
[/opt/boxen/repo/modules/people/manifests] % cd /opt/boxen/repo
[/opt/boxen/repo] % boxen
</code></p>

<p>Grats! You got everything installed. This is just the start, but you can see the beauty of this now. Or at least I could.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures with boxen]]></title>
    <link href="http://jjasghar.github.io/blog/2013/12/31/adventures-with-boxen/"/>
    <updated>2013-12-31T15:54:00-06:00</updated>
    <id>http://jjasghar.github.io/blog/2013/12/31/adventures-with-boxen</id>
    <content type="html"><![CDATA[<p>Note: Thanks to <a href="https://github.com/awaxa/">Greg Kitson</a> as my sounding board and inspiration here to get this done.</p>

<p>So I started watching a couple videos on <a href="http://boxen.github.com">boxen</a> both are done by <a href="https://twitter.com/wfarr">@wfarr</a> and he&rsquo;s convinced me to give it a shot. Here is the &ldquo;first&rdquo; part of me getting up a dev env to play around with it.</p>

<p>I think the thing that got me was the &ldquo;one line cURL&rdquo; that you can run which is from <a href="https://github.com/boxen/boxen-web">boxen-web</a> so that&rsquo;s my ultimate goal here; ok lets start this off.</p>

<p>First thing, read the <a href="https://github.com/boxen/our-boxen/blob/master/README.md">README.md</a> and something jumps out at me straight off the bat:
<code>
Boxen requires at least the Xcode Command Line Tools installed.
Boxen will not work with an existing rvm install.
Boxen may not play nice with a GitHub username that includes dash(-)
Boxen may not play nice with an existing rbenv install.
Boxen may not play nice with an existing chruby install.
Boxen may not play nice with an existing homebrew install.
Boxen may not play nice with an existing nvm install.
Boxen recommends installing the full Xcode.
</code>
<em>sigh</em> So this means I need a vm to start playing with this. I chose virtualbox as my hypervisor. The trick is; you can only virtualize OS X on OS X so get it installed on your mac ;).</p>

<p>It seems there is a Mavericks network issue with <a href="https://forums.virtualbox.org/viewtopic.php?f=8&amp;t=58036">virtualbox 4.2</a> so I suggest updating to the latest before going any farther. I ran into a problem with the network adapter and the install wizard wouldn&rsquo;t get farther than Manual/DHCP network setup. <em>grrr</em></p>

<p>Ok, so I&rsquo;m writing this real time&hellip;yeah this blew up. So I converted to <a href="https://my.vmware.com/web/vmware/info/slug/desktop_end_user_computing/vmware_fusion/6_0">VMware Fusion 6</a> to attempt to build the box. Lets see how that goes.</p>

<p>So tricky VMware Fusion, it says it&rsquo;s designed for Windows, but you can use the Install.App you got from the Mac App store. When it asks for an image to install from, just point it there!</p>

<p>Spin up a machine like it suggests and get a base image installed. Go ahead shut it down here, take a snapshot it as &ldquo;base install or something&rdquo; so you can roll back here because you&rsquo;re using a provisioning software and you need a clean box right? RIGHT? (yes yes vagrant would be perfect here, but that&rsquo;s another cost got get it working with fusion)</p>

<p>After you got that done boot up the vm open terminal run the following:</p>

<p><code>git --version</code></p>

<p>This should prompt you to install the &ldquo;mac cli tools&rdquo; without needing to install Xcode. Badass.</p>

<p>Go ahead and fork <a href="https://github.com/boxen/our-boxen">our-boxen</a> like it suggests. Now if you want this to be private, for your company..(I&rsquo;m not doing because I&rsquo;m trying to learn this), you have to go through the following:
<code>bash
[~] % sudo mkdir -p /opt/boxen
[~] % sudo chown ${USER}:staff /opt/boxen
[~] % git clone https://github.com/boxen/our-boxen /opt/boxen/repo
[~] % cd /opt/boxen/repo
[/opt/boxen/repo] % git remote rm origin
[/opt/boxen/repo] % git remote add origin &lt;the location of my new git repository&gt;
[/opt/boxen/repo] % git push -u origin master
</code>
This deploys the default boxen setup like the README.md says, customizing is in a following post.</p>

<p>Ok, now try out boxen:
<code>bash
[/opt/boxen/repo] % ./script/boxen
</code>
Alas this will probably bitch about no Full Disk Encryption, so you&rsquo;ll need to run (good for developing this):
<code>bash
[/opt/boxen/repo] % ./script/boxen --no-fde
</code></p>

<p>It should ask you for your github credentials (yes it works with two factor authentication), then you should start seeing a bunch of stuff on the screen!</p>

<p>NOTE: you might see it get stuck at <code>Dnsmasq</code> for a default run. If you check activity monitor it is running and talking to Greg, it seems that&rsquo;s gcc/make compiling something in the background. This might take a long time, wait it out.</p>

<p>Grats you have successfully started up boxen and got it running. Now lets customize it, that should be the following post&hellip;</p>
]]></content>
  </entry>
  
</feed>
