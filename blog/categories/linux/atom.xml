<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2013-11-27T12:12:11-06:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hubot+Herkou+Campfire and how I spent much more time than I thought I should]]></title>
    <link href="http://jjasghar.github.io/blog/2013/11/27/hubot-plus-herkou-and-how-i-spent-much-more-time-than-i-thought-i-should/"/>
    <updated>2013-11-27T11:41:00-06:00</updated>
    <id>http://jjasghar.github.io/blog/2013/11/27/hubot-plus-herkou-and-how-i-spent-much-more-time-than-i-thought-i-should</id>
    <content type="html"><![CDATA[<p>So I recently watched <a href="http://www.youtube.com/watch?v=NST3u-GjjFw">ChatOps</a> and got sold on <a href="http://hubot.github.com/">Hubot</a>.  We had him at my company for a while, but
with a migration we lost him; so I took it upon myself to learn how to use him again.  All in all getting him running inside my company was pretty straight forward, hell even getting
node to work on my local box for local development (<a href="https://gist.github.com/isaacs/579814">this gist</a> sums it up nicely) wasn&rsquo;t hard at all.  I found myself wanting my own hubot for <a href="https://github.com/github/hubot-scripts/blob/master/src/scripts/meme_captain.coffee">memes</a> generation, or just to play around with.</p>

<p>So I decided hell, lets try out the <a href="https://github.com/github/hubot/blob/master/docs/deploying/heroku.md">heroku</a> install. It was pretty straight forward, I got my repo running, got it deployed; but I ran into an error:
<code>
ERROR Campfire request error: Error: getaddrinfo ENOTFOUND
</code>
This is what the doc says&hellip;.
<code>
% heroku config:add HUBOT_CAMPFIRE_ACCOUNT=yourcampfireaccount
% heroku config:add HUBOT_CAMPFIRE_TOKEN=yourcampfiretoken
</code>
I put my <code>HUBOT_CAMPEFIRE_ACCOUNT</code> name as my hubot&rsquo;s account name with the token which seems logical&hellip;wth man?
<code>
HUBOT_CAMPFIRE_ACCOUNT=hubotsemail@myaccountname.com
</code>
I did some searching, googling, (it seems a few people had this <a href="https://www.google.com/search?q=ERROR+Campfire+request+error%3A+Error%3A+getaddrinfo+ENOTFOUND&amp;oq=ERROR+Campfire+request+error%3A+Error%3A+getaddrinfo+ENOTFOUND&amp;aqs=chrome..69i57j69i59.2689j0j9&amp;sourceid=chrome&amp;espv=210&amp;es_sm=91&amp;ie=UTF-8">issue</a>, but no fixes were posted), more reading, and it something clicked with me, maybe it&rsquo;s the actual consumer account that it connects to, not the hubot account? So I tried this:
<code>
HUBOT_CAMPFIRE_ACCOUNT=myaccountname.campfirenow.com
</code>
Damn, nope.
<code>
ERROR Campfire request error: Error: getaddrinfo ENOTFOUND
</code>
I figured I&rsquo;d try with <code>https://</code>&hellip;..
<code>
HUBOT_CAMPFIRE_ACCOUNT=https://myaccountname.campfirenow.com
</code>
Damnit.
<code>
ERROR Campfire request error: Error: getaddrinfo ENOTFOUND
</code>
Finally I started searching around actual hubot <a href="https://github.com/github/hubot/issues/329">issues</a> and came across that guy. The <code>HUBOT_CAMPFIRE_ACCOUNT</code> just needed to be the subdomain. Do'h!
<code>
HUBOT_CAMPFIRE_ACCOUNT=myaccountname
</code>
Boom, it worked.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking CPU WAIT via nagios]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/16/checking-cpu-wait-via-nagios/"/>
    <updated>2013-10-16T11:11:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/16/checking-cpu-wait-via-nagios</id>
    <content type="html"><![CDATA[<p>So our machines swap&hellip;.swap alot. There are the  typical nagios system checks, you can have the <code>check_swap</code> call, but at my company the &lt; 20 % hits so often we needed to figure out a way to get warned about crippling proformance. We discovered that when a machine has CPU WAIT spikes, the proformance for the machine tanks, so I tried to find a check for specificly monitor the CPU WAIT.  I should mention also that most/all of the boxes we run are VMs, and waiting on IO for swap makes a sad sysadmin.</p>

<p>I took a stab at creating a check myself and the following is a simple nagios check that you can run via NRPE.  The <code>PERCENTAGE</code> line is changeable, I&rsquo;d make sure your alarm reflects your error cases. We choose 10 % because that&rsquo;s when we started seeing real prefomance issues, but as all sysadmins know any CPU WAIT is bad in general.</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>stateid=
CPUWAIT=<code>top -b -n 1| grep 'wa,' | awk -F ',' {'print $5'} | cut -d . -f 1 | tr -d ' '</code>
PERCENTAGE=10</p>

<p>if [ ${CPUWAIT} -le ${PERCENTAGE} ]
 then
   echo Your CPU WAIT is under ${PERCENTAGE}%
   stateid=0
elif [ ${CPUWAIT} -ge ${PERCENTAGE} ]
 then
   echo Your CPU WAIT is at ${CPUWAIT}%, your machine aint happy
   stateid=2
 fi
exit $stateid
```</p>

<p>You are probably wondering &ldquo;There are alot of great systems checks on <a href="http://exchange.nagios.org/">Nagios Exchange</a>,&rdquo; but the site is so hard to use and useally much more than I need, like in this case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix https://chef defaulting running chef client on open source chef server]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server/"/>
    <updated>2013-10-05T16:59:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server</id>
    <content type="html"><![CDATA[<p>I went to #chef on freenode and maek helped me out.  Here’s a run down of how to fix it. Alas the gists are gone; sorry. :(</p>

<p>If you play with open source chef you might run into this.</p>

<p><code>
18:42 j^2 so i’m having trouble with chef-client
18:42 j^2 why does it default to https://chef/blahblah?
18:43 j^2 example:
18:43 j^2 https://gist.github.com/jjasghar/5873e421a7f8365194e3
18:44 j^2 any advice?
18:44 j^2 i guess i could add it to /etc/hosts, but i’d like it to use the chef_server_url is that the point of it?
18:45 maek j^2:  I just got hit with this also
18:45 maek i think becuase chef 11 is now fronted with nginx
18:45 maek its doing a rewrite
18:45 maek for the name configured in nginx
18:45 maek in this case its hostname
18:45 maek but i assume that box cant resolve chef
18:46 j^2 lame
18:46 maek j^2:  I had to end up adding a hosts entry
18:46 maek while I wait for dns
18:46 maek I think you could do
18:46 j^2 yeah that seems like the only option but it’s stuff dumb :(
18:47 maek you could reconfigure chef
18:47 maek to use its ip
18:47 maek instead of its hostname
18:47 j^2 tried the ip in chef_server_url didnt work either; wait you mean nginx?
18:48 @ssd7 maek: Re your question above. I believe you should be able to edit bookshelf[‘vip’] in your config and the run a reconfigure
18:48 maek i dont see it htought
18:48 j^2 oh!
18:48 maek default[‘chef_server’][‘bookshelf’][‘vip’] = node[‘fqdn’]
18:48 j^2 nice looking
18:48 maek yeah
18:48 maek there it is
</code></p>

<p>Or you can do this also, I believe this is how I fixed it myself.:</p>

<p><code>
18:48 maek so you can do
18:49 maek in /etc/chef-server/chef-server.rb
18:49 maek bookshelf[‘vip’] = ‘192.168.1.1’
18:50 j^2 yeah i dont thave that file. :(
18:50 maek and run chef-server-ctl reconfigure
18:50 j^2 ah cool
18:50 maek its for overrides
18:50 maek just make it
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to delete the cache in nagios]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-delete-the-cache-in-nagios/"/>
    <updated>2013-10-05T16:06:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-delete-the-cache-in-nagios</id>
    <content type="html"><![CDATA[<p>If you use the <a href="https://github.com/opscode-cookbooks/nagios">nagios cookbook</a>, and you have multiple disposable machines checking in and out of your chef-server, you might notice that running chef-client to pull new machines into nagios doesn&rsquo;t always work.  For a time my company had anything ranging from 4 to 8 machines spinning up and down, so I had to basically run chef-client on a 30 min interval to make sure I got them all. I discovered that my new machines weren&rsquo;t showing up, so I had to figure out how to &ldquo;clear the cache&rdquo; if you will.</p>

<p>Now this this is specific to  the nagios setup I have, but the <code>objects.cache</code> is what controls this.</p>

<p><code>bash
root@boe:/tmp# rm /var/cache/nagios3/objects.cache
root@boe:/tmp# service nagios restart
Running configuration check…done.
Stopping nagios: .done.
Starting nagios: done.
root@boe:/tmp# cd /var/cache/nagios3
root@boe:/var/cache/nagios3# ls
objects.cache  status.dat
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from one chef to multiple chefs]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/04/moving-from-one-chef-to-multiple-chefs/"/>
    <updated>2013-10-04T14:00:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/04/moving-from-one-chef-to-multiple-chefs</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a organic growth of a Ops team using chef goes through.  You start out with a <code>chef_repo</code> then you post it to github/some DVCS.  From there you tell people to clone it down and put PRs against it. From there you attempt to be a gate keeper, looking at the commits in the log, realizing that there is no match ups. From there you say to yourself &ldquo;Hey, ok, these guys are pretty smart, as long as I spot check, they should be able to merge things in and I can trust them right?&rdquo; NO you are lying to yourself you just don&rsquo;t realize it yet.</p>

<p>Wait for that one day that you think you have the newest cookbook and you bump the version, add your changes and you upload, and push&hellip;and nothing happens. Oh I&rsquo;m 2x behind where I thought great, bump and push. Oh&hellip;it seems there was a critical fix in that one that I didnt get for that exact cookbook I uploaded&hellip;crap. (And other situations like this can pop up.)</p>

<p>So, I pinged <a href="https://twitter.com/nathenharvey">Nathen Harvey</a> at Opscode asking for some guidance, he suggested <a href="https://github.com/jonlives/knife-spork">knife-spork</a>.  So far with my initial tests it looks like it is the correct answer,  so I&rsquo;m also writing this as a HOWTO for my company so this is just a run down of how to use it. (A cheatsheet to the README.md if you will.)</p>

<h2>Installation</h2>

<p>Obviously the first thing you need to do is install it. Luckily it&rsquo;s a gem so you can just do the following. If you read the docs there are a bunch of places that you <code>.yml</code> gets read from, but I chose this because I like having all my chef stuff in <code>.chef</code> so I don&rsquo;t have to think about pulling anything other than <code>.chef</code> if I want to move boxes.</p>

<p><code>bash
gem install knife-spork
touch ~/.chef/spork-config.yml
</code></p>

<p>After installing the gem and touching the file, you can run <code>knife spork info</code>, it should say everything is disabled.  If so, then you are read to create the config file.</p>

<p>The example <a href="https://raw.github.com/jonlives/knife-spork/master/README.md">config</a> is on the main site, but I copied the demo one here too.</p>

<p>```yaml
default_environments:
  &ndash; development
  &ndash; production
environment_groups:
  qa_group:</p>

<pre><code>- quality_assurance
- staging
</code></pre>

<p>  test_group:</p>

<pre><code>- user_testing
- acceptance_testing
</code></pre>

<p>version_change_threshold: 2
environment_path: &ldquo;/home/me/environments&rdquo;
plugins:
  campfire:</p>

<pre><code>account: myaccount
token: a1b2c3d4...
</code></pre>

<p>  hipchat:</p>

<pre><code>api_token: ABC123
rooms:
  - General
  - Web Operations
notify: true
color: yellow
</code></pre>

<p>  jabber:</p>

<pre><code>username: YOURUSER
password: YOURPASSWORD
nickname: Chef Bot
server_name: your.jabberserver.com
server_port: 5222
rooms:
  - engineering@your.conference.com/spork
  - systems@your.conference.com/spork
</code></pre>

<p>  git:</p>

<pre><code>enabled: true
</code></pre>

<p>  irccat:</p>

<pre><code>server: irccat.mydomain.com
port: 12345
gist: "/usr/bin/gist"
channel: ["chef-annoucements"]
</code></pre>

<p>  graphite:</p>

<pre><code>server: graphite.mydomain.com
port: 2003
</code></pre>

<p>  eventinator:</p>

<pre><code>url: http://eventinator.mydomain.com/events/oneshot
</code></pre>

<p>```</p>

<p>All in all this seems pretty self <a href="https://github.com/jonlives/knife-spork#default-environments">explanatory</a> but the most important things to change are <code>environment_path</code> and disabling the plugins (by removing them) here.  For my company I only used the git plugin and&hellip;well that was it. :)</p>

<p>By the way there are only a few plugins, <a href="https://github.com/jonlives/knife-spork/tree/master/plugins">here</a> is a link to the different .md files on each.</p>

<p>Ok, so you have everything set up, what do you do now?</p>

<h2>Usage</h2>

<p>The first step is to run <code>knife spork check COOKBOOK --all</code> where COOKBOOK is one of your commonly updated/tweaked cookbooks.  Spork checks against what you have locally compared to what&rsquo;s in the server, like this:</p>

<p><code>
knife spork check COOKBOOK --all
</code></p>

<p>Here&rsquo;s an example:
```bash
Checking versions for cookbook nagios&hellip;</p>

<p>Local Version:
  5.1.5</p>

<p>Remote Versions: (* indicates frozen)
  5.1.5
  5.1.4
  5.1.3
  5.1.2</p>

<p>ERROR: The version 5.1.5 exists on the server and is not frozen. Uploading will overwrite!
```</p>

<p>As you can see with the error, it&rsquo;s pretty self explaintory.</p>

<p>The second step is to bump the version:
<code>bash
knife spork bump nagios patch
Git: Pulling latest changes from /Users/jasghar/repo/chef_repo/environments
Pulling latest changes from git submodules (if any)
Git: Pulling latest changes from /Users/jasghar/repo/chef_repo/cookbooks/nagios
Pulling latest changes from git submodules (if any)
Successfully bumped nagios to v5.1.6!
</code></p>

<p>Now as you can see I have the git plugin working, and it without thinking about it, updates the metadata.rb so you don&rsquo;t have to. (I HATE that part of chef, I always forget.) Now you can go off make your changes.</p>

<p>From here you&rsquo;re happy, you&rsquo;ve commited your new <code>chef_repo</code> back to the DVCS that you use.  This is where the magic happens: <code>knife spork upload COOKBOOK</code>.  This thing is great, it (to quote the <code>README.md</code>) <em>This function works mostly the same as normal knife cookbook upload COOKBOOK except that this automatically freezes cookbooks when you upload them.</em> Which is the bread and butter of spork.  The freezing is crazy important, by freezing the upload you take &ldquo;ownership&rdquo; of that version of the cookbook.  Your changes are yours, and no-one can mess with them.  So in turn you don&rsquo;t step on your coworkers toes and he doesen&rsquo;t step on yours.</p>

<p>Ok, so this was the cheatsheet, we have implymented this at my company now, so hopefully this goes great. If not&hellip;well that&rsquo;s a different conversation.</p>
]]></content>
  </entry>
  
</feed>
