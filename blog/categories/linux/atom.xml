<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: linux | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2015-07-25T15:26:04-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B]]></title>
    <link href="http://jjasghar.github.io/blog/2015/07/20/ssl-connect-returned-equals-1-errno-equals-0-state-equals-sslv3-read-server-certificate-b/"/>
    <updated>2015-07-20T16:18:16-05:00</updated>
    <id>http://jjasghar.github.io/blog/2015/07/20/ssl-connect-returned-equals-1-errno-equals-0-state-equals-sslv3-read-server-certificate-b</id>
    <content type="html"><![CDATA[<h2>tl;dr:</h2>

<p>You&rsquo;re getting self signed cert errors using Berkshelf or <code>knife.rb</code>, add this to your <code>knife.rb</code> and run this command:</p>

<p><code>ruby
ssl_verify_mode :verify_none
</code></p>

<p><code>
echo '{"ssl":{"verify": false }}' &gt; ~/.berkshelf/config.json
</code></p>

<h2>Explanation</h2>

<p>If you have a self signed cert on your chef-server, there&rsquo;s a change you&rsquo;ve seen this before using berkshelf:</p>

<p><code>
E, [2015-07-20T16:15:33.369649 #34774] ERROR -- : Ridley::Errors::ClientError: SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed
E, [2015-07-20T16:15:33.369737 #34774] ERROR -- : /opt/chefdk/embedded/lib/ruby/gems/2.1.0/gems/celluloid-0.16.0/lib/celluloid/responses.rb:29:in `value'
</code></p>

<p>This is berkshelf telling you you&rsquo;re not running a signed cert, and it bombs out.</p>

<p>Looking at <a href="https://github.com/berkshelf/berkshelf/issues/1266">this</a> they give the answer, which is:</p>

<p><code>
chef exec berks upload --no-ssl-verify
</code></p>

<p>Now it&rsquo;s possible it&rsquo;s <code>knife</code> sending back something like that error. Checkout <a href="https://twitter.com/jtimberman">Joshua Timberman</a>&rsquo;s post <a href="http://jtimberman.housepub.org/blog/2014/12/11/chef-12-fix-untrusted-self-sign-certs/">here</a>
to help out with specific <code>knife</code> issues.</p>

<p>Update:</p>

<p>Thanks to <a href="https://twitter.com/ryancragun">Ryan Cragun</a> my co-worker and general badass, pointing out a way to get around this too.</p>

<p><code>
echo '{"ssl":{"verify": false }}' &gt; ~/.berkshelf/config.json
</code></p>

<p>Now you can drop that <code>--no-ssl-verify</code>.</p>

<p>Another Update:</p>

<p>So it seems you might see this with <code>knife cookbook upload</code> or any <code>knife</code> command for that matter:</p>

<p><code>
ubuntu@aoeu:~/chef-repo$ knife status
ERROR: SSL Validation failure connecting to host: 172.16.20.62 - SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed
ERROR: Could not establish a secure connection to the server.
Use `knife ssl check` to troubleshoot your SSL configuration.
If your Chef Server uses a self-signed certificate, you can use
`knife ssl fetch` to make knife trust the server's certificates.
Original Exception: OpenSSL::SSL::SSLError: SSL_connect r
</code></p>

<p>And if you run <code>knife ssl check</code> you&rsquo;d see:</p>

<p>```
ubuntu@aoeu:~/chef-repo$ knife ssl check
Connecting to host 172.16.20.62:443
ERROR: The SSL certificate of 172.16.20.62 could not be verified
Certificate issuer data: /C=US/ST=WA/L=Seattle/O=YouCorp/OU=Operations/CN=chefie.novalocal/emailAddress=<a href="&#109;&#97;&#x69;&#108;&#x74;&#111;&#58;&#121;&#111;&#117;&#64;&#101;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#x2e;&#99;&#x6f;&#109;">&#121;&#x6f;&#117;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#x6d;</a>
Configuration Info:
OpenSSL Configuration:
* Version: OpenSSL 1.0.1m 19 Mar 2015
* Certificate file: /opt/chef/embedded/ssl/cert.pem
* Certificate directory: /opt/chef/embedded/ssl/certs
Chef SSL Configuration:
* ssl_ca_path: nil
* ssl_ca_file: nil
* trusted_certs_dir: &ldquo;/home/ubuntu/chef-repo/.chef/trusted_certs&rdquo;
TO FIX THIS ERROR:
If the server you are connecting to uses a self-signed certificate, you must
configure chef to trust that server&rsquo;s certificate.</p>

<p>By default, the certificate is stored in the following location on the host
where your chef-server runs:</p>

<p>  /var/opt/opscode/nginx/ca/SERVER_HOSTNAME.crt</p>

<p>Copy that file to your trusted_certs_dir (currently: /home/ubuntu/chef-repo/.chef/trusted_certs)
using SSH/SCP or some other secure method, then re-run this command to confirm
that the server&rsquo;s certificate is now trusted.
```</p>

<p>So you do what the command says:</p>

<p><code>``
ubuntu@aoeu:~/chef-repo$ knife ssl fetch
WARNING: Certificates from 172.16.20.62 will be fetched and placed in your trusted_cert
directory (/home/ubuntu/chef-repo/.chef/trusted_certs).
Knife has no means to verify these are the correct certificates. You should
verify the authenticity of these certificates after downloading.
Adding certificate for chefie.novalocal in /home/ubuntu/chef-repo/.chef/trusted_certs/chefie_novalocal.crt
ubuntu@aoeu:~/chef-repo$ knife status
ERROR: SSL Validation failure connecting to host: 172.16.20.62 - hostname "172.16.20.62" does not match the server certificate
ERROR: Could not establish a secure connection to the server.
Use</code>knife ssl check<code>to troubleshoot your SSL configuration.
If your Chef Server uses a self-signed certificate, you can use
</code>knife ssl fetch` to make knife trust the server&rsquo;s certificates.</p>

<p>Original Exception: OpenSSL::SSL::SSLError: hostname &ldquo;172.16.20.62&rdquo; does not match the server certificate
```</p>

<p>That look fimilar, and it feels like you&rsquo;re in a loop&hellip;.</p>

<p>Turns out you can bypass this check completley by adding this to your <code>knife.rb</code>.</p>

<p><code>ruby
ssl_verify_mode :verify_none
</code></p>

<p>Then you&rsquo;ll be right as rain.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[bazaar usage from a git user]]></title>
    <link href="http://jjasghar.github.io/blog/2015/03/16/bazaar-usage-from-a-git-user/"/>
    <updated>2015-03-16T12:16:07-05:00</updated>
    <id>http://jjasghar.github.io/blog/2015/03/16/bazaar-usage-from-a-git-user</id>
    <content type="html"><![CDATA[<p>I love git. Honestly, I really do, hell I even have a sticker on my laptop.
Unfortunately <a href="http://canonical.com">Canonical</a> choose something different
called <a href="http://bazaar.canonical.com/en/">bazaar</a>. It&rsquo;s supposed to be easier,
the jury is still out on that for my opinion; but it really is a tad bit different.</p>

<p>I&rsquo;m putting a collection of commands here, so if you decided you&rsquo;d like to put in
a &ldquo;PR&rdquo; or in <a href="https://launchpad.net/">launchpad</a>&rsquo;s term &ldquo;Propose for merging&rdquo; merge.</p>

<p>Lets say you&rsquo;ve found a typo and you&rsquo;d like to fix it; something like <a href="https://code.launchpad.net/~d-jj/ironic/ironic-conductor/+merge/253085">this</a>.</p>

<p>These steps assume you have a <a href="https://login.launchpad.net/+login">launchpad id</a> and account set up correctly, and all you
want to do is push up a change to an issue you&rsquo;ve found.</p>

<p>First be sure to login to launchpad:</p>

<p><code>bash
~ &gt; bzr launchpad-login &lt;username&gt;
</code></p>

<p>Then you clone down the code locally with this, NOTE: ubuntu/ironic can be anything on launchpad.</p>

<p><code>bash
~ &gt; bzr branch lp:ubuntu/ironic
</code></p>

<p>Then <code>checkout</code> the repo into a branch you can work on, NOTE: ironic-conductor will create a directory you will work in</p>

<p><code>bash
~ &gt; bzr checkout lp:ubuntu/ironic ironic-conductor
</code></p>

<p>Then you need to &lsquo;link&rsquo; the local working directory with your launchpad account, NOTE: this&rsquo;ll push up the initial branch to launchpad.</p>

<p><code>bash
~ &gt; cd ironic-conductor
ironic-conductor &gt; bzr branch --stacked --switch lp:ubuntu/ironic lp:~d-jj/ironic/ironic-conductor
</code></p>

<p>Make your changes!</p>

<p><code>bash
ironic-conductor &gt; # I'm doing awesome changes now, rm -rf my_file and blah blah blah
</code></p>

<p>Sanity check your changes:</p>

<p><code>bash
ironic-conductor &gt; bzr diff
</code></p>

<p>Yep, looks good, lets commit:</p>

<p><code>bash
ironic-conductor &gt; bzr commit -m "I did some amazing changes and this is that commit"
</code></p>

<p>If everything goes to plan you should see something like:
<code>
Most recent Ubuntu version: 2015.1~b2-0ubuntu1
Packaging branch status: CURRENT
Committing to: bzr+ssh://bazaar.launchpad.net/~d-jj/ironic/ironic-conductor/
modified debian/ironic-conductor.init.in
Committed revision 14.
</code></p>

<p>Ok, so now if you go to your launchpad you should see the push, now go to the project and click that
<code>Propose for merging</code> link.</p>

<p>Under &ldquo;Target Branch&rdquo; place the active branch under development, also add a note to the &ldquo;Description of Change&rdquo;
so you have a blurb on what it does. Click &ldquo;Propose Merge.&rdquo;</p>

<p>I&rsquo;ve found that I constantly get it backwards, so be wary of that; you may have to re-propose the merge if the
diffs look wrong. You can do this from the page after the &ldquo;Propose Merge.&rdquo; If someone figures out how to get it
right the first time please ping me: @jjasghar on twitter, I&rsquo;d love to see the &ldquo;correct&rdquo; way to do this.</p>

<p>Also for that matter, I couldn&rsquo;t figure out a way to do this without using the site, there&rsquo;s gotta be a CLI
only version of this.</p>

<p>Here are some links I looked at I was figuring this out:</p>

<ol>
<li><a href="http://stackoverflow.com/questions/5043104/step-by-step-bazaar-workflow">http://stackoverflow.com/questions/5043104/step-by-step-bazaar-workflow</a></li>
<li><a href="https://oxygene.sk/2009/10/working-with-branches-in-bazaar/">https://oxygene.sk/2009/10/working-with-branches-in-bazaar/</a></li>
<li><a href="http://askubuntu.com/questions/13547/how-to-create-a-personal-branch-in-launchpad">http://askubuntu.com/questions/13547/how-to-create-a-personal-branch-in-launchpad</a></li>
<li><a href="http://askubuntu.com/questions/93859/what-is-bazaar-and-how-do-i-use-it">http://askubuntu.com/questions/93859/what-is-bazaar-and-how-do-i-use-it</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[boxen is neat but man chef-solo was so much easier]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/25/boxen-is-neat-but-man-chef-solo-was-so-much-easier/"/>
    <updated>2014-01-25T00:24:28-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/25/boxen-is-neat-but-man-chef-solo-was-so-much-easier</id>
    <content type="html"><![CDATA[<p>So over the 2013 holiday break I played around with <a href="http://boxen.github.com/">boxen</a>, I even wrote a couple beginner posts on it. If you want go check them out, I&rsquo;ll wait&hellip;..</p>

<p>So, yeah, you can tell I was pretty impressed with it right?</p>

<p>Well from a guy that uses <a href="http://getchef.com">chef</a> day in and day out, using it in a real life scenario it was a nightmare.</p>

<p>First off, I can understand some of the choices they made; like putting everything in <code>/opt/boxen</code>. Alas the disadvantage is that well EVERYTHING is in <code>/opt/boxen</code>. My company leverages <a href="http://brew.sh/">homebrew</a> for all our base development software, and it seems that boxen installs the binary at <code>/opt/boxen/homebrew</code>. This in turn confuses the hell out of the seasoned admin AND the new person developer trying just do a simple <code>brew install &lt;someapp&gt;</code>. No joke, I spent 2-3 hours trying to figure out why boxen said homebrew was installed but I couldn&rsquo;t simplify just use <code>brew</code>. I ended up symlinking like crazy not realizing that I hand to <code>source /opt/boxen/script/env.sh</code>.  Turns out it seems I completely missed that small note in the docs/wrapper script, saying you need to source it. <em>sigh</em></p>

<p>Along with that nasty turn, one of the selling points was my ability to <code>git clone</code> down my companies code from Github. Yeah that didn&rsquo;t work at all. I forgot how hard it was to make a damn directory with puppet, then to use the <a href="https://github.com/boxen/puppet-repository">puppet-repository</a> and have it fall on it&rsquo;s face only frustrated me even farther. Strike two boxen, strike two.</p>

<p>The final strike came pretty simply but I didn&rsquo;t realize how much of a pain it was. The <a href="https://github.com/boxen/puppet-mysql">puppet-mysql</a> runs it&rsquo;s socket file in both a completely different location and runs a completely nonstandard port to connect to it. Now to a sysadmin like myself, this seems negligible, neigh, not even negligible,  but put this in front of a Developer that has to change his <code>database.yml</code> and all hell breaks loose.   And to top that off, because the database.yml is part of the code base, if said Dev decides to push it back upstream it opens up a can of worms asking why we have to have something like the following for everyone:
```ruby
&lt;%
  socket = [</p>

<pre><code>ENV["BOXEN_MYSQL_SOCKET"],
"/var/run/mysql5/mysqld.sock",
"/tmp/mysql.sock"
</code></pre>

<p>  ].detect { |f| f &amp;&amp; File.exist?(f) }</p>

<p>  port = ENV[&ldquo;BOXEN_MYSQL_PORT&rdquo;] || &ldquo;3306&rdquo;
%></p>

<p>development: &amp;development
  adapter: mysql
  database: yourapp_development
  username: root
&lt;% if socket %>
  host: localhost
  socket: &lt;%= socket %>
&lt;% else %>
  host: 127.0.0.1
  port: &lt;%= port %>
&lt;% end %></p>

<h1>Warning: The database defined as &ldquo;test&rdquo; will be erased and</h1>

<h1>re-generated from your development database when you run &ldquo;rake&rdquo;.</h1>

<h1>Do not set this db to the same as development or production.</h1>

<p>test:
  &lt;&lt;: *development
  database: yourapp_test
```</p>

<p>Yeah that ain&rsquo;t worth it AT ALL.  Now that I&rsquo;ve got my bitching out of the way, on to the happiness that is chef.</p>

<p>I took what I learned from boxen, and took the plunge into chef-solo to fix this issue. I recalled attempting to use chef-solo on OSX when I first started and it was also complete disaster. I&rsquo;m betting I really had no idea what I was doing so that&rsquo;s probably a major factor in it. But now I feel have mastered it on &ldquo;the linuxes&rdquo;, and hell even wrote a sensu cookbook for windows, so I told myself to take the plunge.  Man, I&rsquo;m really glad I did; TL;DR: easy pezzy.</p>

<p>I started around noon after deciding that boxen was dead, and by 3pm I had a working framework with a <a href="http://bit.ly/jj_mac">wrapper script</a>, <a href="https://github.com/opscode-cookbooks/homebrew">homebrew</a>, and <a href="http://jjasghar.github.io/blog/2013/08/02/adventures-with-chef-solo/">chef-solo</a>, why oh why didn&rsquo;t I do this originally.</p>

<p>(I pinged Fletcher Nichol about getting test-kitchen working with OSX, he sent me a gist on how to get it working, as of writing this I haven&rsquo;t attempted it yet, but hellz yes I&rsquo;m gonna kitchen this bitch up very very soon.)</p>

<p>I had some trouble with <a href="http://rvm.io">rvm</a>, automating the install was a bit tricky, but breaking it up into different <code>execute</code> and <code>bash</code> blocks allowed for solidarity. After that hooking up the <a href="https://github.com/opscode-cookbooks/dmg">dmg</a> cookbook and boom, I have my <a href="https://github.com/jjasghar/provision_mac">mac provisioning</a> system.</p>

<p>Take a look, I&rsquo;m honestly curious on what people think. Oh, take out the <code>repo.rb</code> though, it&rsquo;s specific to my company.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A chef error that has haunted me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/20/a-chef-error-that-has-haunted-me/"/>
    <updated>2014-01-20T15:42:33-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/20/a-chef-error-that-has-haunted-me</id>
    <content type="html"><![CDATA[<p>Ok, you may have seen this before:
<code>ruby
23.987.33.854   * cookbook_file[/etc/init.d/apache2] action create
23.987.33.854 ================================================================================
23.987.33.854 Error executing action `create` on resource 'cookbook_file[/etc/init.d/apache2]'
23.987.33.854 ================================================================================
23.987.33.854
23.987.33.854
23.987.33.854 Net::HTTPServerException
23.987.33.854 ------------------------
23.987.33.854 403 "Forbidden"
23.987.33.854
23.987.33.854
</code></p>

<p>NOTE: Yes, that is a fake ip, and yes that server Exception isn&rsquo;t tied just to apache2.</p>

<p>If you have, you know my pain.  Turns out there is a <a href="https://tickets.opscode.com/browse/CHEF-4253">ticket</a> on this and also a couple <a href="http://sanketdangi.com/post/50897416859/chef-errors-and-their-solutions">blog posts</a> also.</p>

<p>The gist of this:</p>

<blockquote><p>This error is encountered when we have large chef recipes whose deployment time on clients is large than 15 minutes. In order to avoid this error, please increase “s3_url_ttl" value from 900 seconds to required time interval</p></blockquote>

<p>So the fix is:
```bash
[~] % sudo vim /etc/chef-server/chef-server.rb</p>

<h1>add this line: erchef[‘s3_url_ttl’] = 900 where 900 is something larger&hellip;maybe 1800?</h1>

<p>[~] % sudo chef-server-ctl reconfigure
```</p>

<p>Boom, you should be good now. No more damn 403s.</p>

<h1>Update!</h1>

<p>So it seems that with release of <code>11.10</code> the 403 error has&hellip;morphed. Now it looks something like:
```</p>

<h2>Chef::Exceptions::ContentLengthMismatch</h2>

<p>Response body length 164 does not match HTTP Content-Length header 206.
```</p>

<p>I have a post about it from 2014-03-19</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Because googling failed me for yes or no bash scripting]]></title>
    <link href="http://jjasghar.github.io/blog/2014/01/18/because-googling-failed-me-for-yes-or-no-bash-scripting/"/>
    <updated>2014-01-18T14:01:51-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/01/18/because-googling-failed-me-for-yes-or-no-bash-scripting</id>
    <content type="html"><![CDATA[<p>So I was lazy, like all good sysadmins&hellip;I wanted to put in an option to say &ldquo;yes or no&rdquo; in a bash script.</p>

<p>I started with a simple <code>if..then..elif..else</code> statement, then I started googling around and found multiple ways to do it.</p>

<p>I ran the script a couple times, it worked like a charm, but without thinking about it I put <code>y</code> instead of the suggested <code>yes</code> and it <code>exit 1</code>ed me.  Do'h!</p>

<p>I continued googling around and then remembered the <code>case</code> statement.</p>

<p>I created this:
```bash</p>

<h1>!/bin/bash</h1>

<p>read -p &ldquo;yes or no: &rdquo; RESPONSE</p>

<p>case &ldquo;$RESPONSE&rdquo; in
  yes|y|Yes|Y)</p>

<pre><code>echo "blah is yes"
;;
</code></pre>

<p>  no|n|No|N)</p>

<pre><code>echo "blah is no"
;;
</code></pre>

<p>  *)</p>

<pre><code>echo "You need to say yes or no, start over!"
exit 1
;;
</code></pre>

<p>esac
```
Now you are probably wondering why I even bothered posting this. Honestly, I spent way too much time on this and I figured I&rsquo;ll find myself looking for this again 6+ months down the line.</p>

<p>Hopefully this post will save you some time in the future.</p>
]]></content>
  </entry>
  
</feed>
