<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2015-08-16T15:25:28-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bazaar usage from a git user]]></title>
    <link href="http://jjasghar.github.io/blog/2015/03/16/bazaar-usage-from-a-git-user/"/>
    <updated>2015-03-16T12:16:07-05:00</updated>
    <id>http://jjasghar.github.io/blog/2015/03/16/bazaar-usage-from-a-git-user</id>
    <content type="html"><![CDATA[<p>I love git. Honestly, I really do, hell I even have a sticker on my laptop.
Unfortunately <a href="http://canonical.com">Canonical</a> choose something different
called <a href="http://bazaar.canonical.com/en/">bazaar</a>. It&rsquo;s supposed to be easier,
the jury is still out on that for my opinion; but it really is a tad bit different.</p>

<p>I&rsquo;m putting a collection of commands here, so if you decided you&rsquo;d like to put in
a &ldquo;PR&rdquo; or in <a href="https://launchpad.net/">launchpad</a>&rsquo;s term &ldquo;Propose for merging&rdquo; merge.</p>

<p>Lets say you&rsquo;ve found a typo and you&rsquo;d like to fix it; something like <a href="https://code.launchpad.net/~d-jj/ironic/ironic-conductor/+merge/253085">this</a>.</p>

<p>These steps assume you have a <a href="https://login.launchpad.net/+login">launchpad id</a> and account set up correctly, and all you
want to do is push up a change to an issue you&rsquo;ve found.</p>

<p>First be sure to login to launchpad:</p>

<p><code>bash
~ &gt; bzr launchpad-login &lt;username&gt;
</code></p>

<p>Then you clone down the code locally with this, NOTE: ubuntu/ironic can be anything on launchpad.</p>

<p><code>bash
~ &gt; bzr branch lp:ubuntu/ironic
</code></p>

<p>Then <code>checkout</code> the repo into a branch you can work on, NOTE: ironic-conductor will create a directory you will work in</p>

<p><code>bash
~ &gt; bzr checkout lp:ubuntu/ironic ironic-conductor
</code></p>

<p>Then you need to &lsquo;link&rsquo; the local working directory with your launchpad account, NOTE: this&rsquo;ll push up the initial branch to launchpad.</p>

<p><code>bash
~ &gt; cd ironic-conductor
ironic-conductor &gt; bzr branch --stacked --switch lp:ubuntu/ironic lp:~d-jj/ironic/ironic-conductor
</code></p>

<p>Make your changes!</p>

<p><code>bash
ironic-conductor &gt; # I'm doing awesome changes now, rm -rf my_file and blah blah blah
</code></p>

<p>Sanity check your changes:</p>

<p><code>bash
ironic-conductor &gt; bzr diff
</code></p>

<p>Yep, looks good, lets commit:</p>

<p><code>bash
ironic-conductor &gt; bzr commit -m "I did some amazing changes and this is that commit"
</code></p>

<p>If everything goes to plan you should see something like:
<code>
Most recent Ubuntu version: 2015.1~b2-0ubuntu1
Packaging branch status: CURRENT
Committing to: bzr+ssh://bazaar.launchpad.net/~d-jj/ironic/ironic-conductor/
modified debian/ironic-conductor.init.in
Committed revision 14.
</code></p>

<p>Ok, so now if you go to your launchpad you should see the push, now go to the project and click that
<code>Propose for merging</code> link.</p>

<p>Under &ldquo;Target Branch&rdquo; place the active branch under development, also add a note to the &ldquo;Description of Change&rdquo;
so you have a blurb on what it does. Click &ldquo;Propose Merge.&rdquo;</p>

<p>I&rsquo;ve found that I constantly get it backwards, so be wary of that; you may have to re-propose the merge if the
diffs look wrong. You can do this from the page after the &ldquo;Propose Merge.&rdquo; If someone figures out how to get it
right the first time please ping me: @jjasghar on twitter, I&rsquo;d love to see the &ldquo;correct&rdquo; way to do this.</p>

<p>Also for that matter, I couldn&rsquo;t figure out a way to do this without using the site, there&rsquo;s gotta be a CLI
only version of this.</p>

<p>Here are some links I looked at I was figuring this out:</p>

<ol>
<li><a href="http://stackoverflow.com/questions/5043104/step-by-step-bazaar-workflow">http://stackoverflow.com/questions/5043104/step-by-step-bazaar-workflow</a></li>
<li><a href="https://oxygene.sk/2009/10/working-with-branches-in-bazaar/">https://oxygene.sk/2009/10/working-with-branches-in-bazaar/</a></li>
<li><a href="http://askubuntu.com/questions/13547/how-to-create-a-personal-branch-in-launchpad">http://askubuntu.com/questions/13547/how-to-create-a-personal-branch-in-launchpad</a></li>
<li><a href="http://askubuntu.com/questions/93859/what-is-bazaar-and-how-do-i-use-it">http://askubuntu.com/questions/93859/what-is-bazaar-and-how-do-i-use-it</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git rebase and git detached head cheat sheet]]></title>
    <link href="http://jjasghar.github.io/blog/2014/10/13/git-rebase-and-git-detached-head-cheat-sheet/"/>
    <updated>2014-10-13T15:19:30-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/10/13/git-rebase-and-git-detached-head-cheat-sheet</id>
    <content type="html"><![CDATA[<h2>git rebasing or fixing an auto merge conflict</h2>

<p>In my adventures with openstack and gerrit reviews I sometimes see something to the effect of: <em>Patch in Merge Conflict</em></p>

<p>This makes me very sad. I hate these things, and to quote Mark Vanderwiel, it&rsquo;s basically like someone snuck in a change before you.</p>

<p>We had a great conversation about it <a href="http://youtu.be/wsWj_NQJKI0?t=3m50s">here</a> for about 3 mins, but if you want a tl;dw (watch) it&rsquo;s this:
<code>bash
$ git remote update
$ git checkout master
$ git pull
$ git checkout $BRANCH_THAT_YOUR_FIXING
$ git rebase master
$ # Fix any conflicts that should pop up
$ git add $ANY_CONFLICTS
$ git rebase --continue
$ git commit --amend
$ git review -R
</code>
It looks like a lot, but all in all not bad at all. The rebasing might look scary but walk through each conflict, edit it and add it back you should be fine.</p>

<h2>Detached head what the hell does that mean?</h2>

<p>If you continue watching that video we start to talk about detached heads. If you have played in the openstack/gerrit world you&rsquo;ll notice a copy paste off a review by download, something like:
<code>bash
$ git fetch https://review.openstack.org/stackforge/cookbook-openstack-client refs/changes/65/126365/9 &amp;&amp; git checkout FETCH_HEAD
</code>
Needless to say this is confusing as all hell. Not to mention when you finish it is says something like:</p>

<p>```bash
You are in &lsquo;detached HEAD&rsquo; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.</p>

<p>If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:</p>

<p>  git checkout -b new_branch_name</p>

<p>HEAD is now at 789cb70&hellip; Initial Commit of the cookbook-openstack-client
```</p>

<p>Seriously what the hell does this mean? Luckily it&rsquo;s actually not a bad thing at all. If you watch from <a href="http://youtu.be/wsWj_NQJKI0?t=8m10s">here</a> for about 2 minutes you&rsquo;ll see us talk about it. The short of it is, you&rsquo;ve pulled down the patch, but it&rsquo;s not attached (detached) to your local master/other branch. When you do the <code>git checkout -b branch_name</code> off of master/other branch, it connects it up so it&rsquo;s no longer detached.</p>

<p>After saying it out loud, or typing it out as i just did, it makes sense, but surprisingly no one ever told me such a simple concept. I hope this helps someone down the line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking active branch in multiple repos]]></title>
    <link href="http://jjasghar.github.io/blog/2014/09/25/checking-active-branche-in-multiple-repos/"/>
    <updated>2014-09-25T14:35:07-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/09/25/checking-active-branche-in-multiple-repos</id>
    <content type="html"><![CDATA[<p>I have a bunch of <a href="https://github.com/stackforge/?query=cookbook-openstack">repos</a> that I have to watch over and make patches against.
Trying to figure out what branch I left checked out can be&hellip;well frustrating.
I put all my <a href="http://www.openstack.org">openstack</a> repos in a sub directory from my standard <code>~/repo/</code> directory. I wanted to figure out a way to check all the active branches that I had  checked out; and it turns out that it was hellva a lot more challanging that expected.</p>

<p>As a sysadmin, you probably say ok, <code>git branch | awk '/\*/ { print $2; }'</code> seems ok, but man that&rsquo;s a bitch to write.</p>

<p>Leveraging a little bit of googling <code>git rev-parse --abbrev-ref HEAD</code> appeared which does the exact same. Odd that there
isn&rsquo;t easier command.</p>

<p>So putting it all together I come up with something like the following to tell me what the active branch is for each of
my repos. This is a quick one liner that does the trick for me.</p>

<p><code>bash
for i in *; do cd $i ; pwd; git rev-parse --abbrev-ref HEAD ; cd ../ ; done
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning git realizing that I know nothing]]></title>
    <link href="http://jjasghar.github.io/blog/2013/12/17/learning-git-realizing-that-i-know-nothing/"/>
    <updated>2013-12-17T13:56:00-06:00</updated>
    <id>http://jjasghar.github.io/blog/2013/12/17/learning-git-realizing-that-i-know-nothing</id>
    <content type="html"><![CDATA[<p>So as with all modern day &ldquo;DevOps&rdquo; guys I use a SCM [<a href="http://en.wikipedia.org/wiki/Source_Control_Management">Source Control Management</a>] system on a daily if not hourly basis.  I&rsquo;ve been attempting to learn it more and more, and I came across this video from the <a href="http://reddit.com/r/git">/r/git</a> subreddit and I don&rsquo;t think I&rsquo;ve ever seen a better explanation. It&rsquo;s called <em>Git for Ages 4 and Up</em>.</p>

<p><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/1ffBJ4sVUb4 "></iframe></div></p>

<p>I strongly suggest taking the 99ish mins to watch it, it&rsquo;s a great tutorial, with great visual examples.</p>

<p>I&rsquo;ve also stolen some aliases that he suggests!
<code>bash
alias glp="git log --graph --pretty --all"
alias gld="git log --graph --decorate --all"
</code></p>

<p>Some useful notes that this video helped clear up for me:</p>

<p>Something else that finally cleared up to me <code>origin/master</code> means a label, while <code>origin master</code> means the remote origin with the label of master on it&rsquo;s remote side. This works with <code>origin/bugfix</code> and <code>origin bugfix</code> also, it&rsquo;s just unfortunate that the master is used twice is a very similar context.</p>

<p><code>git merge master</code> merges master into the current branch you have checked out. <code>git merge origin/master</code> merges the upstream changes of master into your current branch. <code>git merge master bugfix</code> merges the master branch into bugfix explicitly.</p>

<p><code>git push --set-upstream (or -u) origin bugfix</code> sets the upstream branch on origin to bugfix, if from your local repo.</p>

<p><code>refs/head/blah</code> is a fancy way of saying <code>blah</code> is the branch.</p>

<p><code>git push origin --tags</code> to push your tags on the local repo to the origin</p>

<p>A detached HEAD isn&rsquo;t a bad thing; it just means there&rsquo;s no branch associated with it. It&rsquo;s good to check things out but you can always <code>git checkout -b &lt;branch_name&gt;</code> if needed.</p>

<p><code>git rebase -i HEAD^^</code> go back to rebase 2 commits; rebase goes bottom up, to squash up to the top one.</p>

<p><code>rebase</code> creates a <em>new</em> line of history, not REWRITES history.</p>

<p>Once you&rsquo;ve pushed, never rebase; it&rsquo;s not worth it. :(</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hub workflow]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/31/hub-workflow/"/>
    <updated>2013-10-31T11:01:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/31/hub-workflow</id>
    <content type="html"><![CDATA[<p>I recently discovered <a href="https://github.com/github/hub">hub</a> and man this is really really cool. I&rsquo;m starting to fork out projects and making PRs, but it seems that when I attempt to use <code>hub pull-request</code> I get this error:
<code>bash
[~/repo/learning_git/fakedir1] % hub pull-request
Error creating pull request: Unprocessable Entity (HTTP 422)
Missing field: "head_sha"
Missing field: "base_sha"
No commits between jjasghar:master and jjasghar:blah
</code>
WTF man? What the hell does this mean? It seems I wasn&rsquo;t the only one that had this <a href="https://github.com/github/hub/issues/189">problem</a>.  It seems that the work flow (at least in my case) was the problem. Here&rsquo;s a quick fix to be able to open up a PR off a forked branch:
<code>bash
[~/repo/learning_git/fakedir1] % git add some_file
[~/repo/learning_git/fakedir1] % git commit -m "blah"
[~/repo/learning_git/fakedir1] % git push -u origin blah
Counting objects: 7, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (4/4), 351 bytes | 0 bytes/s, done.
Total 4 (delta 2), reused 0 (delta 0)
To git@github.com:jjasghar/learning_git.git
   5224edf..88ad1af  blah -&gt; blah
Branch blah set up to track remote branch blah from origin.
[~/repo/learning_git/fakedir1] % hub pull-request
https://github.com/jjasghar/learning_git/pull/1
</code>
Pretty slick eh?</p>

<p>Bonus round you can attach your PR to an issue!
<code>bash
[~/repo/learning_git/fakedir1] % hub pull-request -i 3
</code></p>
]]></content>
  </entry>
  
</feed>
