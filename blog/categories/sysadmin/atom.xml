<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: sysadmin | jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/blog/categories/sysadmin/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2013-10-16T12:45:28-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Checking CPU WAIT via nagios]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/16/checking-cpu-wait-via-nagios/"/>
    <updated>2013-10-16T11:11:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/16/checking-cpu-wait-via-nagios</id>
    <content type="html"><![CDATA[<p>So our machines swap&hellip;.swap alot. There are the  typical nagios system checks, you can have the <code>check_swap</code> call, but at my company the &lt; 20 % hits so often we needed to figure out a way to get warned about crippling proformance. We discovered that when a machine has CPU WAIT spikes, the proformance for the machine tanks, so I tried to find a check for specificly monitor the CPU WAIT.  I should mention also that most/all of the boxes we run are VMs, and waiting on IO for swap makes a sad sysadmin.</p>

<p>I took a stab at creating a check myself and the following is a simple nagios check that you can run via NRPE.  The <code>PERCENTAGE</code> line is changeable, I&rsquo;d make sure your alarm reflects your error cases. We choose 10 % because that&rsquo;s when we started seeing real prefomance issues, but as all sysadmins know any CPU WAIT is bad in general.</p>

<p>```bash</p>

<h1>!/bin/bash</h1>

<p>stateid=
CPUWAIT=<code>top -b -n 1| grep 'wa,' | awk -F ',' {'print $5'} | cut -d . -f 1 | tr -d ' '</code>
PERCENTAGE=10</p>

<p>if [ ${CPUWAIT} -le ${PERCENTAGE} ]
 then
   echo Your CPU WAIT is under ${PERCENTAGE}%
   stateid=0
elif [ ${CPUWAIT} -ge ${PERCENTAGE} ]
 then
   echo Your CPU WAIT is at ${CPUWAIT}%, your machine aint happy
   stateid=2
 fi
exit $stateid
```</p>

<p>You are probably wondering &ldquo;There are alot of great systems checks on <a href="http://exchange.nagios.org/">Nagios Exchange</a>,&rdquo; but the site is so hard to use and useally much more than I need, like in this case.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to fix https://chef defaulting running chef client on open source chef server]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server/"/>
    <updated>2013-10-05T16:59:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-fix-https-slash-slash-chef-defaulting-running-chef-client-on-open-source-chef-server</id>
    <content type="html"><![CDATA[<p>I went to #chef on freenode and maek helped me out.  Here’s a run down of how to fix it. Alas the gists are gone; sorry. :(</p>

<p>If you play with open source chef you might run into this.</p>

<p><code>
18:42 j^2 so i’m having trouble with chef-client
18:42 j^2 why does it default to https://chef/blahblah?
18:43 j^2 example:
18:43 j^2 https://gist.github.com/jjasghar/5873e421a7f8365194e3
18:44 j^2 any advice?
18:44 j^2 i guess i could add it to /etc/hosts, but i’d like it to use the chef_server_url is that the point of it?
18:45 maek j^2:  I just got hit with this also
18:45 maek i think becuase chef 11 is now fronted with nginx
18:45 maek its doing a rewrite
18:45 maek for the name configured in nginx
18:45 maek in this case its hostname
18:45 maek but i assume that box cant resolve chef
18:46 j^2 lame
18:46 maek j^2:  I had to end up adding a hosts entry
18:46 maek while I wait for dns
18:46 maek I think you could do
18:46 j^2 yeah that seems like the only option but it’s stuff dumb :(
18:47 maek you could reconfigure chef
18:47 maek to use its ip
18:47 maek instead of its hostname
18:47 j^2 tried the ip in chef_server_url didnt work either; wait you mean nginx?
18:48 @ssd7 maek: Re your question above. I believe you should be able to edit bookshelf[‘vip’] in your config and the run a reconfigure
18:48 maek i dont see it htought
18:48 j^2 oh!
18:48 maek default[‘chef_server’][‘bookshelf’][‘vip’] = node[‘fqdn’]
18:48 j^2 nice looking
18:48 maek yeah
18:48 maek there it is
</code></p>

<p>Or you can do this also, I believe this is how I fixed it myself.:</p>

<p><code>
18:48 maek so you can do
18:49 maek in /etc/chef-server/chef-server.rb
18:49 maek bookshelf[‘vip’] = ‘192.168.1.1’
18:50 j^2 yeah i dont thave that file. :(
18:50 maek and run chef-server-ctl reconfigure
18:50 j^2 ah cool
18:50 maek its for overrides
18:50 maek just make it
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to delete the cache in nagios]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/05/how-to-delete-the-cache-in-nagios/"/>
    <updated>2013-10-05T16:06:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/05/how-to-delete-the-cache-in-nagios</id>
    <content type="html"><![CDATA[<p>If you use the <a href="https://github.com/opscode-cookbooks/nagios">nagios cookbook</a>, and you have multiple disposable machines checking in and out of your chef-server, you might notice that running chef-client to pull new machines into nagios doesn&rsquo;t always work.  For a time my company had anything ranging from 4 to 8 machines spinning up and down, so I had to basically run chef-client on a 30 min interval to make sure I got them all. I discovered that my new machines weren&rsquo;t showing up, so I had to figure out how to &ldquo;clear the cache&rdquo; if you will.</p>

<p>Now this this is specific to  the nagios setup I have, but the <code>objects.cache</code> is what controls this.</p>

<p><code>bash
root@boe:/tmp# rm /var/cache/nagios3/objects.cache
root@boe:/tmp# service nagios restart
Running configuration check…done.
Stopping nagios: .done.
Starting nagios: done.
root@boe:/tmp# cd /var/cache/nagios3
root@boe:/var/cache/nagios3# ls
objects.cache  status.dat
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving from one chef to multiple chefs]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/04/moving-from-one-chef-to-multiple-chefs/"/>
    <updated>2013-10-04T14:00:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/04/moving-from-one-chef-to-multiple-chefs</id>
    <content type="html"><![CDATA[<p>There&rsquo;s a organic growth of a Ops team using chef goes through.  You start out with a <code>chef_repo</code> then you post it to github/some DVCS.  From there you tell people to clone it down and put PRs against it. From there you attempt to be a gate keeper, looking at the commits in the log, realizing that there is no match ups. From there you say to yourself &ldquo;Hey, ok, these guys are pretty smart, as long as I spot check, they should be able to merge things in and I can trust them right?&rdquo; NO you are lying to yourself you just don&rsquo;t realize it yet.</p>

<p>Wait for that one day that you think you have the newest cookbook and you bump the version, add your changes and you upload, and push&hellip;and nothing happens. Oh I&rsquo;m 2x behind where I thought great, bump and push. Oh&hellip;it seems there was a critical fix in that one that I didnt get for that exact cookbook I uploaded&hellip;crap. (And other situations like this can pop up.)</p>

<p>So, I pinged <a href="https://twitter.com/nathenharvey">Nathen Harvey</a> at Opscode asking for some guidance, he suggested <a href="https://github.com/jonlives/knife-spork">knife-spork</a>.  So far with my initial tests it looks like it is the correct answer,  so I&rsquo;m also writing this as a HOWTO for my company so this is just a run down of how to use it. (A cheatsheet to the README.md if you will.)</p>

<h2>Installation</h2>

<p>Obviously the first thing you need to do is install it. Luckily it&rsquo;s a gem so you can just do the following. If you read the docs there are a bunch of places that you <code>.yml</code> gets read from, but I chose this because I like having all my chef stuff in <code>.chef</code> so I don&rsquo;t have to think about pulling anything other than <code>.chef</code> if I want to move boxes.</p>

<p><code>bash
gem install knife-spork
touch ~/.chef/spork-config.yml
</code></p>

<p>After installing the gem and touching the file, you can run <code>knife spork info</code>, it should say everything is disabled.  If so, then you are read to create the config file.</p>

<p>The example <a href="https://raw.github.com/jonlives/knife-spork/master/README.md">config</a> is on the main site, but I copied the demo one here too.</p>

<p>```yaml
default_environments:
  &ndash; development
  &ndash; production
environment_groups:
  qa_group:</p>

<pre><code>- quality_assurance
- staging
</code></pre>

<p>  test_group:</p>

<pre><code>- user_testing
- acceptance_testing
</code></pre>

<p>version_change_threshold: 2
environment_path: &ldquo;/home/me/environments&rdquo;
plugins:
  campfire:</p>

<pre><code>account: myaccount
token: a1b2c3d4...
</code></pre>

<p>  hipchat:</p>

<pre><code>api_token: ABC123
rooms:
  - General
  - Web Operations
notify: true
color: yellow
</code></pre>

<p>  jabber:</p>

<pre><code>username: YOURUSER
password: YOURPASSWORD
nickname: Chef Bot
server_name: your.jabberserver.com
server_port: 5222
rooms:
  - engineering@your.conference.com/spork
  - systems@your.conference.com/spork
</code></pre>

<p>  git:</p>

<pre><code>enabled: true
</code></pre>

<p>  irccat:</p>

<pre><code>server: irccat.mydomain.com
port: 12345
gist: "/usr/bin/gist"
channel: ["chef-annoucements"]
</code></pre>

<p>  graphite:</p>

<pre><code>server: graphite.mydomain.com
port: 2003
</code></pre>

<p>  eventinator:</p>

<pre><code>url: http://eventinator.mydomain.com/events/oneshot
</code></pre>

<p>```</p>

<p>All in all this seems pretty self <a href="https://github.com/jonlives/knife-spork#default-environments">explanatory</a> but the most important things to change are <code>environment_path</code> and disabling the plugins (by removing them) here.  For my company I only used the git plugin and&hellip;well that was it. :)</p>

<p>By the way there are only a few plugins, <a href="https://github.com/jonlives/knife-spork/tree/master/plugins">here</a> is a link to the different .md files on each.</p>

<p>Ok, so you have everything set up, what do you do now?</p>

<h2>Usage</h2>

<p>The first step is to run <code>knife spork check COOKBOOK --all</code> where COOKBOOK is one of your commonly updated/tweaked cookbooks.  Spork checks against what you have locally compared to what&rsquo;s in the server, like this:</p>

<p><code>
knife spork check COOKBOOK --all
</code></p>

<p>Here&rsquo;s an example:
```bash
Checking versions for cookbook nagios&hellip;</p>

<p>Local Version:
  5.1.5</p>

<p>Remote Versions: (* indicates frozen)
  5.1.5
  5.1.4
  5.1.3
  5.1.2</p>

<p>ERROR: The version 5.1.5 exists on the server and is not frozen. Uploading will overwrite!
```</p>

<p>As you can see with the error, it&rsquo;s pretty self explaintory.</p>

<p>The second step is to bump the version:
<code>bash
knife spork bump nagios patch
Git: Pulling latest changes from /Users/jasghar/repo/chef_repo/environments
Pulling latest changes from git submodules (if any)
Git: Pulling latest changes from /Users/jasghar/repo/chef_repo/cookbooks/nagios
Pulling latest changes from git submodules (if any)
Successfully bumped nagios to v5.1.6!
</code></p>

<p>Now as you can see I have the git plugin working, and it without thinking about it, updates the metadata.rb so you don&rsquo;t have to. (I HATE that part of chef, I always forget.) Now you can go off make your changes.</p>

<p>From here you&rsquo;re happy, you&rsquo;ve commited your new <code>chef_repo</code> back to the DVCS that you use.  This is where the magic happens: <code>knife spork upload COOKBOOK</code>.  This thing is great, it (to quote the <code>README.md</code>) <em>This function works mostly the same as normal knife cookbook upload COOKBOOK except that this automatically freezes cookbooks when you upload them.</em> Which is the bread and butter of spork.  The freezing is crazy important, by freezing the upload you take &ldquo;ownership&rdquo; of that version of the cookbook.  Your changes are yours, and no-one can mess with them.  So in turn you don&rsquo;t step on your coworkers toes and he doesen&rsquo;t step on yours.</p>

<p>Ok, so this was the cheatsheet, we have implymented this at my company now, so hopefully this goes great. If not&hellip;well that&rsquo;s a different conversation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adventures migrating from 2.4.16 redis to 2.6.16 redis (Part 2)]]></title>
    <link href="http://jjasghar.github.io/blog/2013/10/01/adventures-migrating-from-2-dot-4-16-redis-to-2-dot-6-16-redis-part-2/"/>
    <updated>2013-10-01T18:11:00-05:00</updated>
    <id>http://jjasghar.github.io/blog/2013/10/01/adventures-migrating-from-2-dot-4-16-redis-to-2-dot-6-16-redis-part-2</id>
    <content type="html"><![CDATA[<h1>Monitoring</h1>

<p>Everyone loves monitoring. Ok, that&rsquo;s a lie, only [DevOps|Sysadmins] love monitoring. Ok, that&rsquo;s probably a lie too, hell I love monitoring, and I love nagios.  I&rsquo;ve followed used nagios in some shape or another since nagios-1.0b6. My first real paid job as an &ldquo;IT guy&rdquo; was setting up nagios for a company.  I&rsquo;ve actually gotten in the habit of walking into a new company using <a href="http://jjasghar.github.io/blog/2013/07/12/serverspec-the-new-best-way-to-learn-and-audit-your-infrastructure/">serverspec</a>, to learn what each machine does, then implementing nagios behind the serverspec scripts for a proactive monitoring on error conditions. This might seem redundant, but I don&rsquo;t think so. serverspec is great for spot checking, while nagios gives the best &ldquo;state of the union&rdquo; snapshot. Granted a lot of the time creating these checks are reactive, but sometimes like here, I wrote some proactive monitoring because I know there are certain error conditions on the slaves I&rsquo;ve spun up.</p>

<p>I use nrpe to monitor my machines, and I set up my <code>nrpe.cfg</code> to something like the following. I use chef, so the <code>&lt;%= node['hostname'] %&gt;</code> is from <a href="https://github.com/opscode/ohai">ohai</a>.</p>

<p><code>ini
command[check_redisserver]=/usr/lib/nagios/plugins/check_procs -c 1:1 -C redis-server
command[check_redis_replication]=/usr/lib/nagios/plugins/check_redis_replication -h &lt;%= node['hostname'] %&gt; -w 20 -c 45
command[check_redis_rdb_age]=/usr/lib/nagios/plugins/check_redis_rdb_age &lt;%= node['hostname'] %&gt;
</code></p>

<p>The first line is pretty self explanatory.  Obviously I&rsquo;d like to check that redis is running, and that&rsquo;s what it does.</p>

<p>The second line is where I started creating the new monitoring.  I have all my monitors right now at a 3 strike out rule, I have played with the idea of tweaking it, but it seems 3 strikes then an email seems to cut down on the noise I get.</p>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>require &lsquo;optparse&rsquo;
options  = {}
required = [:warning, :critical, :host]</p>

<p>parser   = OptionParser.new do |opts|</p>

<pre><code>opts.banner = "Usage: check_redis_replication [options]"
  opts.on("-h", "--host redishost", "The hostname of the redis slave") do |h|
    options[:host] = h
  end
  opts.on("-w", "--warning percentage", "Warning threshold") do |w|
    options[:warning] = w
  end
  opts.on("-c", "--critical critical", "Critical threshold") do |c|
    options[:critical] = c
 end
</code></pre>

<p>end
parser.parse!
abort parser.to_s if !required.all? { |k| options.has_key?(k) }</p>

<p>master_last_io_seconds_ago = <code>/opt/redis/bin/redis-cli info | grep master_last_io_seconds_ago</code>.split(&lsquo;:&rsquo;).last.to_i rescue -1</p>

<p>status = &ldquo;A-Ok!&rdquo;
if master_last_io_seconds_ago &lt; 0 || master_last_io_seconds_ago >= options[:critical].to_i
  status = :critical
elsif master_last_io_seconds_ago >= options[:warning].to_i
  status = :warning
end</p>

<p>status_detail = master_last_io_seconds_ago == -1 ? &lsquo;ERROR&rsquo; : &ldquo;#{ master_last_io_seconds_ago.to_s }s&rdquo;
puts &ldquo;#{status.to_s.upcase} &ndash; replication lag: #{status_detail}&rdquo;</p>

<p>if status == :critical
  exit(2)
elsif status == :warning
  exit(1)
end
```</p>

<p>I stole this monitor from <a href="http://blog.winfieldpeterson.com/2012/12/13/monitoring-redis-replication-in-nagios/">here</a> but as you can tell the <code>redis-cli</code> is edited and the default status too.  <a href="https://twitter.com/miah_">Miah</a>&rsquo;s <a href="https://github.com/miah/chef-redis">cookbook</a> is great, works like a charm, but it puts the <code>redis-cli</code> in <code>/opt/redis/bin/</code>.</p>

<p>As a side note: I even put in a <a href="https://github.com/miah/chef-redis/pull/55">PR</a> to update to 2.6.16, because of this project.  I ran all the <a href="https://github.com/opscode/test-kitchen">test-kitchen</a> tests and it passed like a charm.  I actually learned about <a href="https://github.com/sstephenson/bats">bats</a> in the process, and honestly I&rsquo;m pretty damn impressed with something so straight forward.  Because serverspec fulfills my requirements at the moment, I don&rsquo;t have to use it; but I like the idea of having it in my back pocket.  The replication between master and slave seems extremely important, so this monitor has been a god sent.  I never have seen it spike over 45 seconds, but then the next check pop back to &lt;3 seconds.</p>

<p>The second monitor I wrote was this:
```bash</p>

<h1>!/bin/bash</h1>

<p>stateid=
LAST_SYNC_HUMAN=<code>/opt/redis/bin/redis-cli -h $1 info | grep rdb_last_save_time | awk -F : {'print $2'} | xargs -I {} date -d @{}</code>
LAST_SYNC=<code>/opt/redis/bin/redis-cli -h $1 info | grep rdb_last_save_time | awk -F : {'print $2'} | tr -d '\r'</code>
LAST_15MIN=<code>date -d '15 minutes ago' +%s</code>
LAST_20MIN=<code>date -d '20 minutes ago' +%s</code></p>

<p>if [ &ldquo;${LAST_15MIN}&rdquo; -lt &ldquo;${LAST_SYNC}&rdquo; ];
  then
  echo Sync has happened in the last 15 mins or less at ${LAST_SYNC_HUMAN}
  stateid=0
elif [ &ldquo;${LAST_15MIN}&rdquo; -ge &ldquo;${LAST_SYNC}&rdquo; ] &amp;&amp; [ &ldquo;${LAST_20MIN}&rdquo; -lt &ldquo;${LAST_SYNC}&rdquo; ];
  then
  echo Sync happened a little longer than we would like, the last at ${LAST_SYNC_HUMAN}
  stateid=1
elif [ &ldquo;${LAST_20MIN}&rdquo; -ge &ldquo;${LAST_SYNC}&rdquo; ];
  then
  echo Sync took over 20 mins, something might be wrong, the last sync happened at ${LAST_SYNC_HUMAN}
  stateid=2
fi
exit $stateid
```
This monitor I took from my typical <a href="https://github.com/jjasghar/scripts/blob/master/nagios_check_generic_template.sh">bash nagios template</a> and added the error states.  It seems like the .rdb file should always be in &ldquo;close&rdquo; proximity to the last write of to slave, and it would be nice to be alarmed about it if it went out of wack.  From what I&rsquo;ve seen it&rsquo;s never more than 1 or 2 minutes behind; so this worked out.  Writing a monitor for something and never seeing it fire till there is a real problem, that&rsquo;s a great place to be in.</p>

<h2>Non-nagios monitoring</h2>

<p>I started looking around for some type of dashboard to get some visual data about the redis instance.  It turns out there is a TON of these bastards, from a paid product like <a href="https://scoutapp.com/plugin_urls/271-redis-monitoring">Scout</a> to <a href="https://github.com/junegunn/redis-stat">redis-stat</a>.  I picked redis-stat because well, it&rsquo;s un-intrusive and fast.  I have it polling against my master slave on two instances of the gem running, and it&rsquo;s really nice to have a easily digestible view of the health of it.  I have noticed that it has doubled up the info because of the syncing, so be warned, you probably should run it via just the master and then maybe put all the slaves on one? (I&rsquo;m still trying to figure this one out.)</p>

<p>If you do read this and have good suggestions please through them my <a href="http://jjasghar.github.io/about/">way</a>, the <code>INFO</code> command gives you a lot of data, and redis-stat doesn&rsquo;t store anything so treading over time isn&rsquo;t an option. I was thinking about putting some of this data in ganglia, (another favorite of mine) but to have something just redis focused seems like the correct move here.</p>

<hr />

<p>So, so far these is the monitors that I&rsquo;m using for my new master slave set up.  My next challenge is creating the VIP in front of the master slave, and have a &ldquo;hot fail over.&rdquo; This is going to require some pretty interesting engineering; it&rsquo;s fun, but man the more I think about it the more it hurts my brain.  So I haven&rsquo;t actually talked about the migration yet either.  From what I&rsquo;ve understood it seems that 2.4.16 is actually <em>inside</em> 2.6.16, so if I get this VIP in front of this master slave then fail over to the slave turning off the read-only, this should be seamless. I need to do some testing; but that seems like the best course of action. For just the migration though, the &ldquo;hot fail over&rdquo; isn&rsquo;t required, but I want it to be in the fore-front of the design because I&rsquo;d rather be additive than have to rip out everything after we get up dated.</p>
]]></content>
  </entry>
  
</feed>
