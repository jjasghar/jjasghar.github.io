<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jjasghar rants and ramblings]]></title>
  <link href="http://jjasghar.github.io/atom.xml" rel="self"/>
  <link href="http://jjasghar.github.io/"/>
  <updated>2015-03-16T13:26:21-05:00</updated>
  <id>http://jjasghar.github.io/</id>
  <author>
    <name><![CDATA[JJ Asghar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bazaar Usage From a Git User]]></title>
    <link href="http://jjasghar.github.io/blog/2015/03/16/bazaar-usage-from-a-git-user/"/>
    <updated>2015-03-16T12:16:07-05:00</updated>
    <id>http://jjasghar.github.io/blog/2015/03/16/bazaar-usage-from-a-git-user</id>
    <content type="html"><![CDATA[<p>I love git. Honestly, I really do, hell I even have a sticker on my laptop.
Unfortunately <a href="http://canonical.com">Canonical</a> choose something different
called <a href="http://bazaar.canonical.com/en/">bazaar</a>. It&rsquo;s supposed to be easier,
the jury is still out on that for my opinion; but it really is a tad bit different.</p>

<p>I&rsquo;m putting a collection of commands here, so if you decided you&rsquo;d like to put in
a &ldquo;PR&rdquo; or in <a href="https://launchpad.net/">launchpad</a>&rsquo;s term &ldquo;Propose for merging&rdquo; merge.</p>

<p>Lets say you&rsquo;ve found a typo and you&rsquo;d like to fix it; something like <a href="https://code.launchpad.net/~d-jj/ironic/ironic-conductor/+merge/253085">this</a>.</p>

<p>These steps assume you have a launchpad id and account set up correctly, and all you
want to do is push up a change to an issue you&rsquo;ve found.</p>

<p>First be sure to login to launchpad:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~ &gt; bzr launchpad-login &lt;username&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Then you clone down the code locally with this, NOTE: ubuntu/ironic can be anything on launchpad.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~ &gt; bzr branch lp:ubuntu/ironic
</span></code></pre></td></tr></table></div></figure>


<p>Then <code>checkout</code> the repo into a branch you can work on, NOTE: ironic-conductor will create a directory you will work in</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~ &gt; bzr checkout lp:ubuntu/ironic ironic-conductor
</span></code></pre></td></tr></table></div></figure>


<p>Then you need to &lsquo;link&rsquo; the local working directory with your launchpad account, NOTE: this&rsquo;ll push up the initial branch to launchpad.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>~ &gt; <span class="nb">cd </span>ironic-conductor
</span><span class='line'>ironic-conductor &gt; bzr branch --stacked --switch lp:ubuntu/ironic lp:~d-jj/ironic/ironic-conductor
</span></code></pre></td></tr></table></div></figure>


<p>Make your changes!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ironic-conductor &gt; <span class="c"># I&#39;m doing awesome changes now, rm -rf my_file and blah blah blah</span>
</span></code></pre></td></tr></table></div></figure>


<p>Sanity check your changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ironic-conductor &gt; bzr diff
</span></code></pre></td></tr></table></div></figure>


<p>Yep, looks good, lets commit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ironic-conductor &gt; bzr commit -m <span class="s2">&quot;I did some amazing changes and this is that commit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>If everything goes to plan you should see something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Most recent Ubuntu version: 2015.1~b2-0ubuntu1
</span><span class='line'>Packaging branch status: CURRENT
</span><span class='line'>Committing to: bzr+ssh://bazaar.launchpad.net/~d-jj/ironic/ironic-conductor/
</span><span class='line'>modified debian/ironic-conductor.init.in
</span><span class='line'>Committed revision 14.
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so now if you go to your launchpad you should see the push, now go to the project and click that
<code>Propose for merging</code> link.</p>

<p>Under &ldquo;Target Branch&rdquo; place the active branch under development, also add a note to the &ldquo;Description of Change&rdquo;
so you have a blurb on what it does. Click &ldquo;Propose Merge.&rdquo;</p>

<p>I&rsquo;ve found that I constantly get it backwards, so be wary of that; you may have to re-propose the merge if the
diffs look wrong. You can do this from the page after the &ldquo;Propose Merge.&rdquo; If someone figures out how to get it
right the first time please ping me: @jjasghar on twitter, I&rsquo;d love to see the &ldquo;correct&rdquo; way to do this.</p>

<p>Also for that matter, I couldn&rsquo;t figure out a way to do this without using the site, there&rsquo;s gotta be a CLI
only version of this.</p>

<p>Here are some links I looked at I was figuring this out:</p>

<ol>
<li><a href="http://stackoverflow.com/questions/5043104/step-by-step-bazaar-workflow">http://stackoverflow.com/questions/5043104/step-by-step-bazaar-workflow</a></li>
<li><a href="https://oxygene.sk/2009/10/working-with-branches-in-bazaar/">https://oxygene.sk/2009/10/working-with-branches-in-bazaar/</a></li>
<li><a href="http://askubuntu.com/questions/13547/how-to-create-a-personal-branch-in-launchpad">http://askubuntu.com/questions/13547/how-to-create-a-personal-branch-in-launchpad</a></li>
<li><a href="http://askubuntu.com/questions/93859/what-is-bazaar-and-how-do-i-use-it">http://askubuntu.com/questions/93859/what-is-bazaar-and-how-do-i-use-it</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Do I Create a Mac USB Boot Disk]]></title>
    <link href="http://jjasghar.github.io/blog/2015/01/07/how-do-i-create-a-mac-usb-boot-disk/"/>
    <updated>2015-01-07T10:23:55-06:00</updated>
    <id>http://jjasghar.github.io/blog/2015/01/07/how-do-i-create-a-mac-usb-boot-disk</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been installing Linux from my laptop on hardware for a while now. I can
never remember how to do it, so I keep googling for <a href="http://www.ubuntu.com/download/desktop/create-a-usb-stick-on-mac-osx">this</a>.
Being I like distilling information down to the more important parts, here is my
&ldquo;generic&rdquo; way of doing what is described in that link:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://some_iso_on_some_site/image.iso
</span><span class='line'><span class="nv">$ </span>hdiutil convert -format UDRW -o ~/path/to/target.img ~/path/to/image.iso
</span><span class='line'><span class="nv">$ </span>mv ~/path/to/target.img.dmg  ~/path/to/target.img
</span><span class='line'><span class="nv">$ </span><span class="c"># ideally you already have your flash drive inserted</span>
</span><span class='line'><span class="nv">$ </span>diskutil list
</span><span class='line'><span class="nv">$ </span>diskutil unmountDisk /dev/disk&lt;the_number_of_the_disk&gt;
</span><span class='line'><span class="nv">$ </span>sudo dd <span class="k">if</span><span class="o">=</span>/path/to/target.img <span class="nv">of</span><span class="o">=</span>/dev/rdisk&lt;the_number_of_the_disk&gt; <span class="nv">bs</span><span class="o">=</span>1m
</span><span class='line'><span class="nv">$ </span>diskutil eject /dev/disk&lt;the_number_of_the_disk&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Maybe I should script this&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Rebase and Git Detached Head Cheat Sheet]]></title>
    <link href="http://jjasghar.github.io/blog/2014/10/13/git-rebase-and-git-detached-head-cheat-sheet/"/>
    <updated>2014-10-13T15:19:30-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/10/13/git-rebase-and-git-detached-head-cheat-sheet</id>
    <content type="html"><![CDATA[<h2>git rebasing or fixing an auto merge conflict</h2>

<p>In my adventures with openstack and gerrit reviews I sometimes see something to the effect of: <em>Patch in Merge Conflict</em></p>

<p>This makes me very sad. I hate these things, and to quote Mark Vanderwiel, it&rsquo;s basically like someone snuck in a change before you.</p>

<p>We had a great conversation about it <a href="http://youtu.be/wsWj_NQJKI0?t=3m50s">here</a> for about 3 mins, but if you want a tl;dw (watch) it&rsquo;s this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote update
</span><span class='line'><span class="nv">$ </span>git checkout master
</span><span class='line'><span class="nv">$ </span>git pull
</span><span class='line'><span class="nv">$ </span>git checkout <span class="nv">$BRANCH_THAT_YOUR_FIXING</span>
</span><span class='line'><span class="nv">$ </span>git rebase master
</span><span class='line'><span class="nv">$ </span><span class="c"># Fix any conflicts that should pop up</span>
</span><span class='line'><span class="nv">$ </span>git add <span class="nv">$ANY_CONFLICTS</span>
</span><span class='line'><span class="nv">$ </span>git rebase --continue
</span><span class='line'><span class="nv">$ </span>git commit --amend
</span><span class='line'><span class="nv">$ </span>git review -R
</span></code></pre></td></tr></table></div></figure>


<p>It looks like a lot, but all in all not bad at all. The rebasing might look scary but walk through each conflict, edit it and add it back you should be fine.</p>

<h2>Detached head what the hell does that mean?</h2>

<p>If you continue watching that video we start to talk about detached heads. If you have played in the openstack/gerrit world you&rsquo;ll notice a copy paste off a review by download, something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git fetch https://review.openstack.org/stackforge/cookbook-openstack-client refs/changes/65/126365/9 <span class="o">&amp;&amp;</span> git checkout FETCH_HEAD
</span></code></pre></td></tr></table></div></figure>


<p>Needless to say this is confusing as all hell. Not to mention when you finish it is says something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>You are in <span class="s1">&#39;detached HEAD&#39;</span> state. You can look around, make experimental
</span><span class='line'>changes and commit them, and you can discard any commits you make in this
</span><span class='line'>state without impacting any branches by performing another checkout.
</span><span class='line'>
</span><span class='line'>If you want to create a new branch to retain commits you create, you may
</span><span class='line'><span class="k">do </span>so <span class="o">(</span>now or later<span class="o">)</span> by using -b with the checkout <span class="nb">command </span>again. Example:
</span><span class='line'>
</span><span class='line'>  git checkout -b new_branch_name
</span><span class='line'>
</span><span class='line'>HEAD is now at 789cb70... Initial Commit of the cookbook-openstack-client
</span></code></pre></td></tr></table></div></figure>


<p>Seriously what the hell does this mean? Luckily it&rsquo;s actually not a bad thing at all. If you watch from <a href="http://youtu.be/wsWj_NQJKI0?t=8m10s">here</a> for about 2 minutes you&rsquo;ll see us talk about it. The short of it is, you&rsquo;ve pulled down the patch, but it&rsquo;s not attached (detached) to your local master/other branch. When you do the <code>git checkout -b branch_name</code> off of master/other branch, it connects it up so it&rsquo;s no longer detached.</p>

<p>After saying it out loud, or typing it out as i just did, it makes sense, but surprisingly no one ever told me such a simple concept. I hope this helps someone down the line.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking Active Branch in Multiple Repos]]></title>
    <link href="http://jjasghar.github.io/blog/2014/09/25/checking-active-branche-in-multiple-repos/"/>
    <updated>2014-09-25T14:35:07-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/09/25/checking-active-branche-in-multiple-repos</id>
    <content type="html"><![CDATA[<p>I have a bunch of <a href="https://github.com/stackforge/?query=cookbook-openstack">repos</a> that I have to watch over and make patches against.
Trying to figure out what branch I left checked out can be&hellip;well frustrating.
I put all my <a href="http://www.openstack.org">openstack</a> repos in a sub directory from my standard <code>~/repo/</code> directory. I wanted to figure out a way to check all the active branches that I had  checked out; and it turns out that it was hellva a lot more challanging that expected.</p>

<p>As a sysadmin, you probably say ok, <code>git branch | awk '/\*/ { print $2; }'</code> seems ok, but man that&rsquo;s a bitch to write.</p>

<p>Leveraging a little bit of googling <code>git rev-parse --abbrev-ref HEAD</code> appeared which does the exact same. Odd that there
isn&rsquo;t easier command.</p>

<p>So putting it all together I come up with something like the following to tell me what the active branch is for each of
my repos. This is a quick one liner that does the trick for me.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>i in *; <span class="k">do </span><span class="nb">cd</span> <span class="nv">$i</span> ; <span class="nb">pwd</span>; git rev-parse --abbrev-ref HEAD ; <span class="nb">cd</span> ../ ; <span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In Honor of Greg]]></title>
    <link href="http://jjasghar.github.io/blog/2014/08/26/in-honor-of-greg/"/>
    <updated>2014-08-26T11:06:29-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/08/26/in-honor-of-greg</id>
    <content type="html"><![CDATA[<p>A good friend of mine started his own <a href="http://gregkitson.com/">blog</a> and posted an interesting <a href="http://gregkitson.com/blog/2014/08/25/my-favorite-puppet-help-message/">easter egg</a>.
Being a jealous nerd I had to find something related to chef that would do this. In my search I came up with something for <a href="http://kitchen.ci">test-kitchen</a>.</p>

<p>Stupid octopress couldn&rsquo;t parse it so here&rsquo;s a link to a <a href="https://gist.github.com/jjasghar/de5e3290459db361f3dd">gist</a></p>

<p>:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Omnibus So You Dont Get Hit by the Bus]]></title>
    <link href="http://jjasghar.github.io/blog/2014/08/19/omnibus-so-you-dont-get-hit-by-the-bus/"/>
    <updated>2014-08-19T13:34:45-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/08/19/omnibus-so-you-dont-get-hit-by-the-bus</id>
    <content type="html"><![CDATA[<p>I recently took a new job at <a href="http://getchef.com">Chef</a> Inc. Needless to say I&rsquo;m challenged and excited. I took a position as the
<a href="http://openstack.org">openstack</a> guy, which, again needless to say is a mountain of work. Part of my first responsibilities was to
start building an integration framework for the <a href="https://github.com/stackforge/">stackforge</a> cookbooks. Part of this was to automate
the building and destroying of compute nodes with different hardware configurations, so we needed a ipxe/tftp setup to network
boot machines. We decided on a project from CSC called <a href="https://github.com/csc/Hanlon">hanlon</a> which does a great deal of this work.</p>

<p>You&rsquo;re probably asking by now, so where&rsquo;s omnibus come into play with this? Well hanlon moves extremely fast and we needed a way to
package it up. There are specific dependencies and other specific things that having a package with &ldquo;blessed&rdquo; versions of the other
underlying apps would help support. If I recall correctly, <a href="http://sensuapp.org">sensu</a> came to this same decision because even as small
as patch numbers for ruby can cause havoc attempting to support someone.</p>

<p>So on with the show/tutorial:</p>

<h2>Omnibus</h2>

<p>The first thing you need to know is that <a href="https://github.com/opscode/omnibus">Omnibus</a> is actually in two pieces. First the framework,
at this repo: <a href="https://github.com/opscode/omnibus">omnibus</a> and the <a href="https://github.com/opscode/omnibus-software">omnibus-software</a>
which is the the building blocks for whatever you&rsquo;re trying to package.</p>

<p>The first thing that got me learning omnibus was the two files that sat inside of <code>project/</code> and <code>software/</code>. You&rsquo;ll notice that they
probably are both named your package and probably wonder why it&rsquo;s named the same thing. The best description is this; <code>project/blah.rb</code> is the
overarching definition of the package where as <code>software/blah.rb</code> is the build instructions. You shouldn&rsquo;t repeat the data is both places,
because it can cause issues supporting the pkg in the long run. Keep that in mind.
You might notice a <code>dependency</code> line <code>project/blah.rb</code>, I suggest commenting it out and putting all the dependencies in <code>software/blah.rb</code>
is so it&rsquo;s all in one place.</p>

<p>So let&rsquo;s take a step back. How do you create a new project? Here&rsquo;s a snippet to do it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gem install omnibus
</span><span class='line'><span class="nv">$ </span>omnibus new <span class="nv">$MY_PROJECT_NAME</span> <span class="c"># this will create a directory with omnibus-$MY_PROJECT_NAME</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>omnibus-<span class="nv">$MY_PROJECT_NAME</span>
</span><span class='line'><span class="nv">$ </span>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Something pretty straight forward. I want to stress though the portion of <code>$MY_PROJECT_NAME</code>, that caught me a couple times. Yes, a couple times.</p>

<p>So lets say you are on a Ubuntu box and you&rsquo;re trying to build the pkg for Ubuntu. You can short circuit this by just doing the following,
you won&rsquo;t see too much go by, but it&rsquo;ll tell you when it&rsquo;s done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>omnibus-<span class="nv">$MY_PROJECT_NAME</span>
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>omnibus build <span class="nv">$MY_PROJECT_NAME</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now if you want to see more things go by,</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$MY_PROJECT_NAME</span>
</span><span class='line'><span class="nv">$ </span>bundle install
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>omnibus build <span class="nv">$MY_PROJECT_NAME</span> --log-level<span class="o">=</span>debug
</span></code></pre></td></tr></table></div></figure>


<p>I personally like it, I like to see my computer work ;).</p>

<p>Now lets say you&rsquo;re still on that Ubuntu box but your coworker is using Centos, this is where <a href="http://kitchen.ci">test-kitchen</a> can take part making your
life so much easier.
You should do something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>kitchen list
</span><span class='line'><span class="nv">$ </span>bundle <span class="nb">exec </span>kitchen converge &lt;os you want to converge to build the pkg&gt;
</span></code></pre></td></tr></table></div></figure>


<p>This will set up the box via test-kitchen, you&rsquo;ll want to <code>kitchen login</code> the box but then you can do the above commands to build the pkg.</p>

<p>Something I noticed as I was attempting to leverage test-kitchen as my build box, (I&rsquo;m on a Mac trying to make Ubuntu pkgs) the following made my life
much easier.</p>

<p>I added the following to my <code>~/.ssh/config</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>host localhost
</span><span class='line'>     User vagrant
</span><span class='line'>     IdentityFile ~/.ssh/vagrant
</span></code></pre></td></tr></table></div></figure>


<p>Where the <code>~/.ssh/vagrant</code> is from <a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/keys/vagrant">here</a></p>

<p>Then you can do something like, then ship it off to some place else. NOTE: check the port number ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ~/tmp <span class="o">&amp;&amp;</span> <span class="nb">cd</span> ~/tmp
</span><span class='line'><span class="nv">$ </span>scp -P 2201 vagrant@localhost://home/vagrant/<span class="nv">$MY_PACKAGE_NAME</span>/pkg/* ./
</span></code></pre></td></tr></table></div></figure>


<p>And say you spin up another vagrant box to test. NOTE: check that port number ;)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>scp -P 2202 <span class="nv">$MY_PACKAGE_NAME_0</span>.1.0+20140819210922-1_amd64.deb vagrant@localhost://home/vagrant/
</span></code></pre></td></tr></table></div></figure>


<p>I ran into an error during my adventures with Omnibus, and figured I should capture it here:</p>

<p>If you see an error like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>          <span class="o">[</span><span class="ss">NullFetcher</span><span class="p">:</span> <span class="n">libgcc</span><span class="o">]</span> <span class="n">I</span> <span class="o">|</span> <span class="no">Fetching</span> <span class="sb">`libgcc&#39; (nothing to fetch)</span>
</span><span class='line'><span class="sb">          [NetFetcher: cacerts] I | Downloading from `</span><span class="ss">http</span><span class="p">:</span><span class="sr">//</span><span class="n">curl</span><span class="o">.</span><span class="n">haxx</span><span class="o">.</span><span class="n">se</span><span class="o">/</span><span class="n">ca</span><span class="o">/</span><span class="n">cacert</span><span class="o">.</span><span class="n">pem</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">          [NetFetcher: cacerts] I | Verifying checksum</span>
</span><span class='line'><span class="s1">Verification for cacerts failed due to a checksum mismatch:</span>
</span><span class='line'><span class="s1"> </span>
</span><span class='line'><span class="s1">expected: fd48275847fa10a8007008379ee902f1</span>
</span><span class='line'><span class="s1">actual:   c9f4f7f4d6a5ef6633e893577a09865e</span>
</span><span class='line'><span class="s1"> </span>
</span><span class='line'><span class="s1">This added security check is used to prevent MITM attacks when downloading the</span>
</span><span class='line'><span class="s1">remote file. If you have updated the version or URL for the download, you will</span>
</span><span class='line'><span class="s1">also need to update the checksum value. You can find the checksum value on the</span>
</span><span class='line'><span class="s1">software publisher&#39;</span><span class="n">s</span> <span class="n">website</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>A quick fix would be to blow away your <code>Gemfile.lock</code> and run another <code>bundle install</code>.</p>

<p>So here&rsquo;s some notes on Omnibus, I&rsquo;ll probably add more as time progresses, but this is at least a start!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot Mysql Cli-table Tutorial]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/24/hubot-mysql-cli-table-tutorial/"/>
    <updated>2014-06-24T13:09:23-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/24/hubot-mysql-cli-table-tutorial</id>
    <content type="html"><![CDATA[<p>So you get some output in a fun like the previous post with mysql.  If you are just looking I&rsquo;m taking the example like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">sql</span> <span class="o">=</span> <span class="s2">&quot;select name, id from mydatabase&quot;</span>
</span><span class='line'><span class="nx">sql</span> <span class="o">=</span> <span class="nx">mysql</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="nx">sql</span><span class="p">)</span>
</span><span class='line'><span class="nx">connection</span><span class="p">.</span><span class="nx">query</span> <span class="nx">sql</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">row</span> <span class="k">in</span> <span class="nx">results</span>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="nx">row</span>
</span></code></pre></td></tr></table></div></figure>


<p>So you&rsquo;ve probably noticed that it comes out HORRIBLY. This tutorial will leverage the <a href="https://www.npmjs.org/package/cli-table">cli-table npm</a> so it <em>should</em> look
something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//╔══════╤═════╤══════╗</span>
</span><span class='line'><span class="c1">//║ foo  │ bar │ baz  ║</span>
</span><span class='line'><span class="c1">//╟──────┼─────┼──────╢</span>
</span><span class='line'><span class="c1">//║ frob │ bar │ quuz ║</span>
</span><span class='line'><span class="c1">//╚══════╧═════╧══════╝</span>
</span></code></pre></td></tr></table></div></figure>


<p>So lets make this happen.  First off just like the mysql plugin you&rsquo;ll need to add something like this to your <code>package.json</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="nt">&quot;cli-table&quot;</span><span class="p">:</span> <span class="s2">&quot;latest&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">...</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>After this you need to create an object like the mysql plugin&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Table</span> <span class="o">=</span> <span class="nx">require</span> <span class="s2">&quot;cli-table&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you have <code>Table</code> available to you so you can leverage it to make the tables.  First thing you need to do is create the actual table which is this line:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">table</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Table</span><span class="p">({</span><span class="nx">head</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="nx">style</span><span class="o">:</span> <span class="p">{</span><span class="nx">head</span><span class="o">:</span><span class="p">[],</span> <span class="nx">border</span><span class="o">:</span><span class="p">[],</span> <span class="s1">&#39;padding-left&#39;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;padding-right&#39;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then at the <code>connection.query</code> line you&rsquo;ll want to push the rows into the table loop through them then in <em>one</em> message push it out, which is what the next snippet
does.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">connection</span><span class="p">.</span><span class="nx">query</span> <span class="nx">sql</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">row</span> <span class="k">in</span> <span class="nx">results</span>
</span><span class='line'>    <span class="nx">table</span><span class="p">.</span><span class="nx">push</span> <span class="p">[</span><span class="nx">row</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span>
</span><span class='line'>  <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="nx">table</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>So the full thing would be something like the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="o">/</span><span class="nx">database</span> <span class="nx">user</span> <span class="nx">id$</span><span class="o">/</span><span class="nx">i</span><span class="p">,</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">table</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Table</span><span class="p">({</span><span class="nx">head</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">],</span> <span class="nx">style</span><span class="o">:</span> <span class="p">{</span><span class="nx">head</span><span class="o">:</span><span class="p">[],</span> <span class="nx">border</span><span class="o">:</span><span class="p">[],</span> <span class="s1">&#39;padding-left&#39;</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;padding-right&#39;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}})</span>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="s2">&quot;Looking on your names and ids&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">connection</span> <span class="o">=</span> <span class="nx">mysql</span><span class="p">.</span><span class="nx">createConnection</span>
</span><span class='line'>      <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;mydbhostname&#39;</span>
</span><span class='line'>      <span class="nx">user</span><span class="o">:</span> <span class="s1">&#39;mydbuseraccount&#39;</span>
</span><span class='line'>      <span class="nx">password</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_PASSWORD</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">sql</span> <span class="o">=</span> <span class="s2">&quot;SELECT id, name, FROM mydatabase&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">connection</span><span class="p">.</span><span class="nx">query</span> <span class="nx">sql</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>      <span class="k">for</span> <span class="nx">row</span> <span class="k">in</span> <span class="nx">results</span>
</span><span class='line'>        <span class="nx">table</span><span class="p">.</span><span class="nx">push</span> <span class="p">[</span><span class="nx">row</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">row</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="nx">table</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>And boom, you now have a nice readable outputted chart that hubot can answer for you when you need. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot Mysql Instead of a Wrapper Shell Script]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/24/hubot-mysql-instead-of-a-wrapper-shell-script/"/>
    <updated>2014-06-24T10:40:32-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/24/hubot-mysql-instead-of-a-wrapper-shell-script</id>
    <content type="html"><![CDATA[<p>So you&rsquo;ve gotten hubot to do some cool things. You&rsquo;ve even got it to shell out to run some
useful commands and scripts. (An example would be <a href="http://github.com/hubot-scripts/hubot-chef/blob/master/src/chef.coffee">hubot-chef</a>
shelling out and running knife.) So you&rsquo;ve started playing with pulling data from
mysql or the like, and you&rsquo;ve come up with something like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">mysql</span> <span class="o">-</span><span class="n">u</span><span class="err">$</span><span class="k">user</span> <span class="o">-</span><span class="n">p</span><span class="err">$</span><span class="n">pwd</span> <span class="o">-</span><span class="n">h</span> <span class="err">$</span><span class="k">host</span> <span class="o">-</span><span class="n">N</span> <span class="o">-</span><span class="n">e</span> <span class="ss">&quot;select name, id from mydatabase&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty straight forward eh? You run it on your cli and yeah you get the data you expect. You attempt to run it with hubot maybe something
like this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'> <span class="nx">robot</span><span class="p">.</span><span class="nx">respond</span> <span class="o">/</span><span class="nx">database</span> <span class="nx">name</span> <span class="nx">and</span> <span class="nx">id$</span><span class="o">/</span><span class="nx">i</span><span class="p">,</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>   <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="s2">&quot;determining the name and ids&quot;</span>
</span><span class='line'>   <span class="nx">exec</span> <span class="s2">&quot;bash /home/hubot/bash_scripts/name_id_database.sh&quot;</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">stdout</span><span class="p">,</span> <span class="nx">stderr</span><span class="p">)</span> <span class="o">=&gt;</span>
</span><span class='line'>     <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="nx">stdout</span>
</span></code></pre></td></tr></table></div></figure>


<p>It might come out all gross, yeah that&rsquo;s a different post about <a href="https://github.com/LearnBoost/cli-table">cli-table</a> which I hope i&rsquo;ll be
doing after this post.  Anyway i digress; that&rsquo;s great, so you get the data hubot gives you the date, but man you have your password in your
shell script, you have to shell out to do it, and honestly, it seems a tad bit hacky right?  Luckly, <a href="https://twitter.com/mattdbridges">Matt Bridges</a> showed
me how to leverage coffeescript and the <a href="https://www.npmjs.org/package/mysql">mysql npm</a> package to do just that.</p>

<p>First off, you&rsquo;ll need to add to your <code>package.json</code> something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'> <span class="s2">&quot;dependencies&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>          <span class="err">....</span>
</span><span class='line'>          <span class="nt">&quot;mysql&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;= 2.0.1&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="err">....</span>
</span></code></pre></td></tr></table></div></figure>


<p>At the top of your coffee script add something like this, it will open up the ability to start calling the commands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">mysql</span> <span class="o">=</span> <span class="nx">require</span> <span class="s1">&#39;mysql&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Awesome, now lets convert that top sql to coffee, first thing you need to do is create the connection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">connection</span> <span class="o">=</span> <span class="nx">mysql</span><span class="p">.</span><span class="nx">createConnection</span>
</span><span class='line'>    <span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;mydbhostname&#39;</span>
</span><span class='line'>    <span class="nx">user</span><span class="o">:</span> <span class="s1">&#39;myuser&#39;</span>
</span><span class='line'>    <span class="nx">password</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">DB_PASSWORD</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see it&rsquo;s pretty self explanatory. You create the object called <code>connection</code> then give it some variables. The password is interesting here
it&rsquo;s now is a environment variable that you can just add to your hubot (however you choose, like in heroku: <code>heroku config:set DB_PASSWORD=a_really_strong_pa$$word</code>) so
you don&rsquo;t have to have it checked into you scm/code.</p>

<p>After this, now you&rsquo;ll want to do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">sql</span> <span class="o">=</span> <span class="s2">&quot;select name, id from mydatabase&quot;</span>
</span><span class='line'><span class="nx">sql</span> <span class="o">=</span> <span class="nx">mysql</span><span class="p">.</span><span class="nx">format</span><span class="p">(</span><span class="nx">sql</span><span class="p">)</span>
</span><span class='line'><span class="nx">connection</span><span class="p">.</span><span class="nx">query</span> <span class="nx">sql</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">results</span><span class="p">)</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">throw</span> <span class="nx">err</span> <span class="k">if</span> <span class="nx">err</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">row</span> <span class="k">in</span> <span class="nx">results</span>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="nx">row</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also is pretty self explanatory, you put your sql statement in as a variable, format it with mysql, open the connection via the query command, then
if it errors, throws the error, otherwise outputs each row and a seporate <code>msg.send</code>.</p>

<p>Yes, yes, this is dirty, gross and if you have anything more than 3-4 users you&rsquo;re gonna get annoyed really fast. Again, this is just an example, the cli-table tutorial
will make this more enjoyable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing Windows Servers With Chef]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef/"/>
    <updated>2014-06-11T16:42:36-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/11/managing-windows-servers-with-chef</id>
    <content type="html"><![CDATA[<p>I was asked to do a review of <a href="http://www.packtpub.com/managing-windows-servers-with-chef/book">Managing Windows Servers with Chef</a>. I&rsquo;ve read
through the complete book, and these are my thoughts. I&rsquo;ll be copying the following out to a couple places, but these are my thoughts on this
book from <a href="http://www.packtpub.com">packtpub</a>.</p>

<h2>Overview</h2>

<p>First off this book is an amazing &ldquo;whistle stop tour&rdquo; of the chef ecosystem. Yes it focuses mainly on the windows world, but it hits some great
overarching chef terminology to a unseasoned reader. It does assume you might have a small amount chef knowledge, in certain spots, but if you have none it&rsquo;s ok. It
drops you into the chef world, walks you through some basic patterns and then starts the specific windows focus. It has a great hands on example
leveraging both via knife bootstrap and cloud providers for windows, and even shows how to leverage winrm if you have no exposure to it. This is a great book, I strongly suggest
getting your hands on it.</p>

<h2>View as a *nix admin with chef knowlege</h2>

<p>As a *nix admin by profession, this was a great overview, allowed me to leverage my chef knowledge already and started thinking of what I can do for my
company to leverage the repeatable windows chef infurstruture. It opened my eyes to some very basic but lacking windows support.  If you look at the following snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">platform_family?</span> <span class="s1">&#39;debian&#39;</span>
</span><span class='line'>  <span class="n">package</span> <span class="s1">&#39;apache2&#39;</span>
</span><span class='line'><span class="k">elsif</span> <span class="n">platform_family?</span> <span class="s1">&#39;windows&#39;</span>
</span><span class='line'>  <span class="n">windows_package</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;apache&#39;</span><span class="o">][</span><span class="s1">&#39;windows&#39;</span><span class="o">][</span><span class="s1">&#39;service_name&#39;</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">source</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;apache&#39;</span><span class="o">][</span><span class="s1">&#39;windows&#39;</span><span class="o">][</span><span class="s1">&#39;msi_url&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">installer_type</span> <span class="ss">:msi</span>
</span><span class='line'>    <span class="c1"># The last fourz options keep the service from failing</span>
</span><span class='line'>    <span class="c1"># before the httpd.conf file is created</span>
</span><span class='line'>    <span class="n">options</span> <span class="sx">%W[</span>
</span><span class='line'><span class="sx">      /quiet</span>
</span><span class='line'><span class="sx">      INSTALLDIR=&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;apache&#39;</span><span class="o">][</span><span class="s1">&#39;install_dir&#39;</span><span class="o">]</span><span class="si">}</span><span class="sx">&quot;</span>
</span><span class='line'><span class="sx">      ALLUSERS=1</span>
</span><span class='line'><span class="sx">      SERVERADMIN=</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;apache&#39;</span><span class="o">][</span><span class="s1">&#39;serveradmin&#39;</span><span class="o">]</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">      SERVERDOMAIN=</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;fqdn&#39;</span><span class="o">]</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">      SERVERNAME=</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;fqdn&#39;</span><span class="o">]</span><span class="si">}</span><span class="sx"></span>
</span><span class='line'><span class="sx">    ]</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see chef has a way to pull down <code>apache2</code> and extract, install, and run it. Before reading this book, I knew of some of the resources that chef provided, but
having legitimate examples in front of me made the difference. <em>I can&rsquo;t think of any more praise other than I really do think this has some of the best overarching view of
chef for windows, walks you through a great example and then makes you want to dig into the LWRPs that it references.</em></p>

<p><a href="https://twitter.com/soysamurai">John Ewart</a> without realizing has created a 100 page book that you can give to a Director or above and they&rsquo;ll get why you want to use chef and
in this case chef for windows.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moving to Capistrano Version 3 From Version 2 Git Submodules]]></title>
    <link href="http://jjasghar.github.io/blog/2014/06/04/moving-to-capistrano-version-3-from-version-2/"/>
    <updated>2014-06-04T17:13:43-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/06/04/moving-to-capistrano-version-3-from-version-2</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the process of moving from <a href="http://capistranorb.com/">capistrano</a> version 2
to capistrano version 3. This is a post of a nasty hiccup I had, hopefully it&rsquo;ll be
useful for someone else.</p>

<h2>git submodules</h2>

<p>I had a requirement to get git submodules to work with one of my applications. It&rsquo;s seems
that v3 doesn&rsquo;t have the &ldquo;clone&rdquo; version anymore, so the <code>.git</code> directory isn&rsquo;t there.
It seems it uses the <code>git archive</code> and doesn&rsquo;t have an &ldquo;out of the box&rdquo; support for submodules.
See <a href="http://stackoverflow.com/questions/19403138/capistrano-v3-deploy-git-repository-and-its-submodules/19573220#19573220">here</a>.
I did some searching and found the above stack overflow and  <a href="https://gist.github.com/jjasghar/d9369c60c51f79d6e7cc">this gist</a>
which gave me the bulk of what I needed to get done.</p>

<p>There were some gotchas on this so I&rsquo;m going to do my best to document them here.
First off, as you can see on <a href="https://gist.github.com/jjasghar/d9369c60c51f79d6e7cc#file-submodule_strategy-rb-L20">line 20</a>
there is a new variable named <code>repo_path</code>.  This is due to the need now of the
<code>git clone</code> to the file system and a place it needs to put it. So that means you need
to add the <code>repo/</code> directory in your <code>:deploy_to</code> directory. Might I suggest the something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh &lt;deployuser&gt;@&lt;remotehost&gt;://var/www/&lt;app&gt;/repo/
</span></code></pre></td></tr></table></div></figure>


<p>Then after the fact, you might want to steal this cap rake task:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s2">&quot;Check that we can access the repo directory&quot;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:check_repo_permissions</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:all</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">host</span><span class="o">|</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">test</span><span class="p">(</span><span class="s2">&quot;[ -w </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:deploy_to</span><span class="p">)</span><span class="o">/</span><span class="n">repo</span><span class="si">}</span><span class="s2"> ]&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">info</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:deploy_to</span><span class="p">)</span><span class="o">/</span><span class="n">repo</span><span class="si">}</span><span class="s2"> is writable on </span><span class="si">#{</span><span class="n">host</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">error</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:deploy_to</span><span class="p">)</span><span class="o">/</span><span class="n">repo</span><span class="si">}</span><span class="s2"> is not writable on </span><span class="si">#{</span><span class="n">host</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Also may I suggest you putting this at the &ldquo;top&rdquo; of your <code>deploy.rb</code> something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="ss">:check_repo_permissions</span>
</span></code></pre></td></tr></table></div></figure>


<p>So just in case you&rsquo;re <code>cap</code> task will fail out early on of you have decided to remove, or
do something with that repo directory.</p>

<p>Now if you go ahead and run <code>cap staging deploy</code> (you&rsquo;re testing in STAGING right?)
You might run into some errors. Most are pretty self explanatory, and if you take care of them
and run <code>cap</code> again, you should be good&hellip;but I digress.</p>

<p>After adding that repo directory, you want to add the above <a href="https://gist.github.com/jjasghar/d9369c60c51f79d6e7cc">gist</a> to <code>lib/capistrano/submodule_strategy.rb</code>
and add the following two lines to your <code>Capfile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/git&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./lib/capistrano/submodule_strategy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After that, you need to add to your <code>config/deploy.rb</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:git_strategy</span><span class="p">,</span> <span class="no">SubmoduleStrategy</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should wire everything up now.</p>

<p>There is one other <em>optional</em> file, <code>.capignore</code> that needs to be created, it is a <code>.gitignore</code> for this cap deployment.
I ended up taking the example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span><span class="n">capignore</span>
</span><span class='line'><span class="n">lib</span>
</span><span class='line'><span class="n">config</span>
</span><span class='line'><span class="o">.</span><span class="n">git</span>
</span></code></pre></td></tr></table></div></figure>


<p>and adding it directory to the <code>(:deploy_to)/repo/.capignore</code>. I believe you can add it to your the root of your repo,
and it should get there too, but I didnt do it that way. The only place it&rsquo;s referanced is <a href="https://gist.github.com/jjasghar/d9369c60c51f79d6e7cc#file-submodule_strategy-rb-L45">here</a> so if you see fit, you could probably just remove the referance.</p>

<p>You should be able to do a <code>cap staging deploy</code> now and you should notice something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>...
</span><span class='line'>DEBUG<span class="o">[</span>639d0d29<span class="o">]</span> Command: <span class="nb">cd</span> /var/www/app/repo <span class="o">&amp;&amp;</span> <span class="o">(</span> <span class="nv">GIT_ASKPASS</span><span class="o">=</span>/bin/echo <span class="nv">GIT_SSH</span><span class="o">=</span>/tmp/app/git-ssh.sh /usr/bin/env git submodule update --init <span class="o">)</span>
</span><span class='line'>DEBUG<span class="o">[</span>639d0d29<span class="o">]</span>   Submodule <span class="s1">&#39;i-hate-submodules&#39;</span> <span class="o">()</span> registered <span class="k">for </span>path <span class="s1">&#39;i-hate-submodules&#39;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>And you should be good to go!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating a Rails Password via the Rails Console]]></title>
    <link href="http://jjasghar.github.io/blog/2014/05/02/updating-a-rails-password-via-the-rails-console/"/>
    <updated>2014-05-02T11:28:40-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/05/02/updating-a-rails-password-via-the-rails-console</id>
    <content type="html"><![CDATA[<p>I&rsquo;m in the process of learning <a href="http://www.railstutorial.org/">ruby on rails</a> and it&rsquo;s going amazingly, plus <a href="http://michaelhartl.com/">Michael Hartl</a> as a great teacher, I strongly suggest
going through his screencasts.</p>

<p>As I was watching his screencasts, I forgot one of my test passwords and realized I didn&rsquo;t have a quick way to redo the password. There is a simple handful of commands fix this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">001</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">5</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;User id: 1, name: &quot;JJ Asghar&quot;, email: &quot;jjasghar@gmail.com&quot;, created_at: &quot;2014-04-18 17:46:48&quot;, updated_at: &quot;2014-04-25 23:21:10&quot;, password_digest: &quot;$2a$10$or/wJw1I8Wpf0lXNbtawveoQXETGJbUkv/VwXQXzn92r...&quot;, remember_token: &quot;uUJTExCyt4mpAOpQWd4PMA&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">002</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">u</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;User id: 1, name: &quot;JJ Asghar&quot;, email: &quot;jjasghar@gmail.com&quot;, created_at: &quot;2014-04-18 17:46:48&quot;, updated_at: &quot;2014-04-25 23:21:10&quot;, password_digest: &quot;$2a$10$or/wJw1I8Wpf0lXNbtawveoQXETGJbUkv/VwXQXzn92r...&quot;, remember_token: &quot;uUJTExCyt4mpAOpQWd4PMA&quot;&gt;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">003</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;a_stupid_pa$$word&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;_stupid_pa$$word&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">004</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">password_confirmation</span> <span class="o">=</span> <span class="s2">&quot;a_stupid_pa$$word&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;_stupid_pa$$word&quot;</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">005</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="k">BEGIN</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Exists</span> <span class="p">(</span><span class="mi">12</span><span class="o">.</span><span class="mi">2</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="mi">1</span> <span class="no">AS</span> <span class="n">one</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="no">LOWER</span><span class="p">(</span><span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;email&quot;</span><span class="p">)</span> <span class="o">=</span> <span class="no">LOWER</span><span class="p">(</span><span class="s1">&#39;jjasghar@gmail.com&#39;</span><span class="p">)</span> <span class="no">AND</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">15</span><span class="o">.</span><span class="mi">8</span><span class="n">ms</span><span class="p">)</span>  <span class="no">UPDATE</span> <span class="s2">&quot;users&quot;</span> <span class="no">SET</span> <span class="s2">&quot;password_digest&quot;</span> <span class="o">=</span> <span class="s1">&#39;$2a$10$Za7prnrSthhE90AvB15BNOMl8sf3oL7onBpZ45nH/9skwHfn1EFA.&#39;</span><span class="p">,</span> <span class="s2">&quot;remember_token&quot;</span> <span class="o">=</span> <span class="s1">&#39;zOZYjEVovO143qrX1yhibw&#39;</span><span class="p">,</span> <span class="s2">&quot;updated_at&quot;</span> <span class="o">=</span> <span class="s1">&#39;2014-04-25 23:24:39.329502&#39;</span> <span class="no">WHERE</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">6</span><span class="n">ms</span><span class="p">)</span>  <span class="no">COMMIT</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">irb</span><span class="p">(</span><span class="n">main</span><span class="p">):</span><span class="mo">006</span><span class="p">:</span><span class="mi">0</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, you need to create an object via a <code>find_by_&lt;something&gt;</code>, in my case <code>id</code> and write it to <code>u</code>. After that I change the password key to <code>a_stupid_pa$$word</code> along with the password_confirmation. I then write it to the
database via <code>u.save</code>.</p>

<p>You can also do this for anything that the object has, you just have to make sure that you follow the constraints you put in place. If you see an issue with the save, if it comes back as <code>false</code>, put a <code>!</code> at the end and it should bubble up the
exception telling you why it won&rsquo;t work, example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">u</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by_id</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Load</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="n">*</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span> <span class="no">WHERE</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">=</span> <span class="mi">1</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="c1">#&lt;User id: 1, name: &quot;JJ Asghar&quot;, email: &quot;jjasghar@gmail.com&quot;, created_at: &quot;2014-04-18 17:12:49&quot;, updated_at: &quot;2014-04-24 20:17:57&quot;, password_digest: &quot;$2a$10$GeLuTvSL4giPYJWIozdj6e1UxrxM0NauI9ilXoB9pZDs...&quot;, remember_token: &quot;ZiAb_plRQdp9WaKjbZ4CAA&quot;&gt;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;1234&quot;</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;1234&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="k">begin</span> <span class="n">transaction</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Exists</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="mi">1</span> <span class="no">AS</span> <span class="n">one</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="no">LOWER</span><span class="p">(</span><span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;email&quot;</span><span class="p">)</span> <span class="o">=</span> <span class="no">LOWER</span><span class="p">(</span><span class="s1">&#39;jjasghar@gmail.com&#39;</span><span class="p">)</span> <span class="no">AND</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="n">rollback</span> <span class="n">transaction</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">u</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="k">begin</span> <span class="n">transaction</span>
</span><span class='line'>  <span class="no">User</span> <span class="no">Exists</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="n">ms</span><span class="p">)</span>  <span class="no">SELECT</span> <span class="mi">1</span> <span class="no">AS</span> <span class="n">one</span> <span class="no">FROM</span> <span class="s2">&quot;users&quot;</span> <span class="no">WHERE</span> <span class="p">(</span><span class="no">LOWER</span><span class="p">(</span><span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;email&quot;</span><span class="p">)</span> <span class="o">=</span> <span class="no">LOWER</span><span class="p">(</span><span class="s1">&#39;jjasghar@gmail.com&#39;</span><span class="p">)</span> <span class="no">AND</span> <span class="s2">&quot;users&quot;</span><span class="o">.</span><span class="s2">&quot;id&quot;</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">)</span> <span class="no">LIMIT</span> <span class="mi">1</span>
</span><span class='line'>   <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="n">ms</span><span class="p">)</span>  <span class="n">rollback</span> <span class="n">transaction</span>
</span><span class='line'><span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:RecordInvalid</span><span class="p">:</span> <span class="no">Validation</span> <span class="ss">failed</span><span class="p">:</span> <span class="no">Password</span> <span class="n">is</span> <span class="n">too</span> <span class="n">short</span> <span class="p">(</span><span class="n">minimum</span> <span class="n">is</span> <span class="mi">6</span> <span class="n">characters</span><span class="p">),</span> <span class="no">Password</span> <span class="n">confirmation</span> <span class="n">can</span><span class="s1">&#39;t be blank</span>
</span><span class='line'><span class="s1">from /Users/jasghar/.rvm/gems/ruby-2.0.0-p195/gems/activerecord-3.2.16/lib/active_record/validations.rb:56:in `save!&#39;</span>
</span><span class='line'><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UTC and Me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/04/26/utc-and-me/"/>
    <updated>2014-04-26T16:15:54-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/04/26/utc-and-me</id>
    <content type="html"><![CDATA[<p>I was in the office on Friday when I coworker of mine was discussing trouble he was having with restoring a DB backup. Normally I passively
listen to those types of complaints, but something caught my ear about this one. He didn&rsquo;t realize the company we outsource our work to runs
UTC as their main way of describing time. So when he asked for a dump from 2 days ago, at 4pm he thought it was 2 days ago 4pm CST (my timezone)
where the ticket for the company described 4pm UTC. Needless to say confusion started to hold.</p>

<p>Now this can start my rant (which up till now I haven&rsquo;t actually written) about timezones, but I wanted to make his life easier so I figured out
a pretty straight forward way to convert any date and time of a timezone to UTC via ruby.  This is how you do it:</p>

<p>Note: this requires ruby 1.9.3+</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="nb">require</span> <span class="s1">&#39;time&#39;</span>
</span><span class='line'><span class="o">[</span><span class="mi">8</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="no">Time</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s2">&quot;04/23/2014 02:00 AM&quot;</span><span class="p">,</span><span class="s2">&quot;%m/%d/%Y %I:%M %p&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">23</span> <span class="mo">02</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="o">-</span><span class="mo">0500</span>
</span><span class='line'><span class="o">[</span><span class="mi">9</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">.</span><span class="n">utc</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">23</span> <span class="mo">07</span><span class="p">:</span><span class="mo">00</span><span class="p">:</span><span class="mo">00</span> <span class="no">UTC</span>
</span><span class='line'><span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wow, that&rsquo;s pretty simple eh? :)  In looking around for this answer, I came across a pretty neat trick with ruby also:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">25</span> <span class="mi">16</span><span class="p">:</span><span class="mi">21</span><span class="p">:</span><span class="mi">27</span> <span class="no">UTC</span>
</span><span class='line'><span class="o">[</span><span class="mi">10</span><span class="o">]</span> <span class="n">pry</span><span class="p">(</span><span class="n">main</span><span class="p">)</span><span class="o">&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="mi">1398443660</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s time now for UTC from your machines time, and the epoch time too!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Add Growl Notifications to Rspec Tests]]></title>
    <link href="http://jjasghar.github.io/blog/2014/04/08/how-to-add-growl-notifications-to-rspec-tests/"/>
    <updated>2014-04-08T10:45:59-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/04/08/how-to-add-growl-notifications-to-rspec-tests</id>
    <content type="html"><![CDATA[<p>With some pushing from my work I&rsquo;ve decided to start learning rails, with rails comes TDD.
I&rsquo;m reading some books and watching some screencasts, and rspec testing came up as the default testing way.  I&rsquo;m a
huge <a href="http://kitchen.ci">test-kitchen</a>, or <a href="https://github.com/sstephenson/bats">bats</a> or the like tester with chef
but never got a way to automate the testing in the background. Turns out using rspec+guard+growl allows for you to
be focused on your present screen and have the tests being run with a pop up.</p>

<p>I use vim as my development platform. This is why I needed a way to run rspec in the background, hopping out of the vim buffer breaks my focus. So I used guard-rspec, it was perfect for what I wanted to do, problem was it was in another tab or terminal again breaking my focus. I figured I have growl installed, so this is how I set up this perfect rspec+guard+growl setup.</p>

<p>First add these two gems to your Gemfile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">gem</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;growl&#39;</span>
</span><span class='line'>    <span class="n">gem</span> <span class="s1">&#39;growl_notify&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>NOTE: I suggest adding this to the development/test group, you won&rsquo;t want this in your production deploy.</p>

<p>Go ahead and run <code>bundle</code>.</p>

<p>After that, you need to install something called <a href="http://growl.cachefly.net/GrowlNotify-2.1.zip">GrowlNotify 2.1</a>, I&rsquo;d double check your growl version, it only works with 2.1.x.</p>

<p>After installing spin up <code>guard</code>, and you should see a nice notification. :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to the Chef Error That Has Haunted Me]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me/"/>
    <updated>2014-03-19T16:45:03-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/19/update-to-the-chef-error-that-has-haunted-me</id>
    <content type="html"><![CDATA[<p>So it seems that with release of chef-client <code>11.10</code> the 403 error have&hellip;morphed. Now they look  something like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Chef::Exceptions::ContentLengthMismatch
</span><span class='line'>---------------------------------------
</span><span class='line'>Response body length 164 does not match HTTP Content-Length header 206.</span></code></pre></td></tr></table></div></figure>


<p>I moved chef servers and didn&rsquo;t change my <code>s3_url_ttl</code> and ran into this issue. So the annoying 403&rsquo;s are now something about <code>HTTP Content-Length</code>.</p>

<p>If you&rsquo;ve forgotten the fix is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span> % sudo vim /etc/chef-server/chef-server.rb
</span><span class='line'><span class="c"># add this line: erchef[‘s3_url_ttl’] = 900 where 900 is something larger...maybe 1800?</span>
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> % sudo chef-server-ctl reconfigure
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Help! I Lost My vaildation.pem]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/18/help-i-lost-my-vaildation-dot-pem/"/>
    <updated>2014-03-18T16:39:04-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/18/help-i-lost-my-vaildation-dot-pem</id>
    <content type="html"><![CDATA[<p>So I recently moved chef servers. I had a handful of hiccups on the way. The main one was my <code>validation.pem</code> and my <code>chef-webui.pem</code>&hellip;went missing. I had to regenerate my vaildation.pem without my chef-webui. These commands are on open source
chef 11 server.</p>

<p>(OK, fine I broke them, but this post is how to recreate either with <code>knife</code> on your workstation incase <strong>cough</strong>like me<strong>cough</strong> you have lost your chef-webui.)</p>

<p>It turns out there is a great simple command to re-create your validation.pem.</p>

<p>Note: This can also work as <code>validator.pem</code> also, but my code checks for <code>validation.pem</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span> % knife client reregister chef-validator
</span><span class='line'><span class="c"># or if you want to name it and save it....</span>
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> % knife client reregister chef-validator -f validaton.pem
</span></code></pre></td></tr></table></div></figure>


<p>The first one will spit out the new <code>.pem</code> you&rsquo;ll need to copy it to a file otherwise you&rsquo;ll just have to do run the command again. This/these commands are the equivalent of the <code>https://&lt;chefserver&gt;/clients/chef-validator/edit</code> and clicking that
&ldquo;Regenerate Private Key (Existing one will no longer work!).&rdquo;</p>

<p>Pretty straight forward eh?</p>

<p>On the other hand, if you&rsquo;ve broken you chef-webui, and you see something like&hellip;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>2014-03-18_21:31:54.98838 Chef::Exceptions::PrivateKeyMissing: I cannot <span class="nb">read</span> /etc/chef-server/chef-webui.pem, which you told me to use to sign requests!
</span><span class='line'>2014-03-18_21:31:54.98840 <span class="o">{</span>:request_params<span class="o">=</span>&gt;
</span><span class='line'>2014-03-18_21:31:54.98840   <span class="o">{</span><span class="s2">&quot;utf8&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;✓&quot;</span>,
</span><span class='line'>2014-03-18_21:31:54.98841    <span class="s2">&quot;authenticity_token&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;uSheCVhYuGJPBAyDBHb4AIyEfkB2EqXwLD6Uolk//ig=&quot;</span>,
</span><span class='line'>2014-03-18_21:31:54.98841    <span class="s2">&quot;name&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;admin&quot;</span>,
</span><span class='line'>2014-03-18_21:31:54.98841    <span class="s2">&quot;commit&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;login&quot;</span>,
</span><span class='line'>2014-03-18_21:31:54.98842    <span class="s2">&quot;password&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;p@ssw0rd1&quot;</span>,
</span><span class='line'>2014-03-18_21:31:54.98842    <span class="s2">&quot;action&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;login_exec&quot;</span>,
</span><span class='line'>2014-03-18_21:31:54.98842    <span class="s2">&quot;controller&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;users&quot;</span><span class="o">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In your <code>/var/log/chef-server/chef-server-webui/current</code> then the fix is pretty straight forward:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">[</span>~<span class="o">]</span> % knife client reregister chef-webui
</span><span class='line'><span class="o">[</span>~<span class="o">]</span> % <span class="c">#scp it up to your chef box</span>
</span><span class='line'>chef# chown root.root /etc/chef-server/chef-webui.pem
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Campfire + Sensu and Some Issues]]></title>
    <link href="http://jjasghar.github.io/blog/2014/03/13/campfire-plus-sensu-and-some-issues/"/>
    <updated>2014-03-13T14:45:02-05:00</updated>
    <id>http://jjasghar.github.io/blog/2014/03/13/campfire-plus-sensu-and-some-issues</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve got sensu enabled now, finally taken nagios out to pasture and shot it. You may now clap.</p>

<p>Thanks! Ok, anyway, when you get your new toy you want to start leveraging some of the cool things it can do.  My company uses campfire as our main daily communication,
and luckily there&rsquo;s a <a href="https://github.com/sensu/sensu-community-plugins/blob/master/handlers/notification/campfire.rb">campfire handler</a> for sensu! Naturally we should leverage it right? Well, it seems with 0.12 sensu, it&rsquo;s not exactly a cup o&#8217; tea.</p>

<p>Go ahead and add you campfire handler and you&rsquo;ll notice quickly:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:917:in `connect': SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (Faraday::Error::ConnectionFailed)
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:917:in `block in connect'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/timeout.rb:51:in `timeout'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:917:in `connect'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:861:in `do_start'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:850:in `start'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:1366:in `request'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/2.0.0/net/http.rb:1125:in `get'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/adapter/net_http.rb:73:in `perform_request'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/adapter/net_http.rb:38:in `call'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/response.rb:8:in `call'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/response.rb:8:in `call'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday_middleware-0.9.0/lib/faraday_middleware/response_middleware.rb:30:in `call'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/response.rb:8:in `call'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday_middleware-0.9.0/lib/faraday_middleware/request/encode_json.rb:23:in `call'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/connection.rb:247:in `run_request'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/faraday-0.8.7/lib/faraday/connection.rb:100:in `get'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/tinder-1.9.1/lib/tinder/connection.rb:76:in `get'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/tinder-1.9.1/lib/tinder/campfire.rb:34:in `rooms'
</span><span class='line'>        from /opt/sensu/embedded/lib/ruby/gems/2.0.0/gems/tinder-1.9.1/lib/tinder/campfire.rb:48:in `find_room_by_name'
</span><span class='line'>        from campfire_test.rb:7:in `&lt;main&gt;'</span></code></pre></td></tr></table></div></figure>


<p>Note: I&rsquo;d like to thank <a href="https://github.com/skymob">Bethany Erskine</a> for all the advice and the <a href="https://gist.github.com/skymob/6161155">gist</a> I just stole to explain this.</p>

<p>Ok, honestly it&rsquo;ll be locked up in the <code>sensu-client.log</code> but if you break up the json it&rsquo;ll look like the above. Anyway&hellip;.</p>

<p>So as you can see it fails with the <code>SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed (Faraday::Error::ConnectionFailed)</code> trying to verify the certs,
I spent some time trying to updated the pkg version of the ssl certs, reading more than I ever wanted to know about SSL, finally I pinged Bethany asked her after finding that gist.</p>

<p>She responded back with something that just seemed so obious, if you look at the <a href="https://github.com/sensu/sensu-community-plugins/blob/master/handlers/notification/campfire.rb#L30">handler</a> it defaults to true.</p>

<p>Change that to it to something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Tinder</span><span class="p">:</span><span class="ss">:Campfire</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;mydomain&#39;</span><span class="p">,</span> <span class="ss">:ssl_verify</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">:token</span> <span class="o">=&gt;</span> <span class="s1">&#39;7505e9c7ed5c30a77dTHIS_IS_FAKE93029a494eb7c3d20&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And&hellip;all the sudden you&rsquo;ve got messages in your campfire channel.</p>

<p>Yes, yes, you should verify ssl, but honestly, for what you get out of sensu for this, it&rsquo;s gravey for now. Plus I think after I ping <a href="https://github.com/portertech/">Sean Porter</a> about this issue in a passive/aggressive manner
he&rsquo;ll probably get it fixed. Love ya Sean :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef-book Lighting Talk]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/28/chef-book-lighting-talk/"/>
    <updated>2014-02-28T10:52:08-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/28/chef-book-lighting-talk</id>
    <content type="html"><![CDATA[<p>On February 25th 2014 I did a lighting talk on my <a href="https://github.com/jjasghar/chef-book">chef-book</a> at <a href="http://austinonrails.org/">Austin on Rails</a>.  It was about
five minutes long, and got a video of it <a href="https://www.youtube.com/watch?v=LW9njlylhiQ">here</a>. It&rsquo;s pretty straight forward, and I hope you enjoy it.</p>

<p>PS, I apologize for the quality.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Authentication With Hubot Using auth.coffee]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/19/getting-authentication-with-hubot-using-auth-dot-coffee/"/>
    <updated>2014-02-19T11:07:03-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/19/getting-authentication-with-hubot-using-auth-dot-coffee</id>
    <content type="html"><![CDATA[<p>So you want to add some authentication to hubot eh? Great, this post should walk you through the majority of it.
First thing first, set up <a href="https://github.com/github/hubot-scripts/blob/master/src/scripts/auth.coffee">auth.coffee</a>, by this
that means you need to figure out &ldquo;HUBOT_AUTH_ADMIN&rdquo;. Assuming you have hubot already connecting to a site, run <code>hubot show users</code>
and he should come back with all the people he knows about. Grab the id number for the person/people you want to have admin rights.</p>

<p>Add <code>HUBOT_AUTH_ADMIN="&lt;number&gt;,&lt;nextnumber&gt;"</code> to the <code>bin/hubot</code> or however you add variables to him, go ahead and restart hubot to
see if he now thinks you&rsquo;re and admin.</p>

<p>If all goes well, you should see something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hubot&gt; Hubot what role does shell have
</span><span class='line'>Hubot&gt; Shell: shell has the following roles:  and is also an admin.
</span><span class='line'>Hubot&gt;</span></code></pre></td></tr></table></div></figure>


<p>Great! Lets give shell our first role. I&rsquo;m going to hack the <a href="https://github.com/github/hubot/blob/master/src/scripts/ping.coffee">ping.coffee</a>
as the example, so lets give our user the first role:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hubot&gt; Hubot what role does shell have
</span><span class='line'>Hubot&gt; Shell: shell has the following roles:  and is also an admin.
</span><span class='line'>Hubot&gt; Hubot shell has ping role
</span><span class='line'>Hubot&gt; Shell: Ok, shell has the 'ping' role.
</span><span class='line'>Hubot&gt; Hubot what role does shell have
</span><span class='line'>Hubot&gt; Shell: shell has the following roles: ping and is also an admin.
</span><span class='line'>Hubot&gt;</span></code></pre></td></tr></table></div></figure>


<p>As you can see <code>shell</code> only has the admin role like expected. Then I gave <code>shell</code> the ping role, and checked it. Great. Ok, lets remove ping for now, so we
can change the <a href="https://github.com/github/hubot/blob/master/src/scripts/ping.coffee">ping.coffee</a>, to fail for us.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hubot&gt; Hubot shell doesn't have ping role
</span><span class='line'>Hubot&gt; Shell: Ok, shell doesn't have the 'ping' role.
</span><span class='line'>Hubot&gt; Hubot what role does shell have
</span><span class='line'>Hubot&gt; Shell: shell has the following roles:  and is also an admin.
</span><span class='line'>Hubot&gt; </span></code></pre></td></tr></table></div></figure>


<p>Go ahead into your <code>scripts/</code> directory, and open up your ping.coffee. Take a look at the following snippet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.exports = (robot) -&gt;
</span><span class='line'>  robot.respond /PING$/i, (msg) -&gt;
</span><span class='line'>    msg.send "PONG"</span></code></pre></td></tr></table></div></figure>


<p>Pretty straight forward eh? Go ahead and tack on this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.exports = (robot) -&gt;
</span><span class='line'>  robot.respond /PING$/i, (msg) -&gt;
</span><span class='line'>    if robot.auth.hasRole(msg.envelope.user, "ping")
</span><span class='line'>      msg.send "PONG"
</span><span class='line'>    else
</span><span class='line'>     msg.send "Sorry you can't ask me to PONG"</span></code></pre></td></tr></table></div></figure>


<p>Note: a quick explanation, if hubot responds to &ldquo;ping&rdquo; case insensitive, it&rsquo;ll respond with the &ldquo;PONG&rdquo; only if you have the role of ping.</p>

<p>Go and ahead and restart hubot, and say PING. :)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hubot&gt; hubot PING
</span><span class='line'>Hubot&gt; Sorry you can't ask me to PONG</span></code></pre></td></tr></table></div></figure>


<p>Sweet!</p>

<p>Ok, next step, lets give ourselves access to make this happen:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hubot&gt; Hubot shell has ping role
</span><span class='line'>Hubot&gt; Shell: Ok, shell has the 'ping' role.
</span><span class='line'>Hubot&gt; hubot PING
</span><span class='line'>Hubot&gt; PONG
</span><span class='line'>Hubot&gt;</span></code></pre></td></tr></table></div></figure>


<p>PERFECT!</p>

<p>So, we now can wrap certain hubot scripts for certain people. But there&rsquo;s a disappointing portion of this; in order to enforce the commands you&rsquo;ll need
to have the scripts with <code>robot.auth.hasRole(msg.envelope.user, "&lt;role&gt;")</code>, this means you&rsquo;ll have to fork the script you want to leverage and dump it in
your <code>scripts/</code> directory, and removed from your <code>hubot-scripts.json</code> and <code>external-scripts.json</code>.</p>

<p>This will probably get annoying as the scripts get updated and new features are added, but until I figure out a better way I think we&rsquo;re stuck here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.kitchen.local.yml and When You Want to Use It]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/17/dot-kitchen-dot-local-dot-yml-and-when-you-want-to-use-it/"/>
    <updated>2014-02-17T15:32:20-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/17/dot-kitchen-dot-local-dot-yml-and-when-you-want-to-use-it</id>
    <content type="html"><![CDATA[<p>I recently bought the vagrant <a href="http://www.vagrantup.com/vmware">vmware fusion</a> plugin to start testing out <a href="https://gist.github.com/fnichol/8609348">test-kitchen for mac</a>. Good ol&#8217; <a href="https://twitter.com/fnichol">Fletcher</a>
made it ridiculously easy to do and I thank him for that.  Interestingly enough though in the process of figuring it out I ran into a problem.  I have a few other <code>.kitchen.yml</code> files in different
cookbooks, and I wanted to start leveraging what I just paid for.</p>

<p>So take this <code>.kitchen.yml</code> for instance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>driver:
</span><span class='line'>  name: vagrant
</span><span class='line'>
</span><span class='line'>provisioner:
</span><span class='line'>  name: chef_solo
</span><span class='line'>
</span><span class='line'>platforms:
</span><span class='line'>  - name: ubuntu-12.04
</span><span class='line'>
</span><span class='line'>suites:
</span><span class='line'>  - name: default
</span><span class='line'>    run_list:
</span><span class='line'>      - recipe[hubot-solo::default]
</span><span class='line'>    attributes:</span></code></pre></td></tr></table></div></figure>


<p>Yep, it runs off the default of virtualbox.  If you create a <code>.kitchen.local.yml</code> file in that directory, something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>---
</span><span class='line'>driver:
</span><span class='line'>  name: vagrant
</span><span class='line'>  provider: vmware_fusion
</span><span class='line'>
</span><span class='line'>provisioner:
</span><span class='line'>  name: chef_solo
</span><span class='line'>
</span><span class='line'>platforms:
</span><span class='line'>  - name: ubuntu-12.04
</span><span class='line'>
</span><span class='line'>suites:
</span><span class='line'>  - name: default
</span><span class='line'>    run_list:
</span><span class='line'>      - recipe[hubot-solo::default]
</span><span class='line'>    attributes:</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;ll run it with vmare as the hypervisor or provider, in kitchen lingo.</p>

<p>That&rsquo;s all fine and dandy, but what about an over arching config? I thought you could create something like <code>~/.kitchen.local.yml</code> that didn&rsquo;t seem to work.</p>

<p>I pinged <a href="https://webchat.freenode.net/?channels=%23kitchenci">#kitchenci</a> and <strong>teukka</strong> gave me
the answer: set/export <code>VAGRANT_DEFAULT_PROVIDER=vmware_fusion</code> env var (in your shell&rsquo;s rc file), and boom, it worked.</p>

<p>So, long story short: if you want to have a specific change that overrides the default <code>.kitchen.yml</code> make a <code>.kitchen.local.yml</code> in the directory,
but if you want to override every hypervisor use <code>export VAGRANT_DEFAULT_PROVIDER=vmware_fusion</code> in your bashrc/zshrc.</p>

<p>I hope this helps someone making the conversion from virtualbox to vmware.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Packer VM Oh My]]></title>
    <link href="http://jjasghar.github.io/blog/2014/02/13/docker-packer-vm-oh-my/"/>
    <updated>2014-02-13T12:17:09-06:00</updated>
    <id>http://jjasghar.github.io/blog/2014/02/13/docker-packer-vm-oh-my</id>
    <content type="html"><![CDATA[<p>So I&rsquo;ve been caught up in the <a href="http://docker.io">docker</a>, <a href="http://packer.io">packer</a>, and VM discussion a handful of times. I&rsquo;ve been defending and discussing<em>cough</em>attacking<em>cough</em> different
versions and use cases. Then something happened, something I thought docker is wasn&rsquo;t what it was, and something I thought packer was isn&rsquo;t what it is. Welp, there&rsquo;s some egg on my face eh?
So here&rsquo;s a cheatsheet type post about the difference and <strong>POSSIBLE</strong> use cases.</p>

<h3>docker</h3>

<p>As the docker says in their <a href="http://www.slideshare.net/dotCloud/docker-intro-november">intro slide deck</a>, it&rsquo;s designed to &ldquo;ship code.&rdquo; This is important distinction between this and what a VM does.
docker is a souped–up version of <a href="http://linuxcontainers.org/">lxc</a> or to a lesser extent <a href="http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/jails.html">freebsd jails</a>. It allows you to
run an application in it&rsquo;s own little bubble, but has a <em>shared</em> underlying OS/kernel. (in this case linux) It allows for a quick provisioning of an application disposable and transient applications
which is great for development work. You can spin up a &ldquo;base&rdquo; build extremely quickly and hack away and it and rollback to a know good spot, without having to reimage/build the machine. In the new <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a>
world this is great for iterations. I guess a good simile is like you have a pad of paper with a base story printed on each page, you tack on the writing you want at the bottom, and if you don&rsquo;t like it just tear it
away and start again.</p>

<h3>VM</h3>

<p>So docker is designed for an application? Isn&rsquo;t that what a VM is designed for? Not exactly. docker shares the kernel and base os, while a VM is it&rsquo;s own entity. VMs also require a hypervisor of some type
that sits on another os; so if you can imagine it, VM = os ontop of hypervisor (that controls the VMs) on top of another os. This has it&rsquo;s merits, but at the same time it can be cumbersome, for development. It seems
VMs use case, compared to something like docker, is more for production deployments, more static content that updates through a deployment system.  This can bring in security uses and the like, keep that in mind.</p>

<h3>packer</h3>

<p>packer in a couple words is this: a way to create base or gold VM images. It&rsquo;s designed to create a typical/transferable VM image that works with multiple platforms and hypervisors. An example, you have a beloved mail server, you create
an image of this box, but you&rsquo;re boss now says you&rsquo;re moving cloud providers and  have to get it working on <a href="http://digitalocean.com/">digital ocean</a>. packer makes that conversion &ldquo;simple,&rdquo; which packs up the image to be portable and transferable.
I say simple mainly because honestly I haven&rsquo;t tried it yet, but I have watched a few youtube tutorials on it.</p>

<p>This post is spurred from my miss understanding of the scope of docker and VMs, and in the process of groking them, rediscovering packer.</p>

<p>So in a nutshell: docker is a wrapper for lxc/jails for linux running an app sharing a common kernel, VMs are separate entities and kernels that more production focused, and packer is a way to create transferable VMs between hypervisors.</p>
]]></content>
  </entry>
  
</feed>
